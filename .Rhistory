if (i %% 1000 == 0){print(i)}
curr_id <- analysis_ID[i]
Feature_df[i,"STUDY_PATIENT_ID"] <- curr_id
#sCr
Feature_df[i,"Admit_sCr"] <- get_feature_forPt(curr_id,All_Scr_df,"AdmitICU_SCr")
Feature_df[i,"Baseline_sCr"] <- get_feature_forPt(curr_id,All_Scr_df,"Baseline_SCr")
Feature_df[i,"Peak_SCr_inICU_D0_D3"] <- get_feature_forPt(curr_id,All_Scr_df,"Peak_SCr_inICU_D0_D3")
#demo
Feature_df[i,"AGE"] <- get_feature_forPt(curr_id,All_Demo_df,"AGE")
Feature_df[i,"RACE"] <- get_feature_forPt(curr_id,All_Demo_df,"RACE")
Feature_df[i,"GENDER"] <- get_feature_forPt(curr_id,All_Demo_df,"GENDER")
#anemia
Feature_df[i,"Anemia_D1"] <- get_feature_forPt(curr_id,All_Anemia_usingNotimputedLabs_df,"Anemia")
#Fluid Overload
Feature_df[i,"FluidOverload_inPercentage"] <- get_feature_forPt(curr_id,All_Fluid_Overload_df,"FluidOverload_inPercentage")
#BMI
Feature_df[i,"BMI"] <- get_feature_forPt(curr_id,All_BMI_df,"BMI")
#All_ECMO_IABP_MV_VAD_df
Feature_df[i,"ECMO_ICUD0toD3"] <- get_feature_forPt(curr_id,All_ECMO_IABP_MV_VAD_df,"ECMO_ICUD0toD3")
Feature_df[i,"IABP_ICUD0toD3"] <- get_feature_forPt(curr_id,All_ECMO_IABP_MV_VAD_df,"IABP_ICUD0toD3")
Feature_df[i,"MV_ICUD0toD3"] <- get_feature_forPt(curr_id,All_ECMO_IABP_MV_VAD_df,"MV_ICUD0toD3")
Feature_df[i,"VAD_ICUD0toD3"] <- get_feature_forPt(curr_id,All_ECMO_IABP_MV_VAD_df,"VAD_ICUD0toD3")
#"Mechanical_Hemodynamic_Support"
if (Feature_df[i,"VAD_ICUD0toD3"]  == 1 | Feature_df[i,"IABP_ICUD0toD3"] == 1 | Feature_df[i,"ECMO_ICUD0toD3"] == 1 ){
Feature_df[i,"Mechanical_Hemodynamic_Support"] <- 1
}else{
Feature_df[i,"Mechanical_Hemodynamic_Support"] <- 0
}
#KDIGO
Feature_df[i,"Admit_KDIGO_ICU"] <- get_feature_forPt(curr_id,All_KDIGO_df,"Admit_KDIGO_ICU")
Feature_df[i,"MAX_KDIGO_ICU_D0toD3"] <- get_feature_forPt(curr_id,All_KDIGO_df,"MAX_KDIGO_ICU_D0toD3")
Feature_df[i,"LAST_KDIGO_ICU_D0toD3"] <- get_feature_forPt(curr_id,All_KDIGO_df,"LAST_KDIGO_ICU_D0toD3")
#All_HT_WT_RESP_FIO2_df
Feature_df[i,"FI02_D1_LOW"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"FI02_D1_LOW")
Feature_df[i,"FI02_D1_HIGH"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"FI02_D1_HIGH")
Feature_df[i,"RESP_RATE_D1_LOW"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"RESP_RATE_D1_LOW")
Feature_df[i,"RESP_RATE_D1_HIGH"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"RESP_RATE_D1_HIGH")
Feature_df[i,"HEIGHT_Meters"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"HEIGHT_Meters")
Feature_df[i,"INITIAL_WEIGHT_KG"] <- get_feature_forPt(curr_id,All_HT_WT_RESP_FIO2_df,"INITIAL_WEIGHT_KG")
#All_MAP_TEMP_HR_df
Feature_df[i,"HR_D1_LOW"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"HR_D1_LOW")
Feature_df[i,"HR_D1_HIGH"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"HR_D1_HIGH")
Feature_df[i,"MAP_D1_LOW"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"MAP_D1_LOW")
Feature_df[i,"MAP_D1_HIGH"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"MAP_D1_HIGH")
Feature_df[i,"Temperature_D1_LOW"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"Temperature_D1_LOW")
Feature_df[i,"Temperature_D1_HIGH"] <- get_feature_forPt(curr_id,All_MAP_TEMP_HR_df,"Temperature_D1_HIGH")
#All_septic_df
Feature_df[i,"Sepsis_Before_or_At_Admission"] <- get_feature_forPt(curr_id,All_septic_df,"Sepsis_Before_or_At_Admission")
#All_UrineOutput_df
Feature_df[i,"UrineOutput_D0toD3"] <- get_feature_forPt(curr_id,All_UrineOutput_df,"UrineOutput")
Feature_df[i,"UrineFlow_D0toD3"] <- get_feature_forPt(curr_id,All_UrineOutput_df,"UrineFlow")
#All_onRRT_df
Feature_df[i,"onRRT_ICUD0toD3"] <- get_feature_forPt(curr_id,All_onRRT_df,"onRRT_ICUD0toD3")
#All_Nephrotoxin_Vasopressor_df
Feature_df[i,"Nephrotoxin_ICUD0toD3"] <- get_feature_forPt(curr_id,All_Nephrotoxin_Vasopressor_df,"Nephrotoxin_ICUD0toD3")
Feature_df[i,"Vasopressor_ICUD0toD3"] <- get_feature_forPt(curr_id,All_Nephrotoxin_Vasopressor_df,"Vasopressor_ICUD0toD3")
#All_pO2_pCO2_pH_df
Feature_df[i,"PO2_D1_LOW"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PO2_D1_LOW")
Feature_df[i,"PO2_D1_HIGH"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PO2_D1_HIGH")
Feature_df[i,"PCO2_D1_LOW"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PCO2_D1_LOW")
Feature_df[i,"PCO2_D1_HIGH"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PCO2_D1_HIGH")
Feature_df[i,"PH_D1_LOW"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PH_D1_LOW")
Feature_df[i,"PH_D1_HIGH"] <- get_feature_forPt(curr_id,All_pO2_pCO2_pH_df,"PH_D1_HIGH")
#Labs
Feature_df[i,"Bilirubin_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Bilirubin_D1_HIGH")
Feature_df[i,"Platelets_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Platelets_D1_LOW")
Feature_df[i,"Sodium_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Sodium_D1_LOW")
Feature_df[i,"Sodium_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Sodium_D1_HIGH")
Feature_df[i,"Potassium_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Potassium_D1_LOW")
Feature_df[i,"Potassium_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Potassium_D1_HIGH")
Feature_df[i,"Hematocrit_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Hematocrit_D1_LOW")
Feature_df[i,"Hematocrit_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Hematocrit_D1_HIGH")
Feature_df[i,"Hemoglobin_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Hemoglobin_D1_LOW")
Feature_df[i,"Hemoglobin_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Hemoglobin_D1_HIGH")
Feature_df[i,"WBC_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"WBC_D1_LOW")
Feature_df[i,"WBC_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"WBC_D1_HIGH")
Feature_df[i,"Bicarbonate_D1_LOW"] <- get_feature_forPt(curr_id,All_LAB_df,"Bicarbonate_D1_LOW")
Feature_df[i,"Bicarbonate_D1_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"Bicarbonate_D1_HIGH")
Feature_df[i,"BUN_D0toD3_HIGH"] <- get_feature_forPt(curr_id,All_LAB_df,"BUN_D0toD3_HIGH")
#All_ELIX_df
elix_names <- c("ELX_GRP_1","ELX_GRP_5","ELX_GRP_6","ELX_GRP_7","ELX_GRP_10","ELX_GRP_11","ELX_GRP_12",
"ELX_GRP_15","ELX_GRP_16","ELX_GRP_17","ELX_GRP_19","ELX_GRP_21","ELX_GRP_31")
Feature_df[i,elix_names] <- get_feature_forPt(curr_id,All_ELIX_df,elix_names)
#"Hours_inICUD0toD3"
Feature_df[i,"Hours_inICUD0toD3"] <- get_feature_forPt(curr_id,All_time_df,"Actual_ICUHours_D0toD3")
#Unplanned_Admission
Feature_df[i,"Unplanned_Admission"] <- get_feature_forPt(curr_id,All_unplannedAdmission_df,"unplanned_Admission")
}
#4. Compute missing before imputation
missing_table <- get_missing_rate_table(Feature_df,colnames(Feature_df))
missing_table
write.csv(Feature_df,paste0(outdir,"Model_Feature_Outcome/All_Feature_NOTimputed_updatedSeptic.csv"),row.names = F)
#5.imputation median except Anemia and ID
features_cols <- colnames(Feature_df)[-which(colnames(Feature_df) %in% c("STUDY_PATIENT_ID","Anemia_D1"))]
Final_Feature_df <- median_imputation_func(Feature_df,features_cols)
missing_table2 <- get_missing_rate_table(Final_Feature_df,colnames(Feature_df))
missing_table2
#6.Update missing Anemia using impuated labs
missing_idxes<- which(is.na(Final_Feature_df$Anemia_D1) == T)
for (i in 1:length(missing_idxes)){
curr_indxes <- missing_idxes[i]
curr_id <- Final_Feature_df[curr_indxes,"STUDY_PATIENT_ID"]
curr_flag <- All_Anemia_df[which(All_Anemia_df$STUDY_PATIENT_ID == curr_id),"Anemia"]
Final_Feature_df[curr_indxes,"Anemia_D1"] <- curr_flag
}
missing_table2 <- get_missing_rate_table(Final_Feature_df,colnames(Feature_df))
missing_table2
write.csv(Final_Feature_df,paste0(outdir,"Model_Feature_Outcome/All_Feature_imputed_updatedSeptic.csv"),row.names = F)
#6.Max min norm
features_cols <- colnames(Final_Feature_df)[-which(colnames(Final_Feature_df) %in% c("STUDY_PATIENT_ID"))]
Feature_df_normed <- Final_Feature_df
for (j in 1:length(features_cols)){
curr_f <- features_cols[j]
Feature_df_normed[,curr_f] <- min_max_func(Feature_df_normed[,curr_f])
}
write.csv(Feature_df_normed,paste0(outdir,"Model_Feature_Outcome/All_Feature_imputed_normed_updatedSeptic.csv"),row.names = F)
table(Feature_df$Sepsis_Before_or_At_Admission)
source("TAKI_Ultility.R")
library(rms)
library(PredictABEL)
library(pROC) #can also use this one for delong's methods
library(Rmisc)
library(caret)
#this script do 10 folds CV on UK data
#1. for each fold , down sampling 10 time, each instance get 10 predicted results
#2. compute confidence interval for performance metrics for each fold with each sampling index
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0805/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                   ############
#feature file: 1. All_Feature_imputed_normed.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed_updatedSeptic.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
colnames(model_data)
#2.CV
upsample_flag <- 0
N_sampling <- 10
NFolds <- 10
model_name_list <- c("SVM","RF","LogReg","XGB")
for (m in 1:length(model_name_list)){
model_name <- model_name_list[m]
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds)
final_pred <- cv_res[[1]]
write.csv(final_pred, paste0(outdir1,"Prediction_", model_name, ".csv"),row.names = F)
#compute avg performance
final_importance_matrix <- cv_res[[2]]
feature_indexes<- which(colnames(model_data) != outcome_colname)
features <- colnames(model_data)[feature_indexes]
avg_importance_matrix <- compute_avg_importance(final_importance_matrix,features,model_name)
write.csv(avg_importance_matrix, paste0(outdir1,"Importance_AVG_", model_name, ".csv"),row.names = F)
#Compute perforamnce for each fold with each sampling
eachfold_eachSample_perf_tb <- compute_performance_TrainCV_func(N_sampling,NFolds,final_pred)
write.csv(eachfold_eachSample_perf_tb, paste0(outdir1,"Performance_PerFoldPerSample_", model_name, ".csv"),row.names = F)
#get CI and mean perforamnce
CI_perf_tb <- perf_Mean_CI_func(eachfold_eachSample_perf_tb[,3:14])
write.csv(CI_perf_tb, paste0(outdir1,"Performance_AVG_CI_", model_name, ".csv"),row.names = T)
}
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#4. Get sepsis df
#sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sepsis",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
#Updated 080521
sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sep",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
sepsis_BeforeAtAdmin_df <- sepsis_df[which(sepsis_df$DIAGNOSIS_TYPE %in% c("06.Working Dx","01.Visit Reason","Admit Dx","..Working Dx")),]
sepsis_beforeat_IDs <- unique(sepsis_BeforeAtAdmin_df$STUDY_PATIENT_ID)
##########################################################################################
#Features to extract : 1. Septic before/at admission
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis_Before_or_At_Admission")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_beforeat_IDs){
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 1
}else{
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 0
}
}
#Add Raw hosp time
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
View(raw_ADMISSION_INDX_df)
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[!duplicated(raw_ADMISSION_INDX_df[,reformat_cols]),]
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[!duplicated(raw_ADMISSION_INDX_df[,c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]),]
#Add Raw hosp time
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[!duplicated(raw_ADMISSION_INDX_df[,c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]),]
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#4. Get sepsis df
#sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sepsis",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
#'@Updated 080521
sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sep",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
sepsis_BeforeAtAdmin_df <- sepsis_df[which(sepsis_df$DIAGNOSIS_TYPE %in% c("06.Working Dx","01.Visit Reason","Admit Dx","..Working Dx")),]
sepsis_beforeat_IDs <- unique(sepsis_BeforeAtAdmin_df$STUDY_PATIENT_ID)
##########################################################################################
#Features to extract : 1. Septic before/at admission
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis_Before_or_At_Admission")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_beforeat_IDs){
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 1
}else{
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 0
}
}
#table(Final_sepsis_df$Sepsis_Before_or_At_Admission) #6901  453
#write.csv(Final_sepsis_df,paste0(outdir,"All_sepsis_Before_Or_At_Admission.csv"),row.names = F)
#'@Updated 080521
table(Final_sepsis_df$Sepsis_Before_or_At_Admission) #6901  668
#Add Raw hosp time
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[!duplicated(raw_ADMISSION_INDX_df[,c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]),]
#Add Patient ENCNTER_ID
ID_df <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",stringsAsFactors = F)
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
curr_id <- Final_sepsis_df$STUDY_PATIENT_ID[i]
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_id
curr_time_df <- which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id)
curr_time_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
curr_time_df
colnames(ID_df)
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
Final_sepsis_df[, c("PATIENT_MRN", "ENCOUNTER_ID","HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID","HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID","HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")] <- NA
View(Final_sepsis_df)
curr_otherID_df <- ID_df[which(ID_df[,"STUDY_PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
which(ID_df[,"STUDY_PATIENT_ID"] == curr_id)
ID_df$PATIENT_ID
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
curr_otherID_df
cbind(curr_otherID_df,curr_time_df)
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_time_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, c("PATIENT_MRN","ENCOUNTER_ID","HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")] <- cbind(curr_otherID_df,curr_time_df)
}
warnings()
curr_otherID_df$PATIENT_MRN
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID","HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")] <- NA
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_time_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, "PATIENT_MRN"]          <- curr_otherID_df$PATIENT_MRN
Final_sepsis_df[i, "ENCOUNTER_ID"]         <- curr_otherID_df$ENCOUNTER_ID
Final_sepsis_df[i, "HOSP_ADMIT_DATE"]      <- curr_time_df$HOSP_ADMIT_DATE
Final_sepsis_df[i, "HOSP_DISCHARGE_DATE"]  <- curr_time_df$HOSP_DISCHARGE_DATE
Final_sepsis_df[i, "ICU_ADMIT_DATE"]       <- curr_time_df$ICU_ADMIT_DATE
Final_sepsis_df[i, "ICU_DISCHARGE_DATE"]   <- curr_time_df$ICU_DISCHARGE_DATE
}
i
curr_otherID_df
curr_time_df
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID"] <- NA
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID")] <- NA
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_time_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, "PATIENT_MRN"]          <- curr_otherID_df$PATIENT_MRN
Final_sepsis_df[i, "ENCOUNTER_ID"]         <- curr_otherID_df$ENCOUNTER_ID
}
View(Final_sepsis_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#4. Get sepsis df
#sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sepsis",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
#'@Updated 080521
sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sep",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
sepsis_BeforeAtAdmin_df <- sepsis_df[which(sepsis_df$DIAGNOSIS_TYPE %in% c("06.Working Dx","01.Visit Reason","Admit Dx","..Working Dx")),]
sepsis_beforeat_IDs <- unique(sepsis_BeforeAtAdmin_df$STUDY_PATIENT_ID)
##########################################################################################
#Features to extract : 1. Septic before/at admission
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis_Before_or_At_Admission")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_beforeat_IDs){
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 1
}else{
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 0
}
}
#'@Updated 080521
table(Final_sepsis_df$Sepsis_Before_or_At_Admission) #6901  668
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID")] <- NA
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_time_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, "PATIENT_MRN"]          <- curr_otherID_df$PATIENT_MRN
Final_sepsis_df[i, "ENCOUNTER_ID"]         <- curr_otherID_df$ENCOUNTER_ID
}
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, "PATIENT_MRN"]          <- curr_otherID_df$PATIENT_MRN
Final_sepsis_df[i, "ENCOUNTER_ID"]         <- curr_otherID_df$ENCOUNTER_ID
}
#reorder column
Final_sepsis_df <- Final_sepsis_df[,c(1,3,4,2)]
write.csv(Final_sepsis_df,paste0(outdir,"All_sepsis_Before_Or_At_Admission_0805.csv"),row.names = F)
668/7345
0.09 * 10
0.09 * 100
0.09094622 * 100
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#4. Get sepsis df
#sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sepsis",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
#'@Updated 080521
#All Sepsis
sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sep",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
sepsis_IDs <- unique(sepsis_df$STUDY_PATIENT_ID)
#Before or at admit
sepsis_BeforeAtAdmin_df <- sepsis_df[which(sepsis_df$DIAGNOSIS_TYPE %in% c("06.Working Dx","01.Visit Reason","Admit Dx","..Working Dx")),]
sepsis_beforeat_IDs <- unique(sepsis_BeforeAtAdmin_df$STUDY_PATIENT_ID)
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis_Before_or_At_Admission")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_IDs){
Final_sepsis_df[i,"Sepsis"] <- 1
}else{
Final_sepsis_df[i,"Sepsis"] <- 0
}
}
table(Final_sepsis_df$Sepsis)
table(epsis_df$DIAGNOSIS_TYPE)
table(sepsis_df$DIAGNOSIS_TYPE)
##########################################################################################
#Features to extract : 1. Septic at all time
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_IDs){
Final_sepsis_df[i,"Sepsis"] <- 1
}else{
Final_sepsis_df[i,"Sepsis"] <- 0
}
}
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#4. Get sepsis df
#sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sepsis",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
#'@Updated 080521
#All Sepsis
sepsis_df <- raw_DIAGNOSIS_df[which(grepl("sep",raw_DIAGNOSIS_df[,"DIAGNOSIS_DESC"],ignore.case = T) ==T),]
sepsis_IDs <- unique(sepsis_df$STUDY_PATIENT_ID)
#Before or at admit
sepsis_BeforeAtAdmin_df <- sepsis_df[which(sepsis_df$DIAGNOSIS_TYPE %in% c("06.Working Dx","01.Visit Reason","Admit Dx","..Working Dx")),]
sepsis_beforeat_IDs <- unique(sepsis_BeforeAtAdmin_df$STUDY_PATIENT_ID)
##########################################################################################
#Features to extract : 1. Septic at all time
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_IDs){
Final_sepsis_df[i,"Sepsis"] <- 1
}else{
Final_sepsis_df[i,"Sepsis"] <- 0
}
}
table(Final_sepsis_df$Sepsis)
#Add Patient ENCNTER_ID
ID_df <- read.xlsx("/Volumes/LJL_ExtPro/Data/AKI_Data/Victors_data/Matching_big_dataset.xlsx",sheet = 1)
Final_sepsis_df[, c("PATIENT_MRN","ENCOUNTER_ID")] <- NA
for (i in 1:nrow(Final_sepsis_df)){
curr_id <- Final_sepsis_df[i,"STUDY_PATIENT_ID"]
curr_otherID_df <- ID_df[which(ID_df[,"PATIENT_ID"] == curr_id),c("PATIENT_MRN","ENCOUNTER_ID")]
Final_sepsis_df[i, "PATIENT_MRN"]          <- curr_otherID_df$PATIENT_MRN
Final_sepsis_df[i, "ENCOUNTER_ID"]         <- curr_otherID_df$ENCOUNTER_ID
}
#reorder column
Final_sepsis_df <- Final_sepsis_df[,c(1,3,4,2)]
write.csv(Final_sepsis_df,paste0(outdir,"All_sepsis_AllTime_0805.csv"),row.names = F)
table(Final_sepsis_df$Sepsis)
#Steps: 1. Get raw available values
##########################################################################################
#1. Get raw available values
Final_sepsis_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2 ))
colnames(Final_sepsis_df) <- c("STUDY_PATIENT_ID","Sepsis_Before_or_At_Admission")
for (i in 1:length(analysis_ID)){
curr_id <- analysis_ID[i]
Final_sepsis_df[i,"STUDY_PATIENT_ID"] <- curr_id
if (curr_id %in% sepsis_beforeat_IDs){
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 1
}else{
Final_sepsis_df[i,"Sepsis_Before_or_At_Admission"] <- 0
}
}
#'@Updated 080521
table(Final_sepsis_df$Sepsis_Before_or_At_Admission) #6901  668
2875/7354*100
