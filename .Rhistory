n_up0 <-  length(which(model_comp_df0[,"pred_prob_Baseline"] >= 0 & model_comp_df0[,"pred_prob_Baseline"] < 0.5 &
model_comp_df0[,"pred_prob_Compared"] >= 0.5 & model_comp_df0[,"pred_prob_Compared"] <= 1 ))
n_down0 <- length(which(model_comp_df0[,"pred_prob_Baseline"] >= 0.5 & model_comp_df0[,"pred_prob_Baseline"] <=1 &
model_comp_df0[,"pred_prob_Compared"] >=0 & model_comp_df0[,"pred_prob_Compared"] < 0.5 ) )
p_up0 <- n_up0/length(index0)
p_down0 <- n_down0/length(index0)
#NRI
NRI_Categorical <-  round(p_up1 - p_down1 +  p_down0 - p_up0,4)
#For categorical Model:
#Events, No. (%):    # up|event   (correct) / total number of event
#nonEvents, No. (%): # down|nonevent (correct) / total number of nonevent
n_andPrec_CorrectReclassified_events   <- paste0(n_up1,"(",round(p_up1*100,2),"%)")
n_andPrec_CorrectReclassified_nonevents <-paste0(n_down0,"(",round(p_down0*100,2),"%)")
#Continuous NRI, which does not require any discrete risk categories and
#relies on the proportions of individuals with outcome correctly assigned a higher probability
#and individuals without outcome correctly assigned a lower probability by an updated model compared with the initial model.
p_higher1   <- length(which(model_comp_df1[,"pred_prob_Compared"] > model_comp_df1[,"pred_prob_Baseline"])) /length(index1)
p_lower1 <- length(which(model_comp_df1[,"pred_prob_Compared"] < model_comp_df1[,"pred_prob_Baseline"])) /length(index1)
p_higher0 <-    length(which(model_comp_df0[,"pred_prob_Compared"] > model_comp_df0[,"pred_prob_Baseline"])) /length(index0)
p_lower0 <- length(which(model_comp_df0[,"pred_prob_Compared"] < model_comp_df0[,"pred_prob_Baseline"])) /length(index0)
NRI_continous <-  round(p_higher1 - p_lower1 +  p_lower0 - p_higher0,4)
#IDI equal to x% means that the difference in average predicted risks between the individuals with and without the outcome increased by x% in the updated model
diff_bl <- mean(model_comp_df1$pred_prob_Baseline) - mean(model_comp_df0$pred_prob_Baseline)
diff_cp <- mean(model_comp_df1$pred_prob_Compared) - mean(model_comp_df0$pred_prob_Compared)
IDI <- round(diff_cp-diff_bl,4)
res <- as.data.frame(t(cbind(NRI_Categorical,NRI_continous,IDI,
n_andPrec_CorrectReclassified_events,n_andPrec_CorrectReclassified_nonevents)))
res$V2 <- rownames(res)
rownames(res) <- NULL
res <- res[,2:1]
colnames(res) <- c("Metrics","Score")
res$Score <- as.vector(res$Score)
return(res)
}
#this function get the no of events/nonevents reclassifed corerctly and do manualy check of NRI calculation
res3 <- reclassification_manually_cutoff05_func(model_comp_df)
#add no of events/nonevents reclassifed corerctly to res2
res2[4:5,1:2] <- res3[4:5,1:2]
res2
res3
source("TAKI_Ultility.R")
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0708/"
###############################################################
#1. For mortality, compare models with IDI, NRI
###############################################################
#1. For UK
perf_dir <- paste0(proj_dir,"CV_performance/mortality/")
baseline_model_file  <- "/SOFA/Prediction_RF.csv"
comprison_model_file1 <- "/APACHE/Prediction_RF.csv"
comprison_model_file2 <- "/SelectedClinicalFeature/Prediction_RF.csv"
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
## compute reclassification measures
compute_IDI_NRI_func <-function(perf_dir,b_model_file,comprison_model_file,cutoff = c(0,.50,1)){
# b_model_file <- baseline_model_file
# comprison_model_file <- comprison_model_file1
#
#
baseline_df <- read.csv(paste0(perf_dir,"/",b_model_file),stringsAsFactors = F)
comp_df <- read.csv(paste0(perf_dir,"/",comprison_model_file),stringsAsFactors = F)
#get averge pred prob for each pt from  sampling
avg_baseline_df <- get_avg_pred_func(baseline_df)
avg_comp_df <- get_avg_pred_func(comp_df)
#match ID order
avg_baseline_df <- avg_baseline_df[match(avg_baseline_df$ID,avg_comp_df$ID),]
#Combine comparison models
model_comp_df <- cbind.data.frame(avg_baseline_df[,"Label"],
avg_baseline_df[,"AVG_pred_prob"],
avg_comp_df[,"AVG_pred_prob"])
colnames(model_comp_df) <- c("Label","pred_prob_Baseline","pred_prob_Compared")
predRisk_initialModel <- model_comp_df$pred_prob_Baseline
predRisk_updatedModel <- model_comp_df$pred_prob_Compared
#cutoff <- c(0,.10,.50,1)
#cutoff <- c(0,.10,.30,1)
#cutoff <- c(0,0.5,1)
#This function print res
reclassification(data=model_comp_df, cOutcome=1, predrisk1=predRisk_initialModel, predrisk2=predRisk_updatedModel, cutoff = cutoff)
#This function returns table of res
res2 <- reclassification_returnRes(data=model_comp_df, cOutcome=1, predrisk1=predRisk_initialModel, predrisk2=predRisk_updatedModel, cutoff = cutoff)
#this function get the no of events/nonevents reclassifed corerctly and do manualy check of NRI calculation
res3 <- reclassification_manually_cutoff05_func(model_comp_df)
#add no of events/nonevents reclassifed corerctly to res2
res2[4:5,1:2] <- res3[4:5,1:2]
return(res2)
}
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
reclass_res1
reclass_res2 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file2,cutoff = c(0,0.5,1))
reclass_res2
colnames(reclass_res1)[2] <- paste0("APACHE_",colnames(reclass_res1)[2])
colnames(reclass_res2)[2] <- paste0("Clinical_",colnames(reclass_res2)[2])
comb_res <- cbind(reclass_res1,reclass_res2)
comb_res
View(comb_res)
write.csv(risk_mortality_UK_count,paste0(perf_dir,"UK_ReclassResults_RF.csv"))
write.csv(comb_res,paste0(perf_dir,"UK_Mortality_ReclassResults_RF.csv"))
source("TAKI_Ultility.R")
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0708/"
###############################################################
#1. For mortality, compare models with IDI, NRI
###############################################################
#1. For UK
perf_dir <- paste0(proj_dir,"CV_performance/mortality/")
baseline_model_file  <- "/SOFA/Prediction_RF.csv"
comprison_model_file1 <- "/APACHE/Prediction_RF.csv"
comprison_model_file2 <- "/SelectedClinicalFeature/Prediction_RF.csv"
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
colnames(reclass_res1)[2] <- paste0("APACHEvsSOFA_",colnames(reclass_res1)[2])
reclass_res2 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file2,cutoff = c(0,0.5,1))
colnames(reclass_res2)[2] <- paste0("SelectedClinicalvsSOFA_",colnames(reclass_res2)[2])
comb_res <- cbind(reclass_res1,reclass_res2)
write.csv(comb_res,paste0(perf_dir,"UK_Mortality_ReclassResults_RF.csv"))
###############################################################
#1. For MAKE, compare models with IDI, NRI
###############################################################
#1.UK
perf_dir <- paste0(proj_dir,"CV_performance/make120_drop50/")
baseline_model_file  <- "/KDIGO/Prediction_RF.csv"
comprison_model_file1 <- "/SelectedClinicalFeature/Prediction_RF.csv"
reclass_res <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
colnames(reclass_res)[2] <- paste0("SelectedClinicalvsKDIGO_",colnames(reclass_res)[2])
reclass_res
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/3E_Compute_Reclass_Stats.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/3E_Compute_Reclass_Stats.R', echo=TRUE)
reclass_res2
reclass_res2 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file2,cutoff = c(0,0.5,1))
perf_dir <- paste0(proj_dir,"CV_performance/mortality/")
baseline_model_file  <- "/SOFA/Prediction_RF.csv"
comprison_model_file1 <- "/APACHE/Prediction_RF.csv"
comprison_model_file2 <- "/SelectedClinicalFeature/Prediction_RF.csv"
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
colnames(reclass_res1)[2] <- paste0("APACHEvsSOFA_",colnames(reclass_res1)[2])
reclass_res2 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file2,cutoff = c(0,0.5,1))
colnames(reclass_res2)[2] <- paste0("SelectedClinicalvsSOFA_",colnames(reclass_res2)[2])
comb_res <- cbind(reclass_res1,reclass_res2)
reclass_res1
reclass_res1
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/3E_Compute_Reclass_Stats.R', echo=TRUE)
###############################################################
#1. For MAKE, compare models with IDI, NRI
###############################################################
#1.UK
perf_dir <- paste0(proj_dir,"CV_performance/make120_drop50/")
baseline_model_file  <- "/KDIGO/Prediction_RF.csv"
comprison_model_file1 <- "/SelectedClinicalFeature/Prediction_RF.csv"
reclass_res <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
colnames(reclass_res)[2] <- paste0("SelectedClinicalvsKDIGO_",colnames(reclass_res)[2])
write.csv(reclass_res,paste0(perf_dir,"UK_MAKE50_ReclassResults_RF.csv"))
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
#change col name
cols_name_tochange <- which(colnames(raw_SCR_df) %in% c("PATIENT_NUM","RESULT_TIME","ORD_VALUE"))
colnames(raw_SCR_df)[cols_name_tochange] <- c("STUDY_PATIENT_ID","SCR_ENTERED","SCR_VALUE")
##remove duplicated entry
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve EPI
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
View(raw_SCR_df)
View(All_time_df)
##########################################################################################
#anlaysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
curr_id <- 3320737
Final_SCR_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 7))
colnames(Final_SCR_df) <- c("STUDY_PATIENT_ID","Baseline_SCr","AdmitICU_SCr","AdmitICU_SCr_TIME",
"Peak_SCr_inICU_D0_D3","NUM_SCr_inICU_D0_D3","Lowest_SCr_inICU_D0_D3")
curr_id <- 3320737
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
i <- 1
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
curr_id <- 3320737
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end   <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#baseline Scr
curr_bl_scr <- get_baseline_scr_func(curr_hosp_start,curr_scr_df,"IP_FLAG")
curr_bl_scr
curr_icu_start
curr_icu_start - days(7)
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load ADMISSION_INDX
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"tIndexedIcuAdmission.csv"),stringsAsFactors = F)
View(raw_ADMISSION_INDX_df)
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
#change col name
cols_name_tochange <- which(colnames(raw_SCR_df) %in% c("PATIENT_NUM","RESULT_TIME","ORD_VALUE"))
colnames(raw_SCR_df)[cols_name_tochange] <- c("STUDY_PATIENT_ID","SCR_ENTERED","SCR_VALUE")
##remove duplicated entry
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve EPI
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
##########################################################################################
#anlaysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
Final_SCR_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 7))
colnames(Final_SCR_df) <- c("STUDY_PATIENT_ID","Baseline_SCr","AdmitICU_SCr","AdmitICU_SCr_TIME",
"Peak_SCr_inICU_D0_D3","NUM_SCr_inICU_D0_D3","Lowest_SCr_inICU_D0_D3")
curr_id <- 4057
curr_id <- analysis_ID[i]
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end   <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_scr_df
View(curr_scr_df)
curr_id <- 4057
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end   <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#baseline Scr
curr_bl_scr <- get_baseline_scr_func(curr_hosp_start,curr_scr_df,"IP_FLAG")
curr_bl_scr
#Get actual days/times in ICU D0-D3
#it could be ICU end time (e.g, if ICU stays < 3 days) or the end of ICU D3
curr_actual_ICU_time_idxes <- which(colnames(curr_time_df) %in% c("Actual_D0_End","Actual_D1_End","Actual_D2_End","Actual_D3_End"))
curr_actual_ICU_time <- curr_time_df[,curr_actual_ICU_time_idxes]
curr_last_ICU_time <- max(ymd_hms(curr_actual_ICU_time),na.rm = T)
curr_last_ICU_time
curr_actual_ICU_time
colnames(curr_time_df)
curr_time_df[,c(19,20,21,22,23,34,25,26)]
curr_time_df[,c(19,20,21,22,23,24,25,26)]
#Get actual days/times in ICU D0-D3
#it could be ICU end time (e.g, if ICU stays < 3 days) or the end of ICU D3
curr_actual_ICU_time_idxes <- which(colnames(curr_time_df) %in% c("Actual_D0_End","Actual_D1_End","Actual_D2_End","Actual_D3_End"))
curr_actual_ICU_time <- curr_time_df[,curr_actual_ICU_time_idxes]
curr_last_ICU_time <- max(ymd_hms(curr_actual_ICU_time),na.rm = T)
#Get curr scr in ICU D0-D3, could be less than 3 days
curr_scr_inICUD0D3 <- get_value_df_inWindow_func(curr_scr_df,curr_icu_start,curr_last_ICU_time,"SCR_ENTERED")
curr_scr_inICUD0D3
View(curr_scr_inICUD0D3)
curr_icu_end
getwd()
write.csv(curr_scr_inICUD0D3,"/Users/lucasliu/Desktop/4057_src.csv")
curr_scr_inICUD0D3
if (nrow(curr_scr_inICUD0D3) > 0 ){ #if any value in ICU D0 to D3
#admit Scr
curr_1st_scr_afterICU_idx <- which(curr_scr_inICUD0D3[,"SCR_ENTERED"] == min(curr_scr_inICUD0D3[,"SCR_ENTERED"]))
curr_admit_scr <- curr_scr_inICUD0D3[curr_1st_scr_afterICU_idx,"SCR_VALUE"]
curr_admit_scr_time <- curr_scr_inICUD0D3[curr_1st_scr_afterICU_idx,"SCR_ENTERED"]
Final_SCR_df[i,"AdmitICU_SCr"] <- curr_admit_scr
Final_SCR_df[i,"AdmitICU_SCr_TIME"] <- curr_admit_scr_time
#peak Scr in ICU D0 -D3
curr_peak_scr <- max(curr_scr_inICUD0D3[,"SCR_VALUE"])
curr_num_scr  <- nrow(curr_scr_inICUD0D3)
Final_SCR_df[i,"Peak_SCr_inICU_D0_D3"] <- curr_peak_scr
Final_SCR_df[i,"NUM_SCr_inICU_D0_D3"] <- curr_num_scr
#Lowest Scr in ICU D0-D3
curr_lowest_scr <- min(curr_scr_inICUD0D3[,"SCR_VALUE"])
Final_SCR_df[i,"Lowest_SCr_inICU_D0_D3"] <- curr_lowest_scr
}else{
Final_SCR_df[i,"NUM_SCr_inICU_D0_D3"] <- 0
}
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
#change col name
cols_name_tochange <- which(colnames(raw_SCR_df) %in% c("PATIENT_NUM","RESULT_TIME","ORD_VALUE"))
colnames(raw_SCR_df)[cols_name_tochange] <- c("STUDY_PATIENT_ID","SCR_ENTERED","SCR_VALUE")
##remove duplicated entry
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve EPI
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
##########################################################################################
#anlaysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#Features to extract :
#1.Baseline Scr (The outpatient sCr value closest to 7 day before hospital admission up to 1 year.
#                If no outpatient sCr, use the inpatient sCr value closet to 7 days before index hospital admission up to 1 year.
#                If no both inpt and outpt baseline sCr,  resolved the eGFR by EPI equation for 75 mL/min/1.73m2 to determine a baseline SCr value.)
#2.Admit SCr (First SCr after ICU admission)
#3.Peak SCr (Highest Value ICU D0-D3)
#4.Num Scr  (ICU D0-D3)
#Note:  ICU D0 refers to ICU admit time to the same day at 23:59:59
##########################################################################################
#1.Get baseline Scr and other Scr
options(warn=2)
Final_SCR_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 7))
colnames(Final_SCR_df) <- c("STUDY_PATIENT_ID","Baseline_SCr","AdmitICU_SCr","AdmitICU_SCr_TIME",
"Peak_SCr_inICU_D0_D3","NUM_SCr_inICU_D0_D3","Lowest_SCr_inICU_D0_D3")
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end   <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#baseline Scr
curr_bl_scr <- get_baseline_scr_func(curr_hosp_start,curr_scr_df,"IP_FLAG")
Final_SCR_df[i,"Baseline_SCr"] <- curr_bl_scr
#Get actual days/times in ICU D0-D3
#it could be ICU end time (e.g, if ICU stays < 3 days) or the end of ICU D3
curr_actual_ICU_time_idxes <- which(colnames(curr_time_df) %in% c("Actual_D0_End","Actual_D1_End","Actual_D2_End","Actual_D3_End"))
curr_actual_ICU_time <- curr_time_df[,curr_actual_ICU_time_idxes]
curr_last_ICU_time <- max(ymd_hms(curr_actual_ICU_time),na.rm = T)
#Get curr scr in ICU D0-D3, could be less than 3 days
curr_scr_inICUD0D3 <- get_value_df_inWindow_func(curr_scr_df,curr_icu_start,curr_last_ICU_time,"SCR_ENTERED")
if (nrow(curr_scr_inICUD0D3) > 0 ){ #if any value in ICU D0 to D3
#admit Scr
curr_1st_scr_afterICU_idx <- which(curr_scr_inICUD0D3[,"SCR_ENTERED"] == min(curr_scr_inICUD0D3[,"SCR_ENTERED"]))
curr_admit_scr <- curr_scr_inICUD0D3[curr_1st_scr_afterICU_idx,"SCR_VALUE"]
curr_admit_scr_time <- curr_scr_inICUD0D3[curr_1st_scr_afterICU_idx,"SCR_ENTERED"]
Final_SCR_df[i,"AdmitICU_SCr"] <- curr_admit_scr
Final_SCR_df[i,"AdmitICU_SCr_TIME"] <- curr_admit_scr_time
#peak Scr in ICU D0 -D3
curr_peak_scr <- max(curr_scr_inICUD0D3[,"SCR_VALUE"])
curr_num_scr  <- nrow(curr_scr_inICUD0D3)
Final_SCR_df[i,"Peak_SCr_inICU_D0_D3"] <- curr_peak_scr
Final_SCR_df[i,"NUM_SCr_inICU_D0_D3"] <- curr_num_scr
#Lowest Scr in ICU D0-D3
curr_lowest_scr <- min(curr_scr_inICUD0D3[,"SCR_VALUE"])
Final_SCR_df[i,"Lowest_SCr_inICU_D0_D3"] <- curr_lowest_scr
}else{
Final_SCR_df[i,"NUM_SCr_inICU_D0_D3"] <- 0
}
}
#2. resolve baseline Scr by EPI
ct <- 1
no_bl_scr_IDs <- NA
for (i in 1:nrow(Final_SCR_df)){
curr_id <- Final_SCR_df[i,"STUDY_PATIENT_ID"]
curr_scr <- Final_SCR_df[i,"Baseline_SCr"]
if (is.na(curr_scr) == T){
no_bl_scr_IDs[ct] <-  curr_id
ct <- ct+ 1
curr_demo_df <- All_RACE_GENDER_df[which(All_RACE_GENDER_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_age <- curr_demo_df[,"AGE"]
curr_gender_male <- curr_demo_df[,"Gender_Male"]
curr_race_black <- curr_demo_df[,"Race_Black"]
if (is.na(curr_age) == F & is.na(curr_gender_male) == F & is.na(curr_race_black) == F){
curr_bl_val <- SolveScr_reverse_EPI_equation(curr_age,curr_gender_male,curr_race_black)
Final_SCR_df[i,"Baseline_SCr"] <- curr_bl_val
}
}
}
which(analysis_ID == 4057)
i<-12
curr_id <- analysis_ID[i]
KDIGO_df[i,"STUDY_PATIENT_ID"] <- curr_id
##########################################################################################
#KDIGO
#1.Admit KDIGO
#2.Maximum KDIGO 	(Maximum KDIGO score in ICU D0 to D3)
#3.Last    KDIGO  (Last KDIGO score    in ICU D0 to D3)
##########################################################################################
KDIGO_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 4))
colnames(KDIGO_df) <- c("STUDY_PATIENT_ID","Admit_KDIGO_ICU","MAX_KDIGO_ICU_D0toD3","LAST_KDIGO_ICU_D0toD3")
KDIGO_df[i,"STUDY_PATIENT_ID"] <- curr_id
#baseline Scr
curr_baseline_scr <- Final_SCR_df[which(Final_SCR_df[,"STUDY_PATIENT_ID"] ==curr_id),"Baseline_SCr"]
curr_baseline_scr
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
curr_crrt_start <- ymd_hms(curr_time_df[,"Updated_CRRT_Start"])
curr_crrt_end <- ymd_hms(curr_time_df[,"Updated_CRRT_End"])
curr_hd_start <- ymd_hms(curr_time_df[,"Updated_HD_Start"])
curr_hd_end <- ymd_hms(curr_time_df[,"Updated_HD_End"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#Get actual days/times in ICU D0-D3
#it could be ICU end time (e.g, if ICU stays < 3 days) or the end of ICU D3
curr_actual_ICU_time_idxes <- which(colnames(curr_time_df) %in% c("Actual_D0_End","Actual_D1_End","Actual_D2_End","Actual_D3_End"))
curr_actual_ICU_time <- curr_time_df[,curr_actual_ICU_time_idxes]
curr_last_ICU_time <- max(ymd_hms(curr_actual_ICU_time),na.rm = T)
#Get curr scr in ICU D0-D3, could be less than 3 days
curr_scr_inICUD0D3 <- get_value_df_inWindow_func(curr_scr_df,curr_icu_start,curr_last_ICU_time,"SCR_ENTERED")
curr_scr_inICUD0D3
#current KIDGO for all Scr in window
curr_SCR_KDIGO_df    <- get_KDIGO_Score_forScrdf_func(curr_baseline_scr,curr_scr_inICUD0D3)
colnames(curr_SCR_KDIGO_df)[1] <- "Time"
#make sure time has the correct format for converting later
time_indxes <- which(nchar(curr_SCR_KDIGO_df$Time) == 10)
if (length(time_indxes) > 0){
curr_SCR_KDIGO_df[time_indxes,"Time"] <- paste(curr_SCR_KDIGO_df[time_indxes,"Time"],"00:00:00")
}
#1.Use scr in ICU D0-D3 to compute KDIGO
if (nrow(curr_scr_inICUD0D3) > 0 & is.na(curr_baseline_scr) == F){
#current KIDGO for all Scr in window
curr_SCR_KDIGO_df    <- get_KDIGO_Score_forScrdf_func(curr_baseline_scr,curr_scr_inICUD0D3)
colnames(curr_SCR_KDIGO_df)[1] <- "Time"
#make sure time has the correct format for converting later
time_indxes <- which(nchar(curr_SCR_KDIGO_df$Time) == 10)
if (length(time_indxes) > 0){
curr_SCR_KDIGO_df[time_indxes,"Time"] <- paste(curr_SCR_KDIGO_df[time_indxes,"Time"],"00:00:00")
}
}else {
curr_SCR_KDIGO_df <- NULL
}
curr_SCR_KDIGO_df
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
#change col name
cols_name_tochange <- which(colnames(raw_SCR_df) %in% c("PATIENT_NUM","RESULT_TIME","ORD_VALUE"))
colnames(raw_SCR_df)[cols_name_tochange] <- c("STUDY_PATIENT_ID","SCR_ENTERED","SCR_VALUE")
##remove duplicated entry
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve EPI
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
##########################################################################################
#anlaysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
curr_id <- 3320737
Final_SCR_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 7))
colnames(Final_SCR_df) <- c("STUDY_PATIENT_ID","Baseline_SCr","AdmitICU_SCr","AdmitICU_SCr_TIME",
"Peak_SCr_inICU_D0_D3","NUM_SCr_inICU_D0_D3","Lowest_SCr_inICU_D0_D3")
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end   <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#baseline Scr
curr_bl_scr <- get_baseline_scr_func(curr_hosp_start,curr_scr_df,"IP_FLAG")
curr_bl_scr
View(curr_scr_df)
curr_hosp_start - days(7)
curr_hosp_start  - ymd_hms("2013-12-23 14:20:00")
curr_hosp_start  - ymd_hms("2013-12-23 15:15:00")
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
colnames(raw_SCR_df)
2.0.72
2*0.72
1.5*0.72
1-0.82
1 - 0.67
0.95-0.67
1-0.67
