UTSW_MissingTable <- get_missing_rate_table(UTSW_data,colnames(UTSW_data))
colnames(UTSW_MissingTable)[2] <- paste0("UTSW_",colnames(UTSW_MissingTable)[2])
write.csv(UTSW_MissingTable,paste0(out_dir,"Feature_MissingTable_UTSW.csv"),row.names = F)
####################################################################################
#### supp table 2 Mortality
####################################################################################
selected_features_Mortality <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3","Hours_inICUD0toD3", "Temperature_D1_LOW", "Temperature_D1_HIGH")
#Outdir for mortality
#For UK
survived_df_UK <- UK_data[which(UK_data$Death_inHOSP==0),]
died_df_UK     <- UK_data[which(UK_data$Death_inHOSP==1),]
UK_tb2_sur <- compute_stats_func(survived_df_UK,"UK_survived",selected_features_Mortality)
UK_tb2_die <- compute_stats_func(died_df_UK,"UK_died",selected_features_Mortality)
UK_comb_tb2 <- cbind(UK_tb2_sur,UK_tb2_die)
View(UK_comb_tb2)
selected_features_Mortality <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3","Hours_inICUD0toD3", "Temperature_D1_LOW", "Temperature_D1_HIGH")
#Outdir for mortality
#For UK
survived_df_UK <- UK_data[which(UK_data$Death_inHOSP==0),]
died_df_UK     <- UK_data[which(UK_data$Death_inHOSP==1),]
#get table
UK_tb2_sur <- compute_stats_func(survived_df_UK,"UK_survived",selected_features_Mortality)
UK_tb2_die <- compute_stats_func(died_df_UK,"UK_died",selected_features_Mortality)
#change table feature name
UK_tb2_sur <- change_listoffeature_name_intable(UK_tb2_sur)
UK_tb2_die <- change_listoffeature_name_intable(UK_tb2_die)
#combine two
UK_comb_tb2 <- cbind(UK_tb2_sur,UK_tb2_die)
survived_df_UTSW <- UTSW_data[which(UTSW_data$Death_inHOSP==0),]
died_df_UTSW     <- UTSW_data[which(UTSW_data$Death_inHOSP==1),]
UTSW_tb2_sur <- compute_stats_func(survived_df_UTSW,"UTSW_survived",selected_features_Mortality)
UTSW_tb2_die <- compute_stats_func(died_df_UTSW,"UTSW_died",selected_features_Mortality)
#change table feature name
UTSW_tb2_sur <- change_listoffeature_name_intable(UTSW_tb2_sur)
UTSW_tb2_die <- change_listoffeature_name_intable(UTSW_tb2_die)
UTSW_comb_tb2 <- cbind(UTSW_tb2_sur,UTSW_tb2_die)
final_supp_tb2 <- cbind(UK_comb_tb2,UTSW_comb_tb2)
final_supp_tb2 <- final_supp_tb2[,-c(3,5,7)]
View(final_supp_tb2)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/4B_Compute_DiscripStats.R', echo=TRUE)
order(final_supp_tb2$UK_survived_Var)
final_supp_tb2 <- final_supp_tb2[order(final_supp_tb2$UK_survived_Var),]
View(final_supp_tb2)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/4B_Compute_DiscripStats.R', echo=TRUE)
comb_supptb4 <- comb_supptb4[order(comb_supptb4$UK_Var),]
View(comb_supptb4)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/4B_Compute_DiscripStats.R', echo=TRUE)
var_list <- c("AGE","GENDER","RACE","BMI","CHARLSON_SCORE","TOTAL_ELIX","Diabetes","Hypertension","Baseline_eGFR","CKD",
"SOFA_TOTAL","APACHE_TOTAL","Days_inHOSP","Hours_inICUD0toD3","ECMO_ICUD0toD3","IABP_ICUD0toD3","VAD_ICUD0toD3","MV_ICUD0toD3","Days_MV_ICUD0toD3",
"Sepsis_Before_or_At_Admission","UrineOutput_D0toD3","UrineFlow_D0toD3","FluidOverload_inPercentage",
"Bicarbonate_D1_AVGof(LOWHIGH)","BUN_D0toD3_HIGH","Hematocrit_D1_AVGof(LOWHIGH)","Hemoglobin_D1_AVGof(LOWHIGH)",
"Baseline_sCr","Admit_sCr","Peak_SCr_inICU_D0_D3","LastSCr_inICU_D0_D3","MAX_KDIGO_ICU_D0toD3","LAST_KDIGO_ICU_D0toD3",
"onRRT_ICUD0toD3","RRTinfo_ICUD0toD3",
"CRRT_Days_inICUD0toD3","HD_Days_inICUD0toD3")
#For UK
UK_tb4 <- compute_stats_func(UK_data,"UK",var_list)
#For UTSW
UTSW_tb4 <- compute_stats_func(UTSW_data,"UTSW",var_list)
comb_supptb4 <- cbind(UK_tb4,UTSW_tb4)
write.csv(comb_supptb4,paste0(out_dir,"Supp_table4.csv"),row.names = F)
table(UK_data$HD_Days_inICUD0toD3)
length(unique(UK_data$HD_Days_inICUD0toD3))
View(UK_tb4)
input_df <- UK_data
ordered_parameters <- var_list
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 2))
colnames(Final_table) <- c("Var","Stats")
Final_table$Var <- ordered_parameters
ordered_parameters
i<-37
curr_f <- ordered_parameters[i]
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 2))
colnames(Final_table) <- c("Var","Stats")
Final_table$Var <- ordered_parameters
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
if(curr_f == "CRRT_Days_inICUD0toD3"){
CRRT_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[CRRT_index,"CRRT_Days_inICUD0toD3"]
}else if (curr_f == "HD_Days_inICUD0toD3"){
HD_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[HD_index,"HD_Days_inICUD0toD3"]
}else if (curr_f == "Days_MV_ICUD0toD3"){
keep_index <- which(input_df[,"MV_ICUD0toD3"] == 1) #for pts on MV
curr_values <- input_df[keep_index,"Days_MV_ICUD0toD3"]
}else{
curr_values <- input_df[,curr_f]
}
#remove NAs
na_indexes <- which(is.na(curr_values) == T)
if(length(na_indexes) > 0){
curr_values <- curr_values[-na_indexes]
}
#check if catogrical or continous
n_unique_values <- length(unique(curr_values))
if(curr_f == "Total_days_HDandCRRT"){ #becaseu the number of unique value is so small, so manually do this
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else if (n_unique_values > 5){ #if continous, report median and Q1Q3
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else{
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}
}
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
if(curr_f == "CRRT_Days_inICUD0toD3"){
CRRT_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[CRRT_index,"CRRT_Days_inICUD0toD3"]
}else if (curr_f == "HD_Days_inICUD0toD3"){
HD_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[HD_index,"HD_Days_inICUD0toD3"]
}else if (curr_f == "Days_MV_ICUD0toD3"){
keep_index <- which(input_df[,"MV_ICUD0toD3"] == 1) #for pts on MV
curr_values <- input_df[keep_index,"Days_MV_ICUD0toD3"]
}else{
curr_values <- input_df[,curr_f]
}
#remove NAs
na_indexes <- which(is.na(curr_values) == T)
if(length(na_indexes) > 0){
curr_values <- curr_values[-na_indexes]
}
#check if catogrical or continous
n_unique_values <- length(unique(curr_values))
if(curr_f == "Total_days_HDandCRRT"){ #becaseu the number of unique value is so small, so manually do this
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else if (n_unique_values > 5){ #if continous, report median and Q1Q3
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else{
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}
}
}
Final_table[i,]
curr_colindex
HD_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[HD_index,"HD_Days_inICUD0toD3"]
curr_values
check <- input_df[HD_index,]
View(check)
check <- input_df[HD_index,c("HD_Days_inICUD0toD3","RRTinfo_ICUD0toD3")]
compute_stats_func <- function(input_df,cohort_name,ordered_parameters){
# input_df <- UK_data
# ordered_parameters <- var_list
Final_table <- as.data.frame(matrix(NA, nrow = length(ordered_parameters), ncol = 2))
colnames(Final_table) <- c("Var","Stats")
Final_table$Var <- ordered_parameters
for (i in 1:length(ordered_parameters)){
curr_f <- ordered_parameters[i]
#get index column of current feature
curr_colindex <- which(colnames(input_df) == curr_f)
if (length(curr_colindex) == 0){ #if feature is not in curret data input
Final_table[i,2] <- NA
}else{
#Get current values
if(curr_f == "CRRT_Days_inICUD0toD3"){
CRRT_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("CRRT_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[CRRT_index,"CRRT_Days_inICUD0toD3"]
}else if (curr_f == "HD_Days_inICUD0toD3"){
HD_index <- which(input_df[,"RRTinfo_ICUD0toD3"] %in% c("HD_only","HD_and_CRRT")) #inlcude on both pts
curr_values <- input_df[HD_index,"HD_Days_inICUD0toD3"]
}else if (curr_f == "Days_MV_ICUD0toD3"){
keep_index <- which(input_df[,"MV_ICUD0toD3"] == 1) #for pts on MV
curr_values <- input_df[keep_index,"Days_MV_ICUD0toD3"]
}else{
curr_values <- input_df[,curr_f]
}
#remove NAs
na_indexes <- which(is.na(curr_values) == T)
if(length(na_indexes) > 0){
curr_values <- curr_values[-na_indexes]
}
#check if catogrical or continous
n_unique_values <- length(unique(curr_values))
if(curr_f == "Total_days_HDandCRRT"){ #becaseu the number of unique value is so small, so manually do this
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else if (n_unique_values > 5){ #if continous, report median and Q1Q3
Final_table[i,2] <- compute_median_p25andp75_func(curr_values,2)
}else{
Final_table[i,2] <- compute_n_perc_func(curr_values,2)
}
}
}
colnames(Final_table) <- paste0(cohort_name,"_",colnames(Final_table))
return(Final_table)
}
#For UK
UK_tb4 <- compute_stats_func(UK_data,"UK",var_list)
#For UTSW
UTSW_tb4 <- compute_stats_func(UTSW_data,"UTSW",var_list)
comb_supptb4 <- cbind(UK_tb4,UTSW_tb4)
write.csv(comb_supptb4,paste0(out_dir,"Supp_table4.csv"),row.names = F)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/4B_Compute_DiscripStats.R', echo=TRUE)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3.Load Labs
raw_LAB1_df <- read.csv(paste0(raw_dir,"LABS_SET1.csv"),stringsAsFactors = F)
raw_LAB2_df <- read.csv(paste0(raw_dir,"LABS_SET2.csv"),stringsAsFactors = F)
#4. Load demo for compute Anemia
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
##########################################################################################
#Load UK raw LABS_SET1
#Features to extract :  1. Bilirubin D1 High
#                       2. Platelets D1 Low
#                       3. Sodium D1 High/Low
#                       4. Potassium D1 High/Low
#                       5. Hematocrit D1 High/Low
#                       6. Hemoglobin D1 High/Low
#                       7. WBC D1 High/Low
#                       8. Bicarbonate D1 High/Low
#                       9. BUN D0-D3 High (Take the max of d0 to d3 high and make sure d0-d3 values in recorded in ICU)
#                       10. Anemia (Compute using Lowest Hematocrit  and lowest Hemoglobin)
#Load UK raw LABS_SET2
#Features to extract :  1. Albumin (NOT SURE is high or low and on which day)
#                       2. Lactate (NOT SURE is high or low and on which day)
#Steps: 1. Get raw available values
#       2. Filter out values if patient not in ICU on that day
#       3. Remove outlier values
#       4. Compute missing
#       5. impute with median
##########################################################################################
#1. Get raw available values
Bilirubin_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bilirubin_D1_HIGH","BILIRUBIN_D1_HIGH_VALUE")
PLATELETS_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Platelets_D1_LOW","PLATELETS_D1_LOW_VALUE")
SODIUM_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Sodium_D1_LOW","SODIUM_D1_LOW_VALUE")
SODIUM_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Sodium_D1_HIGH","SODIUM_D1_HIGH_VALUE")
Potassium_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Potassium_D1_LOW","POTASSIUM_D1_LOW_VALUE")
Potassium_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Potassium_D1_HIGH","POTASSIUM_D1_HIGH_VALUE")
Hematocrit_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hematocrit_D1_LOW","HEMATOCRIT_D1_LOW_VALUE")
Hematocrit_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hematocrit_D1_HIGH","HEMATOCRIT_D1_HIGH_VALUE")
Hemoglobin_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hemoglobin_D1_LOW","HEMOGLOBIN_D1_LOW_VALUE")
Hemoglobin_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hemoglobin_D1_HIGH","HEMOGLOBIN_D1_HIGH_VALUE")
WBC_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"WBC_D1_LOW","WBC_D1_LOW_VALUE")
WBC_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"WBC_D1_HIGH","WBC_D1_HIGH_VALUE")
CO2_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bicarbonate_D1_LOW","CO2_D1_LOW_VALUE")
CO2_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bicarbonate_D1_HIGH","CO2_D1_HIGH_VALUE")
#BUN
BUN_d0_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"BUN_D0_HIGH","BUN_D0_HIGH_VALUE")
BUN_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"BUN_D1_HIGH","BUN_D1_HIGH_VALUE")
BUN_d2_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"BUN_D2_HIGH","BUN_D2_HIGH_VALUE")
BUN_d3_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"BUN_D3_HIGH","BUN_D3_HIGH_VALUE")
Albumin <- get_raw_var_values_1option_func(raw_LAB2_df,analysis_ID,"Albumin","ALBUMIN_VALUE")
Lactate <- get_raw_var_values_1option_func(raw_LAB2_df,analysis_ID,"Lactate","LACTATE_SYRINGE_ION_VALUE")
All_LAB_df <- cbind(Bilirubin_d1_High,PLATELETS_d1_Low,SODIUM_d1_Low,SODIUM_d1_High,
Potassium_d1_Low,Potassium_d1_High,Hematocrit_d1_Low,Hematocrit_d1_High,
Hemoglobin_d1_Low,Hemoglobin_d1_High,WBC_d1_Low,WBC_d1_High,
CO2_d1_Low,CO2_d1_High,
BUN_d0_High,BUN_d1_High,BUN_d2_High,BUN_d3_High,
Albumin,Lactate)
All_LAB_df <- All_LAB_df[,-which(colnames(All_LAB_df) == "STUDY_PATIENT_ID")[-1]] #remove redudant ID columns except the 1st one
#2.code the corresponding faetuere value as NA If patient does not have in ICU on that day
updated_LAB_df <- remove_featureValue(All_LAB_df,All_time_df)
table(updated_LAB_df$Excluded_Feature)
#3.Remove outlier
#Bicarbonate_D1_LOW
updated_LAB_df_OutlierExcluded <- remove_values_byValue(updated_LAB_df,"Bicarbonate_D1_LOW",5,"Less Than")
updated_LAB_df_OutlierExcluded <- remove_values_byValue(updated_LAB_df_OutlierExcluded,"Bicarbonate_D1_LOW",50,"Greater Than")
quantile(updated_LAB_df_OutlierExcluded$Bicarbonate_D1_HIGH)
quantile(updated_LAB_df_OutlierExcluded$Bicarbonate_D1_HIGH,na.rm = T)
quantile(updated_LAB_df$Bicarbonate_D1_HIGH,na.rm = T)
quantile(updated_LAB_df$Bicarbonate_D1_LOW,na.rm = T)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Analysis Id before exclusion of ESRD
##########################################################################################
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID_BeforeExclusionOfESRD.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. ESRD before at df
##########################################################################################
Final_ESRD_BEFORE_AT_df <- read.csv(paste0(outdir,"ESRD_Before_AT.csv"),stringsAsFactors = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#1.Age
Demo_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
#3. baseline eGFR
Baseline_EGFR_df <-read.csv(paste0(outdir,"Baseline_EGFR.csv"),stringsAsFactors = F)
#4. kidney Transplant
KidneyTransplant_df <-read.csv(paste0(outdir,"KidneyTransplant.csv"),stringsAsFactors = F)
#5. Scr num in D0-D3
Src_df <-read.csv(paste0(outdir,"Scr_Baseline_Admit_Peak_NUM_ICU_D0D3_df.csv"),stringsAsFactors = F)
#6. KIDGO in D0-D3
KIDGO_df <-read.csv(paste0(outdir,"KDIGO_Admit_MAX_LAST_ICU_D0D3_df.csv"),stringsAsFactors = F)
#7. ICU_LOS
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df$ICU_LOS_Hours <- NA
All_time_df$ICU_LOS_Hours <- as.numeric(difftime(ymd_hms(All_time_df[,"Updated_ICU_DISCHARGE_DATE"]),ymd_hms(All_time_df[,"Updated_ICU_ADMIT_DATE"]),units = "hours"))
#8. died in D0-D3
All_Mortality_df <-read.csv(paste0(outdir,"All_Mortality.csv"),stringsAsFactors = F)
inclusion_ID <- Inclusion_df$STUDY_PATIENT_ID
##########################################################################################
#2.Exclusion
##########################################################################################
exclude_pts_func <-function(analysis_IDs,exclusion_IDs){
remove_idx <- which(analysis_IDs %in% exclusion_IDs)
if (length(remove_idx) > 0 ){ #if analysis_IDs has any ID qualifies exclusion
acutal_exclusion_ID <- analysis_IDs[remove_idx] #The IDs in anlaysis Id qualifies exlucsion criteria
updated_analysis_IDs <- analysis_IDs[-remove_idx]
}else{ #remove nothing
acutal_exclusion_ID <-NULL
updated_analysis_IDs <- analysis_IDs
}
return(list(acutal_exclusion_ID,updated_analysis_IDs))
}
#Exclude 1- <18 years old
ExclusionID1 <- Demo_df[which(Demo_df[,"AGE"] < 18),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(inclusion_ID,ExclusionID1)
actual_exclusion_IDs1 <- res[[1]]
updated_inclusion_IDs1 <- res[[2]]
length(actual_exclusion_IDs1) #3
length(updated_inclusion_IDs1) #36014
#Exclude 2- Baseline eGFR <15
ExclusionID2 <- Baseline_EGFR_df[which(Baseline_EGFR_df[,"Baseline_eGFR"] < 15),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs1,ExclusionID2)
actual_exclusion_IDs2 <- res[[1]]
updated_inclusion_IDs2 <- res[[2]]
length(actual_exclusion_IDs2) #328
length(updated_inclusion_IDs2) #35686
ExclusionID3 <- KidneyTransplant_df[which(KidneyTransplant_df[,"KidneyTrans_BEFOREorDURING"] == 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs2,ExclusionID3)
actual_exclusion_IDs3 <- res[[1]]
updated_inclusion_IDs3 <- res[[2]]
length(actual_exclusion_IDs3) #274
length(updated_inclusion_IDs3) # 35412
#Exclude 4- <1 SCr measurement in the first 3 days of ICU admission (D0 to D3)
ExclusionID4 <- Src_df[which(Src_df[,"NUM_SCr_inICU_D0_D3"] < 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs3,ExclusionID4)
actual_exclusion_IDs4 <- res[[1]]
updated_inclusion_IDs4 <- res[[2]]
length(actual_exclusion_IDs4) #3145
length(updated_inclusion_IDs4) #32267
ExclusionID5 <- KIDGO_df[which(KIDGO_df[,"MAX_KDIGO_ICU_D0toD3"] == 0 |is.na(KIDGO_df[,"MAX_KDIGO_ICU_D0toD3"])==T),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs4,ExclusionID5)
actual_exclusion_IDs5 <- res[[1]]
updated_inclusion_IDs5 <- res[[2]]
length(actual_exclusion_IDs5) #22971
length(updated_inclusion_IDs5) # 9296
ExclusionID6 <- All_time_df[which(All_time_df[,"ICU_LOS_Hours"] < 24),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs5,ExclusionID6)
actual_exclusion_IDs6 <- res[[1]]
updated_inclusion_IDs6 <- res[[2]]
length(actual_exclusion_IDs6) #1025
length(updated_inclusion_IDs6) #8271
36017-3-328-274-3145-22971-1025-470-447
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Inclusion IDs
#1.	Have hospital admission and discharge dates
#2.	Have age, gender, and race
##########################################################################################
#1. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2.Load  demo df
Demo_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
#3.inclusion IDs
inclusionIDs <-intersect(All_time_df[,"STUDY_PATIENT_ID"],Demo_df[,"STUDY_PATIENT_ID"])
length(inclusionIDs)
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#1.Age
Demo_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
#2.ESRD
Final_ESRD_BEFORE_AT_df <- read.csv(paste0(outdir,"ESRD_Before_AT.csv"),stringsAsFactors = F)
#3. baseline eGFR
Baseline_EGFR_df <-read.csv(paste0(outdir,"Baseline_EGFR.csv"),stringsAsFactors = F)
#4. kidney Transplant
KidneyTransplant_df <-read.csv(paste0(outdir,"KidneyTransplant.csv"),stringsAsFactors = F)
#5. Scr num in D0-D3
Src_df <-read.csv(paste0(outdir,"Scr_Baseline_Admit_Peak_NUM_ICU_D0D3_df.csv"),stringsAsFactors = F)
#6. KIDGO in D0-D3
KDIGO_df <-read.csv(paste0(outdir,"KDIGO_Admit_MAX_LAST_ICU_D0D3_df.csv"),stringsAsFactors = F)
#7. ICU_LOS
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df$ICU_LOS_Hours <- NA
All_time_df$ICU_LOS_Hours <- as.numeric(difftime(ymd_hms(All_time_df[,"Updated_ICU_DISCHARGE_DATE"]),ymd_hms(All_time_df[,"Updated_ICU_ADMIT_DATE"]),units = "hours"))
#8. died in D0-D3
All_Mortality_df <-read.csv(paste0(outdir,"All_Mortality.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time and has all demo info
##########################################################################################
inclusion_ID <- Inclusion_df$STUDY_PATIENT_ID
##########################################################################################
#2.Exclusion
##########################################################################################
exclude_pts_func <-function(analysis_IDs,exclusion_IDs){
remove_idx <- which(analysis_IDs %in% exclusion_IDs)
if (length(remove_idx) > 0 ){ #if analysis_IDs has any ID qualifies exclusion
acutal_exclusion_ID <- analysis_IDs[remove_idx] #The IDs in anlaysis Id qualifies exlucsion criteria
updated_analysis_IDs <- analysis_IDs[-remove_idx]
}else{ #remove nothing
acutal_exclusion_ID <-NULL
updated_analysis_IDs <- analysis_IDs
}
return(list(acutal_exclusion_ID,updated_analysis_IDs))
}
#Exclude 1- <18 years old
ExclusionID1 <- Demo_df[which(Demo_df[,"AGE"] < 18),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(inclusion_ID,ExclusionID1)
actual_exclusion_IDs1 <- res[[1]]
updated_inclusion_IDs1 <- res[[2]]
length(actual_exclusion_IDs1) #0
length(updated_inclusion_IDs1) #10502
#Exclude 2- Baseline eGFR <15
ExclusionID2 <- Baseline_EGFR_df[which(Baseline_EGFR_df[,"Baseline_eGFR"] < 15),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs1,ExclusionID2)
actual_exclusion_IDs2 <- res[[1]]
updated_inclusion_IDs2 <- res[[2]]
length(actual_exclusion_IDs2) #222
length(updated_inclusion_IDs2) #10280
#Exclude 3- Kidney transplant before or during hospitalization
ExclusionID3 <- KidneyTransplant_df[which(KidneyTransplant_df[,"KidneyTrans_BEFOREorDURING"] == 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs2,ExclusionID3)
actual_exclusion_IDs3 <- res[[1]]
updated_inclusion_IDs3 <- res[[2]]
length(actual_exclusion_IDs3) #12
length(updated_inclusion_IDs3) #  10268
#Exclude 4- <1 SCr measurement in the first 3 days of ICU admission (D0 to D3)
ExclusionID4 <- Src_df[which(Src_df[,"NUM_SCr_inICU_D0_D3"] < 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs3,ExclusionID4)
actual_exclusion_IDs4 <- res[[1]]
updated_inclusion_IDs4 <- res[[2]]
length(actual_exclusion_IDs4) #215
length(updated_inclusion_IDs4) #10053
#Exclude 5- No AKI in the first 3 days of ICU admission (D0 to D3)
ExclusionID5 <- KDIGO_df[which(KDIGO_df[,"MAX_KDIGO_ICU_D0toD3"] == 0 |is.na(KDIGO_df[,"MAX_KDIGO_ICU_D0toD3"])==T),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs4,ExclusionID5)
actual_exclusion_IDs5 <- res[[1]]
updated_inclusion_IDs5 <- res[[2]]
length(actual_exclusion_IDs5) #7515
length(updated_inclusion_IDs5) # 2540
#Exclude 6- <24 hours of ICU stay
ExclusionID6 <- All_time_df[which(All_time_df[,"ICU_LOS_Hours"] < 24),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs5,ExclusionID6)
actual_exclusion_IDs6 <- res[[1]]
updated_inclusion_IDs6 <- res[[2]]
length(actual_exclusion_IDs6) #0
length(updated_inclusion_IDs6) # 2540
#Exclude 7- Died in the first 3 days (D0 to D3) of ICU admission
ExclusionID7 <- All_Mortality_df[which(All_Mortality_df[,"Death_ICU_D0toD3"] == 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs6,ExclusionID7)
actual_exclusion_IDs7 <- res[[1]]
updated_inclusion_IDs7 <- res[[2]]
length(actual_exclusion_IDs7) # 91
length(updated_inclusion_IDs7) # 2449
#Exclude 8 - ESRD (ESKD) diagnosis before hospitalization
ExclusionID8 <- Final_ESRD_BEFORE_AT_df[which(Final_ESRD_BEFORE_AT_df[,"ESRD_BEFORE_AT"] == 1),"STUDY_PATIENT_ID"]
res <- exclude_pts_func(updated_inclusion_IDs7,ExclusionID8)
actual_exclusion_IDs8 <- res[[1]]
updated_inclusion_IDs8 <- res[[2]]
length(actual_exclusion_IDs8) # 216
length(updated_inclusion_IDs8) #2233
