#1. Corrected Time df
##########################################################################################
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df$onRRT_Flag <- 0
All_time_df$onRRT_Last48hBeforeDischarge <- 0
for (i in 1:nrow(All_time_df)){
if (i %% 1000 == 0) {print(i)}
curr_time_df <- All_time_df[i,]
#on RRT last 48 hours before HOSP discharge
curr_hosp_end <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_hd_end  <- ymd_hms(curr_time_df[,"Updated_HD_End"])
curr_crrt_end <- ymd_hms(curr_time_df[,"Updated_CRRT_End"])
if (is.na(curr_hd_end) == F | is.na(curr_crrt_end) == F){ #if one of them is not NA
All_time_df[i,"onRRT_Flag"] <- 1
curr_max_RRT_Endtime <- max(c(curr_hd_end,curr_crrt_end), na.rm = T)
if (curr_max_RRT_Endtime  >= curr_hosp_end - hours(48)){
All_time_df[i,"onRRT_Last48hBeforeDischarge"] <- 1
}
}
}
table(All_time_df$onRRT_Flag)
table(All_time_df$onRRT_Last48hBeforeDischarge)
#2. source 1: USRDS_ESRD
USRDS_ESRD_df <-read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
USRDS_ESRD_df <- USRDS_ESRD_df[-which(USRDS_ESRD_df$ESRD_DATE==""),] #remove blanks
#reformat
USRDS_ESRD_df$ESRD_DATE <- gsub("00:00:00","",USRDS_ESRD_df$ESRD_DATE)
USRDS_ESRD_df$ESRD_DATE <- gsub("0:00","",USRDS_ESRD_df$ESRD_DATE)
dash_idxes <- which(grepl("-",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[dash_idxes] <- as.character(ymd(USRDS_ESRD_df$ESRD_DATE[dash_idxes]))
slash_idxes <- which(grepl("/",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[slash_idxes] <- as.character(mdy(USRDS_ESRD_df$ESRD_DATE[slash_idxes]))
#3. source 2
ESRD_STATUS_df <-read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
ESRD_STATUS_df[which(ESRD_STATUS_df == "",arr.ind = T)] <- 0
ESRD_STATUS_df[which(ESRD_STATUS_df == "Y",arr.ind = T)] <- 1
############################################################################################################
#3. Process USRDS_ESRD.csv to get during and within 120 following HOSP discharge
############################################################################################################
ESRD_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_Indicator_df1) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Indicator_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
curr_hosp_end   <- ymd(strsplit(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"],split = " ")[[1]][1])
curr_hosp_end_plus120 <- curr_hosp_end + days(120)
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_Indicator_df1[i,"SOURCE"]<- "in_USRDS"
#During and after within 120 days
if (curr_esrd_date > curr_hosp_start & curr_esrd_date <= curr_hosp_end_plus120) {
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 1
}else{
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 0
}
}else{
ESRD_Indicator_df1[i,"SOURCE"]<- "notin_USRDS"
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"]<- 0
}
}
ESRD_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_Indicator_df1) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Indicator_df1[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
curr_hosp_end   <- ymd(strsplit(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"],split = " ")[[1]][1])
curr_hosp_end_plus120 <- curr_hosp_end + days(120)
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_Indicator_df1[i,"SOURCE"]<- "in_USRDS"
#During and after within 120 days
if (curr_esrd_date > curr_hosp_start & curr_esrd_date <= curr_hosp_end_plus120) {
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 1
}else{
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 0
}
}else{
ESRD_Indicator_df1[i,"SOURCE"]<- "notin_USRDS"
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"]<- 0
}
}
colnames(curr_ESRD_STATUS_df)
colnames(curr_ESRD_STATUS_df)
colnames(ESRD_STATUS_df)
ESRD_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_Indicator_df2) <- c("STUDY_PATIENT_ID","ESRD_DURING","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Indicator_df2[i,"STUDY_PATIENT_ID"] <- curr_id
#source 2: status table
curr_ESRD_STATUS_df <- ESRD_STATUS_df[which(ESRD_STATUS_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_ESRD_STATUS_df) != 0){ #if in ESRD_STATUS.csv
ESRD_Indicator_df2[i,"SOURCE"]<- "in_STATUS_TABLE"
if (curr_ESRD_STATUS_df[,"DURING_INDEXED_INDICATOR"] == 1) {
ESRD_Indicator_df2[i,"ESRD_DURING"] <- 1
}else{
ESRD_Indicator_df2[i,"ESRD_DURING"] <- 0
}
}else{
ESRD_Indicator_df2[i,"SOURCE"]<- "notin_STATUS_TABLE"
ESRD_Indicator_df2[i,"ESRD_DURING"]<- 0
}
}
table(ESRD_Indicator_df2$ESRD_DURING)
table(ESRD_Indicator_df1$ESRD_DURING)
ESRD_Indicator_df1
colnames(ESRD_Indicator_df1)
table(ESRD_Indicator_df1$ESRD_DURING)
table(ESRD_Indicator_df1$ESRD_DURING_AND_AFTER_HOSP_Within120D)
############################################################################################################
#5.Combine Two data source to manually check if STATUS agres USRDS
############################################################################################################
ESRD_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_Comb) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS",
"ESRD_During_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
colnames(ESRD_Indicator_df1)
colnames(ESRD_Indicator_df2)
ESRD_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_Comb) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS",
"ESRD_DURING_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_Indicator_df1[which(ESRD_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_Comb[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] <- curr_USRDs[,"ESRD_DURING_AND_AFTER_HOSP_Within120D"]
ESRD_Comb[i,"SOURCE_USRDS"] <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_Indicator_df2[which(ESRD_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_Comb[i,"ESRD_DURING_STATUS"] <- curr_status_tb[,"ESRD_DURING"]
ESRD_Comb[i,"SOURCE_STATUS"] <- curr_status_tb[,"SOURCE"]
}
USRD_DuringAfterWithin120D <- ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"]
USRD_DuringAfterWithin120D <- ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"]
STATUS_During <- ESRD_Comb[,"ESRD_DURING_STATUS"]
table(USRD_DuringAfterWithin120D,STATUS_During)
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- ESRD_Comb[i,"STUDY_PATIENT_ID"]
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- ESRD_Comb[i,"STUDY_PATIENT_ID"]
#on RRT last 48h flag
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_time_df
curr_onRRT48_flag  <- curr_time_df$onRRT_Last48hBeforeDischarge
curr_onRRT48_flag  <- curr_time_df[,"onRRT_Last48hBeforeDischarge"]
curr_onRRT48_flag
############################################################################################################
##6. Add onRRT_last48hours flag
############################################################################################################
ESRD_Comb$onRRT_Last48h <- NA
for (i in 1:nrow(ESRD_Comb)){
if (i %% 1000 == 0) {print(i)}
curr_id <- ESRD_Comb[i,"STUDY_PATIENT_ID"]
#on RRT last 48h flag
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_onRRT48_flag  <- curr_time_df[,"onRRT_Last48hBeforeDischarge"]
ESRD_Comb[i,"onRRT_Last48h"] <- curr_onRRT48_flag
}
table(ESRD_Comb$onRRT_Last48h)
#N of pts who has USRDS no, but on RRT last 48h
which(ESRD_Comb$ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS == 0)
#N of pts who has USRDS no, but on RRT last 48h
usrds_no_idxes <- which(ESRD_Comb$ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS == 0)
#N of pts who has USRDS no, but on RRT last 48h
usrds_no_df <- ESRD_Comb[which(ESRD_Comb$ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS == 0),]
usrds_no_df
table(usrds_no_df$onRRT_Last48h)
View(usrds_no_df)
#N of pts who has USRDS no, but on RRT last 48h
usrds_no_butonRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
table(usrds_no_butonRRT48_df$onRRT_Last48h)
View(usrds_no_butonRRT48_df)
View(All_time_df)
#N of pts who has USRDS yes, and on RRT last 48h
usrds_yes_butonRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds_yes_butonRRT48_df)
#N of pts who has USRDS no, status no,and on RRT last 48h
usrds_no_butonRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds_no_butonRRT48_df)
#N of pts who has USRDS no, status yes, and on RRT last 48h
usrds_no_butonRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
#N of pts who has USRDS no, status no,and on RRT last 48h
usrds0_status0_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
#N of pts who has USRDS no, status yes, and on RRT last 48h
usrds0_status1_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds0_status1_onRRT48_df)
#N of pts who has USRDS yes, status no, and on RRT last 48h
usrds1_status0_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds1_status0_onRRT48_df)
#N of pts who has USRDS yes, status yes, and on RRT last 48h
usrds1_status0_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
#N of pts who has USRDS yes, status yes, and on RRT last 48h
usrds1_status1_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds1_status1_onRRT48_df)
#Dertmine if ESRD before, during and after HOSPITAL
#1. Source 1: ESRD_USRDS.csv (Gold dataset, if not in USRD, use ESRD_STATUS.csv, then manual check
#2. Source 2: ESRD_STATUS.csv (Use DURING_INDEXED_INDICATOR for ESRD from ICU discharge to 120 days after,  Manual Check: During  == Y and after == N  (Supposed to be during = Y and after =Y))
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Analysis Id before exclusion of ESRD
##########################################################################################
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#1. Corrected Time df
##########################################################################################
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df$onRRT_Flag <- 0
All_time_df$onRRT_Last48hBeforeDischarge <- 0
for (i in 1:nrow(All_time_df)){
if (i %% 1000 == 0) {print(i)}
curr_time_df <- All_time_df[i,]
#on RRT last 48 hours before HOSP discharge
curr_hosp_end <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_hd_end  <- ymd_hms(curr_time_df[,"Updated_HD_End"])
curr_crrt_end <- ymd_hms(curr_time_df[,"Updated_CRRT_End"])
if (is.na(curr_hd_end) == F | is.na(curr_crrt_end) == F){ #if one of them is not NA
All_time_df[i,"onRRT_Flag"] <- 1
curr_max_RRT_Endtime <- max(c(curr_hd_end,curr_crrt_end), na.rm = T)
if (curr_max_RRT_Endtime  >= curr_hosp_end - hours(48)){
All_time_df[i,"onRRT_Last48hBeforeDischarge"] <- 1
}
}
}
table(All_time_df$onRRT_Flag)
table(All_time_df$onRRT_Last48hBeforeDischarge)
#2. source 1: USRDS_ESRD
USRDS_ESRD_df <-read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
USRDS_ESRD_df <- USRDS_ESRD_df[-which(USRDS_ESRD_df$ESRD_DATE==""),] #remove blanks
#reformat
USRDS_ESRD_df$ESRD_DATE <- gsub("00:00:00","",USRDS_ESRD_df$ESRD_DATE)
USRDS_ESRD_df$ESRD_DATE <- gsub("0:00","",USRDS_ESRD_df$ESRD_DATE)
dash_idxes <- which(grepl("-",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[dash_idxes] <- as.character(ymd(USRDS_ESRD_df$ESRD_DATE[dash_idxes]))
slash_idxes <- which(grepl("/",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[slash_idxes] <- as.character(mdy(USRDS_ESRD_df$ESRD_DATE[slash_idxes]))
#3. source 2
ESRD_STATUS_df <-read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
ESRD_STATUS_df[which(ESRD_STATUS_df == "",arr.ind = T)] <- 0
ESRD_STATUS_df[which(ESRD_STATUS_df == "Y",arr.ind = T)] <- 1
#'@TODO
############################################################################################################
#3. Process USRDS_ESRD.csv to get during and within 120 following HOSP discharge
############################################################################################################
ESRD_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_Indicator_df1) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Indicator_df1[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
curr_hosp_end   <- ymd(strsplit(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"],split = " ")[[1]][1])
curr_hosp_end_plus120 <- curr_hosp_end + days(120)
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_Indicator_df1[i,"SOURCE"]<- "in_USRDS"
#During and after within 120 days
if (curr_esrd_date > curr_hosp_start & curr_esrd_date <= curr_hosp_end_plus120) {
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 1
}else{
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"] <- 0
}
}else{
ESRD_Indicator_df1[i,"SOURCE"]<- "notin_USRDS"
ESRD_Indicator_df1[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D"]<- 0
}
}
table(ESRD_Indicator_df1$ESRD_DURING_AND_AFTER_HOSP_Within120D)
############################################################################################################
#4. Process ESRD_STATUS.csv to get during
############################################################################################################
ESRD_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_Indicator_df2) <- c("STUDY_PATIENT_ID","ESRD_DURING","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Indicator_df2[i,"STUDY_PATIENT_ID"] <- curr_id
#source 2: status table
curr_ESRD_STATUS_df <- ESRD_STATUS_df[which(ESRD_STATUS_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_ESRD_STATUS_df) != 0){ #if in ESRD_STATUS.csv
ESRD_Indicator_df2[i,"SOURCE"]<- "in_STATUS_TABLE"
if (curr_ESRD_STATUS_df[,"DURING_INDEXED_INDICATOR"] == 1) {
ESRD_Indicator_df2[i,"ESRD_DURING"] <- 1
}else{
ESRD_Indicator_df2[i,"ESRD_DURING"] <- 0
}
}else{
ESRD_Indicator_df2[i,"SOURCE"]<- "notin_STATUS_TABLE"
ESRD_Indicator_df2[i,"ESRD_DURING"]<- 0
}
}
table(ESRD_Indicator_df2$ESRD_DURING)
############################################################################################################
#5.Combine Two data source to manually check if STATUS agres USRDS
############################################################################################################
ESRD_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_Comb) <- c("STUDY_PATIENT_ID","ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS",
"ESRD_DURING_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_Indicator_df1[which(ESRD_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_Comb[i,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] <- curr_USRDs[,"ESRD_DURING_AND_AFTER_HOSP_Within120D"]
ESRD_Comb[i,"SOURCE_USRDS"] <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_Indicator_df2[which(ESRD_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_Comb[i,"ESRD_DURING_STATUS"] <- curr_status_tb[,"ESRD_DURING"]
ESRD_Comb[i,"SOURCE_STATUS"] <- curr_status_tb[,"SOURCE"]
}
USRD_DuringAfterWithin120D <- ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"]
STATUS_During <- ESRD_Comb[,"ESRD_DURING_STATUS"]
table(USRD_DuringAfterWithin120D,STATUS_During)
############################################################################################################
##6. Add onRRT_last48hours flag
############################################################################################################
ESRD_Comb$onRRT_Last48h <- NA
for (i in 1:nrow(ESRD_Comb)){
if (i %% 1000 == 0) {print(i)}
curr_id <- ESRD_Comb[i,"STUDY_PATIENT_ID"]
#on RRT last 48h flag
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_onRRT48_flag  <- curr_time_df[,"onRRT_Last48hBeforeDischarge"]
ESRD_Comb[i,"onRRT_Last48h"] <- curr_onRRT48_flag
}
#N of pts who has USRDS no, status no,and on RRT last 48h
usrds0_status0_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds0_status0_onRRT48_df)
#N of pts who has USRDS no, status yes, and on RRT last 48h
usrds0_status1_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 0 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds0_status1_onRRT48_df)
#N of pts who has USRDS yes, status no, and on RRT last 48h
usrds1_status0_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 0 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds1_status0_onRRT48_df)
#N of pts who has USRDS yes, status yes, and on RRT last 48h
usrds1_status1_onRRT48_df <- ESRD_Comb[which(ESRD_Comb[,"ESRD_DURING_AND_AFTER_HOSP_Within120D_USRDS"] == 1 &
ESRD_Comb[,"ESRD_DURING_STATUS"]== 1 &
ESRD_Comb[,"onRRT_Last48h"]==1),]
nrow(usrds1_status1_onRRT48_df)
View(usrds1_status1_onRRT48_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. Kidney Transpant df
KIDT_df <- read.csv(paste0(raw_dir,"SURGERY_INDX.csv"),stringsAsFactors = F)
KIDT_df <- KIDT_df[which(grepl("kid",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[which(grepl("trans",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[!duplicated(KIDT_df$STUDY_PATIENT_ID),] #some pts get kt and then rejection two labels used for refering kidney transplant
View(KIDT_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. Kidney Transpant df
KIDT_df <- read.csv(paste0(raw_dir,"SURGERY_INDX.csv"),stringsAsFactors = F)
KIDT_df <- KIDT_df[which(grepl("kid",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[which(grepl("trans",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[!duplicated(KIDT_df$STUDY_PATIENT_ID),] #some pts get kt and then rejection two labels used for refering kidney transplant
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. Kidney Transpant df
KIDT_df <- read.csv(paste0(raw_dir,"SURGERY_INDX.csv"),stringsAsFactors = F)
KIDT_df <- KIDT_df[which(grepl("kid",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[which(grepl("trans",KIDT_df[,"SURGERY_DESCRIPTION"],ignore.case = T) == T),]
KIDT_df <- KIDT_df[!duplicated(KIDT_df$STUDY_PATIENT_ID),] #some pts get kt and then rejection two labels used for refering kidney transplant
#3. DIAGNOSIS df
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
View(raw_DIAGNOSIS_df)
table(raw_DIAGNOSIS_df$DIAGNOSIS_TYPE)
colnames(raw_DIAGNOSIS_df)
search_codes<- c("Z94.0","V42.0" , "996.81", "Z48.22", "T86.12", "T86.11", "T86.10")
KIDT_df2 <- raw_DIAGNOSIS_df[which(raw_DIAGNOSIS_df[,"ICD_CODE"] %in% search_codes),]
table(KIDT_df2$DIAGNOSIS_TYPE)
table(KIDT_df2$ICD_CODE)
table(raw_DIAGNOSIS_df$DIAGNOSIS_TYPE)
table(raw_DIAGNOSIS_df$DIAGNOSIS_TYPE)
unique(raw_DIAGNOSIS_df$DIAGNOSIS_TYPE)
ymd_hms("2011-06-13 16:56:00")
ymd_hms("2011-06-13 16:56:00") + days(3)
library(barplot3d)
library(rgl)
install.packages("barplot3d")
barplot3d(rows=1,cols=5,z=1:5,theta=10,phi=10)
library(barplot3d)
barplot3d(rows=1,cols=5,z=1:5,theta=10,phi=10)
inputdata=round(rnorm(15,10,3))
barplot3d(rows=3,cols=5,z=inputdata,scalexy=5,alpha=0.4,theta=30,phi=50,
topcolors=rainbow(15),xlabels = 1:5,ylabels=LETTERS[1:3],
xsub="Numbers",ysub="Letters",zsub="Count")
p <- barplot3d(rows=3,cols=5,z=inputdata,scalexy=5,alpha=0.4,theta=30,phi=50,
topcolors=rainbow(15),xlabels = 1:5,ylabels=LETTERS[1:3],
xsub="Numbers",ysub="Letters",zsub="Count")
p
death = read_csv("https://www.tylermw.com/data/death.csv", skip = 1)
death = read.csv("https://www.tylermw.com/data/death.csv", skip = 1)
meltdeath = reshape2::melt(death, id.vars = "Year")
meltdeath$age = as.numeric(meltdeath$variable)
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
scale_fill_viridis("Death\nProbability\nPer Year",trans = "log10",breaks=c(1,0.1,0.01,0.001,0.0001), labels = c("1","1/10","1/100","1/1000","1/10000")) +
ggtitle("Death Probability vs Age and Year for the USA") +
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
scale_fill_viridis("Death\nProbability\nPer Year",trans = "log10",breaks=c(1,0.1,0.01,0.001,0.0001), labels = c("1","1/10","1/100","1/1000","1/10000")) +
ggtitle("Death Probability vs Age and Year for the USA") +
deathgg
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
ggtitle("Death Probability vs Age and Year for the USA") +
deathgg
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
ggtitle("Death Probability vs Age and Year for the USA") +
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
ggtitle("Death Probability vs Age and Year for the USA") +
deathgg
deathgg = ggplot(meltdeath) +
geom_raster(aes(x=Year,y=age,fill=value)) +
scale_x_continuous("Year",expand=c(0,0),breaks=seq(1900,2010,10)) +
scale_y_continuous("Age",expand=c(0,0),breaks=seq(0,100,10),limits=c(0,100)) +
ggtitle("Death Probability vs Age and Year for the USA")
deathgg
years(1)
days(years(1))
years(1)
ymd(years(1))
years(1) == days(365)
years(1) == days(365.5)
years(1) == days(365)
years(1)  -days(365)
