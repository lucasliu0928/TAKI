data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df[,grp_column] <- as.factor(data_df[,grp_column])
table(data_df[,grp_column])
################################################################################################
##### Impute with median for matching features
################################################################################################
for (i in 1:length(feature_column)){
curr_f <- feature_column[i]
curr_col <- data_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
if (length(na_idxes) > 0){
curr_col[na_idxes] <- median(curr_col,na.rm = T)
}
data_df[,curr_f] <- curr_col
}
################################################################################################
##### Matching
################################################################################################
match_formula <- formula(paste0(grp_column,"~",paste(feature_column,collapse = " + ")))
set.seed(100)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df, distance = "logit",ratio = 1,caliper = NULL)
data_df$PHOX_1.PRIS_2.both_3
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
optimal_caliper
sd(matched_data_c[,"prop.score"])
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = comb_data, distance = "logit",ratio = 1,caliper = optimal_caliper)
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df, distance = "logit",ratio = 1,caliper = optimal_caliper)
#4. Matched data
matched_data = match.data(m.out,distance = "prop.score")
View(matched_data_c)
View(matched_data)
View(m.out_c)
table(matched_data$weights)
table(matched_data$subclass)
table(matched_data$PHOX_1.PRIS_2.both_3)
optimal_caliper
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df, distance = "logit",ratio = 2,caliper = NULL)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df, distance = "logit",ratio = 1,caliper = NULL)
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
View(matched_data_c)
max(matched_data$prop.score)
which(matched_data$subclass==1)
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
library(MatchIt)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
################################################################################################
#### Select features for matching
################################################################################################
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
View(data_df_tomatch)
data_df_tomatch[,grp_column] <- as.factor(data_df_tomatch[,grp_column]) #convert grp column to factor
table(data_df_tomatch[,grp_column])
View(data_df_tomatch)
i<-1
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
to_impute_df <- data_df_tomatch
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
curr_col
na_idxes <- which(is.na(curr_col) == T)
na_idxes
i<-2
curr_f <- feature_column[i]
curr_f
curr_col <- to_impute_df[,curr_f]
to_impute_df$CHARLSON_INDEX
median(to_impute_df$CHARLSON_INDEX,na.rm = T)
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
curr_col
curr_col[na_idxes] <- median(curr_col,na.rm = T)
curr_col
to_impute_df[,curr_f] <- curr_col
median(to_impute_df$CHARLSON_INDEX)
################################################################################################
##### Impute with median for matching features
################################################################################################
impute_func <- function(to_impute_df,feature_column){
for (i in 1:length(feature_column)){
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
if (length(na_idxes) > 0){
curr_col[na_idxes] <- median(curr_col,na.rm = T)
}
to_impute_df[,curr_f] <- curr_col
}
return(to_impute_df)
}
library(MatchIt)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
################################################################################################
#### Select features for matching
################################################################################################
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
data_df_tomatch[,grp_column] <- as.factor(data_df_tomatch[,grp_column]) #convert grp column to factor
table(data_df_tomatch[,grp_column])
################################################################################################
##### Impute with median for matching features
################################################################################################
impute_func <- function(to_impute_df,feature_column){
for (i in 1:length(feature_column)){
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
if (length(na_idxes) > 0){
curr_col[na_idxes] <- median(curr_col,na.rm = T)
}
to_impute_df[,curr_f] <- curr_col
}
return(to_impute_df)
}
data_df_tomatch_imputed <- impute_func(data_df_tomatch,feature_column)
View(data_df)
View(data_df_tomatch_imputed)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = NULL)
################################################################################################
##### Matching
################################################################################################
match_formula <- formula(paste0(grp_column,"~",paste(feature_column,collapse = " + ")))
match_formula
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = NULL)
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
optimal_caliper
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df, distance = "logit",ratio = 1,caliper = optimal_caliper)
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = optimal_caliper)
#4. Matched data
final_matched_data = match.data(m.out,distance = "prop.score")
table(final_matched_data$PHOX_1.PRIS_2.both_3)
View(final_matched_data)
View(data_df)
#manually create an ID to keep track
rownames(data_df)
#manually create an ID to keep track
rownames(data_df) <- paste0(rownames(data_df))
library(MatchIt)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
#manually create an ID to keep track
rownames(data_df) <- paste0(rownames(data_df))
################################################################################################
#### Select features for matching
################################################################################################
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
data_df_tomatch[,grp_column] <- as.factor(data_df_tomatch[,grp_column]) #convert grp column to factor
table(data_df_tomatch[,grp_column])
################################################################################################
##### Matching
################################################################################################
match_formula <- formula(paste0(grp_column,"~",paste(feature_column,collapse = " + ")))
set.seed(100)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = NULL)
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = optimal_caliper)
#4. Matched data
final_matched_data = match.data(m.out,distance = "prop.score")
table(final_matched_data$PHOX_1.PRIS_2.both_3)
View(final_matched_data)
View(data_df)
library(MatchIt)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
#manually create an ID to keep track
rownames(data_df) <- paste0("X",rownames(data_df))
################################################################################################
#### Select features for matching
################################################################################################
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
data_df_tomatch[,grp_column] <- as.factor(data_df_tomatch[,grp_column]) #convert grp column to factor
table(data_df_tomatch[,grp_column])
################################################################################################
##### Impute with median for matching features
################################################################################################
impute_func <- function(to_impute_df,feature_column){
for (i in 1:length(feature_column)){
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
if (length(na_idxes) > 0){
curr_col[na_idxes] <- median(curr_col,na.rm = T)
}
to_impute_df[,curr_f] <- curr_col
}
return(to_impute_df)
}
data_df_tomatch_imputed <- impute_func(data_df_tomatch,feature_column)
################################################################################################
##### Matching
################################################################################################
match_formula <- formula(paste0(grp_column,"~",paste(feature_column,collapse = " + ")))
set.seed(100)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = NULL)
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = optimal_caliper)
#4. Matched data
final_matched_data = match.data(m.out,distance = "prop.score")
table(final_matched_data$PHOX_1.PRIS_2.both_3)
################################################################################################
##Get the original feature(before imputation) of matched data
################################################################################################
filtered_data <- which(rownames(data_df) %in% rownames(final_matched_data))
################################################################################################
##Get the original feature(before imputation) of matched data
################################################################################################
filtered_data <- data_df[which(rownames(data_df) %in% rownames(final_matched_data)),]
View(filtered_data)
final_matched_data$subclass
#add matched feature to filtered data
match(rownames(filtered_data), rownames(final_matched_data))
match(c("C","B","A"),c("A","B","C"))
#add matched feature to filtered data
match(rownames(filtered_data), rownames(final_matched_data))
#add matched feature to filtered data
filtered_data <- filtered_data[,match(rownames(filtered_data), rownames(final_matched_data))]
#add matched feature to filtered data
filtered_data <- filtered_data[match(rownames(filtered_data), rownames(final_matched_data)),]
identical(rownames(filtered_data),rownames(final_matched_data))
View(filtered_data)
#add matched feature to filtered data
filtered_data$prop.score <- final_matched_data$prop.score
filtered_data$weights <- final_matched_data$weights
filtered_data$subclass <- final_matched_data$subclass
library(MatchIt)
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/Phosphate Project/Data/"
################################################################################################
#### Load data
################################################################################################
data_df <- read.csv(paste0(data_dir,"CRRT_Paper-FilteredDataForPublication_0512.csv"),stringsAsFactors = F)
#manually create an ID to keep track
rownames(data_df) <- paste0("X",rownames(data_df))
################################################################################################
#### Select features for matching
################################################################################################
feature_column <- c("AGE",
"CHARLSON_INDEX",
"CRRT.ml.kg.hr",
"GENDER.M_1.F_0",
"NET_CRRT_PRIOR",
"SOFA_SCORE",
"Race.White",
"BMI",
"MICU",
"CRRT_TOTAL_DURATION",
"CKD")
grp_column <- "PHOX_1.PRIS_2.both_3"
data_df_tomatch <- data_df[,c(feature_column,grp_column)]
data_df_tomatch[,grp_column] <- as.factor(data_df_tomatch[,grp_column]) #convert grp column to factor
table(data_df_tomatch[,grp_column])
################################################################################################
##### Impute with median for matching features
################################################################################################
impute_func <- function(to_impute_df,feature_column){
for (i in 1:length(feature_column)){
curr_f <- feature_column[i]
curr_col <- to_impute_df[,curr_f]
na_idxes <- which(is.na(curr_col) == T)
if (length(na_idxes) > 0){
curr_col[na_idxes] <- median(curr_col,na.rm = T)
}
to_impute_df[,curr_f] <- curr_col
}
return(to_impute_df)
}
data_df_tomatch_imputed <- impute_func(data_df_tomatch,feature_column)
################################################################################################
##### Matching
################################################################################################
match_formula <- formula(paste0(grp_column,"~",paste(feature_column,collapse = " + ")))
set.seed(100)
#1.First get the std of logit of pscores when caliper == none
m.out_c = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = NULL)
#2.Optimal caliper = 0.3 of sd (ps scores)
matched_data_c = match.data(m.out_c,distance = "prop.score")
optimal_caliper <- round(0.3*sd(matched_data_c[,"prop.score"]),2)
#3.Final matching (#caliper= 0.08, ratio 1:5)
m.out = matchit(match_formula, data = data_df_tomatch_imputed, distance = "logit",ratio = 1,caliper = optimal_caliper)
#4. Matched data
final_matched_data = match.data(m.out,distance = "prop.score")
table(final_matched_data$PHOX_1.PRIS_2.both_3)
################################################################################################
##Get the original feature(before imputation) of matched data
################################################################################################
original_feature_data <- data_df[which(rownames(data_df) %in% rownames(final_matched_data)),]
#reorder filtered data to match IDs with final matched data
original_feature_data <- original_feature_data[match(rownames(original_feature_data), rownames(final_matched_data)),]
#add matched feature to filtered data
original_feature_data$prop.score <- final_matched_data$prop.score
original_feature_data$weights <- final_matched_data$weights
original_feature_data$subclass <- final_matched_data$subclass
original_feature_data$CHARLSON_INDEX
median(original_feature_data$CHARLSON_INDEX,na.rm = T)
View(original_feature_data)
check <- final_matched_data[,which(final_matched_data$subclass==1)]
check <- final_matched_data[which(final_matched_data$subclass==1),]
View(check)
final_matched_data$GENDER.M_1.F_0
check <- final_matched_data[which(final_matched_data$subclass==2),]
hist(final_matched_data$prop.score)
library(stringr)
library(openxlsx)
norm_0to100_func <- function(xgb_importance_matrix){
#normlize for each testfold with each sample
unique_foldsamples <- unique(xgb_importance_matrix$Sample_Index)
for (i in 1:length(unique_foldsamples)){
curr_foldsp <- unique_foldsamples[i]
curr_foldsp_idxes <- which(xgb_importance_matrix[,"Sample_Index"] == curr_foldsp )
col_value <- xgb_importance_matrix[curr_foldsp_idxes,"Gain"]
minv <- min(col_value,na.rm = T)
maxv <- max(col_value,na.rm = T)
normed_col_value <- (col_value - minv) / (maxv - minv) * 100
xgb_importance_matrix[curr_foldsp_idxes,"Gain"] <- normed_col_value
}
updated_xgb_importance_matrix <- xgb_importance_matrix
return(updated_xgb_importance_matrix)
}
plot_func <- function(importance_matrix){
plot <-ggplot(importance_matrix,
ggplot2::aes(x = factor(Feature, levels = rev(Feature)), y = Importance, width = 0.5),
environment = environment()) +
geom_bar(aes(fill = "Darkred"), stat = "identity", position = "identity") +
coord_flip() +
xlab("Features") +
ggtitle("Feature importance") +
theme(plot.title = element_text(lineheight = .9, face = "bold"),
panel.grid.major.y = element_blank()) +
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position = "none")
return(plot)
}
#Plot importance matrix
library(ggplot2)
importance_matrix_mortality <- read.xlsx(paste0(importance_dir1,"/AVG_Importance_mortality_Mortality_selected_features_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_mortality)
importance_matrix_MAKE_PH <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option1_withPH.csv.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_PH)
importance_matrix_MAKE_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option2_withMechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_MechHemoSup)
importance_matrix_MAKE_PH_And_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option3_withPH_And_MechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_PH_And_MechHemoSup)
####MAKE
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/"
importance_dir <- paste0(data_dir,"Prediction_results0512/make_importance")
all_importance_files <- list.files(importance_dir,full.names = T)
#do not compute XGBTOP, cuz it only has top features, and it is the same as XGB
#all_importance_files <- all_importance_files[-which(grepl("XGBTOP",all_importance_files))]
for (i in 1:length(all_importance_files)){
curr_file <- all_importance_files[i]
curr_import_matrix <- read.csv(curr_file,stringsAsFactors = F,row.names = 1)
model_name <- str_match(curr_file, "/MAKE_\\s*(.*?)\\s*_importance_")[,2]
prediction_task <- "MAKE"
#NOTE: for XGB importance, some of feature were droped when compute feature importance, we just manully add 0 to then
if (grepl("wTrajectory",model_name) == T){
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Data/uky/"
model_data <-read.csv(paste0(data_dir, "clinical_model_make_wTrajectory_norm.csv"),stringsAsFactors = F)
unique_features <- colnames(model_data)[-which(colnames(model_data) == "STUDY_PATIENT_ID")]
}else{
unique_features <- unique(curr_import_matrix[,"Feature"])
length(unique_features)
}
score_df <- as.data.frame(matrix(NA, nrow = length(unique_features),ncol = 5))
colnames(score_df) <- c("Feature","Importance","Method","Prediction","Model")
score_df$Method <- str_match(curr_file, "matrix_\\s*(.*?)\\s*.csv")[,2]
score_df$Prediction <- prediction_task
score_df$Model <- model_name
for (f in 1:length(unique_features)){ #for each feature, avg all scores over all folds and sample
curr_feature <- unique_features[f]
if (grepl("xgb",curr_file,ignore.case = T) == T) {
score_col <-"Gain"
curr_import_matrix <- norm_0to100_func(curr_import_matrix)
}else if (grepl("Logreg",curr_file,ignore.case = T) == T){
score_col <-"Beta_Coef"
}else{
score_col <-"Importance_Scaled0_100"
}
if (curr_feature %in% curr_import_matrix[,"Feature"]){
curr_score <- curr_import_matrix[which(curr_import_matrix[,"Feature"] == curr_feature),score_col]
avg_score <- mean(curr_score,na.rm = T)
}else{#  #NOTE: for XGB importance, some of feature were droped when compute feature importance, we just manully add 0 to then
avg_score <- 0
}
score_df$Feature[f] <- curr_feature
score_df$Importance[f] <- avg_score
}
score_df$Importance <- round(score_df$Importance,2)
sorted_score_df <- score_df[order(abs(score_df$Importance),decreasing = T),]
outname <- paste0(importance_dir, "/",'AVG_Importance_',unique(sorted_score_df$Prediction),"_",unique(sorted_score_df$Model),"_",unique(sorted_score_df$Method),".xlsx")
write.xlsx(sorted_score_df,outname)
}
#Plot importance matrix
library(ggplot2)
importance_matrix_mortality <- read.xlsx(paste0(importance_dir1,"/AVG_Importance_mortality_Mortality_selected_features_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_mortality)
importance_matrix_MAKE_PH <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option1_withPH.csv.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_PH)
importance_matrix_MAKE_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option2_withMechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_MechHemoSup)
importance_matrix_MAKE_PH_And_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option3_withPH_And_MechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_PH_And_MechHemoSup)
plot_func(importance_matrix_MAKE_PH)
importance_matrix_MAKE_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option2_withMechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_MechHemoSup)
importance_matrix_MAKE_PH_And_MechHemoSup <- read.xlsx(paste0(importance_dir,"/AVG_Importance_MAKE_MAKE_selected_features_norm_option3_withPH_And_MechHemoSup.csv_SVM.xlsx"),sheet = 1)
plot_func(importance_matrix_MAKE_PH_And_MechHemoSup)
plot_func(importance_matrix_MAKE_MechHemoSup)
plot_func(importance_matrix_MAKE_PH_And_MechHemoSup)
plot_func(importance_matrix_MAKE_MechHemoSup)
plot_func(importance_matrix_MAKE_PH)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
