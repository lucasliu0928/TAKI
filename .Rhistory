idx_ICU_equal_time <- which(raw_ADMISSION_INDX_df[,"ICU_ADMIT_DATE"] == raw_ADMISSION_INDX_df[,"ICU_DISCHARGE_DATE"])
if (length(idx_ICU_equal_time) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_ICU_equal_time,]
}
#7. remove ICU start > ICU end
idx_icu_endBeforeStart <- which(raw_ADMISSION_INDX_df[,"ICU_ADMIT_DATE"] > raw_ADMISSION_INDX_df[,"ICU_DISCHARGE_DATE"])
if (length(idx_icu_endBeforeStart) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_icu_endBeforeStart,]
}
#8. remove NA HOSP Discharge
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-which(is.na(raw_ADMISSION_INDX_df[,"HOSP_DISCHARGE_DATE"])== T),]
raw_ADMISSION_INDX_df$DISCHARGE_DISPOSITION
##########################################################################################
# Add decease date IN TimeInfo_df
##########################################################################################
#Mortality time df
outcome_df <-read.csv(paste0(raw_dir,"OUTCOMES_COMBINED.csv"),stringsAsFactors = F)
View(outcome_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load ADMISSION_INDX
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
#2.Refomart time
reformat_cols  <- c("HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","ICU_ADMIT_DATE","ICU_DISCHARGE_DATE")
for (j in 1:length(reformat_cols)){
curr_col_name <- reformat_cols[j]
raw_ADMISSION_INDX_df[,curr_col_name] <- mdy_hm(raw_ADMISSION_INDX_df[,curr_col_name])
}
#3.remove duplicated on the four time column
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[!duplicated(raw_ADMISSION_INDX_df[,reformat_cols]),]
#4.remove hosp start = hosp end
idx_hosp_equal_time <- which(raw_ADMISSION_INDX_df[,"HOSP_ADMIT_DATE"] == raw_ADMISSION_INDX_df[,"HOSP_DISCHARGE_DATE"])
if (length(idx_hosp_equal_time) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_hosp_equal_time,]
}
#5. remove hosp start > hosp end
idx_hosp_endBeforeStart <- which(raw_ADMISSION_INDX_df[,"HOSP_ADMIT_DATE"] > raw_ADMISSION_INDX_df[,"HOSP_DISCHARGE_DATE"])
if (length(idx_hosp_endBeforeStart) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_hosp_endBeforeStart,]
}
#6.remove ICU start = ICU end
idx_ICU_equal_time <- which(raw_ADMISSION_INDX_df[,"ICU_ADMIT_DATE"] == raw_ADMISSION_INDX_df[,"ICU_DISCHARGE_DATE"])
if (length(idx_ICU_equal_time) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_ICU_equal_time,]
}
#7. remove ICU start > ICU end
idx_icu_endBeforeStart <- which(raw_ADMISSION_INDX_df[,"ICU_ADMIT_DATE"] > raw_ADMISSION_INDX_df[,"ICU_DISCHARGE_DATE"])
if (length(idx_icu_endBeforeStart) > 0 ){
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-idx_icu_endBeforeStart,]
}
#8. remove NA HOSP Discharge
raw_ADMISSION_INDX_df <- raw_ADMISSION_INDX_df[-which(is.na(raw_ADMISSION_INDX_df[,"HOSP_DISCHARGE_DATE"])== T),]
##########################################################################################
#### Add DISCHARGE_DISPOSITION from admission indx
##########################################################################################
updated_TimeInfo_df <- read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
updated_TimeInfo_df$DISCHARGE_DISPOSITION_inADMISSION_INDX <- NA
View(updated_TimeInfo_df)
#'@todo
##########################################################################################
#### Add DISCHARGE_DISPOSITION from ADMISSION_INDX
##########################################################################################
updated_TimeInfo_df <- read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
updated_TimeInfo_df$DISCHARGE_DISPOSITION_inADMISSION_INDX <- NA
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- updated_TimeInfo_df[i,"STUDY_PATIENT_ID"]
curr_id
which(raw_ADMISSION_INDX_df$STUDY_PATIENT_ID == curr_id)
View(updated_TimeInfo_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
All_time_df$DISCHARGE_DISPOSITION
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition
##########################################################################################
check_idxes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T) == T)
check_df <- All_time_df[check_idxes,]
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
All_time_df$DISCHARGE_DISPOSITION
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition
#   If expired or hospice, should have a deceased date = HOSP_DISCHARGE_DATE +- 24h
##########################################################################################
expired_orhospice_idxes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T) == T)
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition
#   If expired or hospice, should have a deceased date = HOSP_DISCHARGE_DATE +- 24h
##########################################################################################
expired_orhospice_cond <- grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)
expired_orhospice_cond
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a deceased date = HOSP_DISCHARGE_DATE +- 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
All_time_df$DISCHARGE_DISPOSITION
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a deceased date = HOSP_DISCHARGE_DATE +- 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,]
View(expired_orhospice_df)
#Get
check_idxes <- which(mdy(All_time_df$DECEASED_DATE) >  ymd_hms(All_time_df$Updated_HOSP_DISCHARGE_DATE))
check_idxes
#Get
check_idxes <- which(mdy(expired_orhospice_df$DECEASED_DATE) >  ymd_hms(expired_orhospice_df$Updated_HOSP_DISCHARGE_DATE))
check_idxes
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE")]
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) <=  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"] - ))
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) <=  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]))
check_idxes <- which(mdy(All_time_df[,"DECEASED_DATE"]) <=  ymd_hms(All_time_df[,"Updated_HOSP_DISCHARGE_DATE"]))
check_df <- All_time_df[check_idxes,]
View(check_df)
check_df <- All_time_df[check_idxes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
check_idxes <- which(mdy(All_time_df[,"DECEASED_DATE"]) >  ymd_hms(All_time_df[,"Updated_HOSP_DISCHARGE_DATE"]))
check_idxes
colnames(All_time_df)
check_idxes <- which(mdy(All_time_df[,"DECEASED_DATE"]) <  ymd_hms(All_time_df[,"Updated_HOSP_ADMIT_DATE"]))
check_idxes
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#If deceased date <= HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) <=  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"] + hours(24)))
#If deceased date <= HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) <=  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
#If deceased date <= HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
##########################################################################################
# Add decease date IN TimeInfo_df
##########################################################################################
#Mortality time df
outcome_df <-read.csv(paste0(raw_dir,"OUTCOMES_COMBINED.csv"),stringsAsFactors = F)
View(outcome_df)
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load ADMISSION_INDX
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
View(raw_ADMISSION_INDX_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(disposition_df) <- c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 4))
colnames(disposition_df) <- c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")
i <- 1
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
curr_id
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] %in% analysis_ID),c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
View(disposition_df)
analysis_ID
length(analysis_ID)
expired_orhospice_indexes <- which(grepl("Expired|Hospice",disposition_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- disposition_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] %in% analysis_ID),c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] %in% analysis_ID),c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
expired_orhospice_indexes <- which(grepl("Expired|Hospice",disposition_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- disposition_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
expired_orhospice_indexes <- which(grepl("Expired",disposition_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- disposition_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(expired_orhospice_df)
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
getwd()
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(48))
check_df <- expired_orhospice_df[check_idxes,]
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv")
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#'@TODO
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
#'@TODO:
#'#1. Add hosp_end+ 24h
#'#1.if has disease date, use it to determine if patient died in hospital or not,
#'#2.if no date, check if expried/hopice, if so, treat it as died in hosp
##########################################################################################
#3. Death or alive in Hospital
#hosp_start  <=  decease_date <= hosp_end
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#'@TODO
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
##########################################################################################
#3. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#3. Death or alive in the first 3 days of ICU D0,D1,D3, even if patient died outside ICU (e.g, D3 not in ICU)
##########################################################################################
Death_ICU_D0toD3_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_ICU_D0toD3_df) <- c("STUDY_PATIENT_ID","Death_ICU_D0toD3")
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_ICU_D0toD3_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
#Get ICU day 3 end time no matter it is in ICU or not
curr_d3_end_time <- ymd_hms(curr_time_df[,"D3_End"])
if (is.na(curr_decease_date) == T){ #no death date
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 0
}else {
if (curr_decease_date >= curr_icu_start  & curr_decease_date <= curr_d3_end_time ){
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 1
}else{
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 0
}
}
}
table(Death_ICU_D0toD3_df$Death_ICU_D0toD3) #34973  1044
#'@TODO:
#'#1. Add hosp_end+ 24h
#'#1.if has disease date, use it to determine if patient died in hospital or not,
#'#2.if no date, check if expried/hopice, if so, treat it as died in hosp
##########################################################################################
#3. Death or alive in Hospital
#hosp_start  <=  decease_date <= hosp_end
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
#'@TODO:
##########################################################################################
#3. Death or alive in Hospital
#1.if has disease date, hosp_start  <=  decease_date <= hosp_end + 24 hours
#2.if NO disease date,  if disposition contains expried/hopice,treat it as died in hosp
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
i <- 1
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_inHOSP[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
curr_disposition <- curr_time_df[,"DISCHARGE_DISPOSITION"]
curr_disposition
is.na(curr_decease_date) == T
#check if disposition contains hospice or expired
grepl("Expired|Hospice",curr_disposition,ignore.case = T)
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_inHOSP[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
curr_disposition <- curr_time_df[,"DISCHARGE_DISPOSITION"]
if (is.na(curr_decease_date) == T){ #no death date
#check if disposition contains hospice or expired
if (grepl("Expired|Hospice",curr_disposition,ignore.case = T)==T){
Death_inHOSP[i,"Death_inHOSP"] <- 1
}else{
Death_inHOSP[i,"Death_inHOSP"] <- 0
}
}else {
if (curr_decease_date >= curr_hosp_start  & curr_decease_date <= curr_hosp_end + hours(24)){
Death_inHOSP[i,"Death_inHOSP"] <- 1
}else{
Death_inHOSP[i,"Death_inHOSP"] <- 0
}
}
}
table(Death_inHOSP$Death_inHOSP) #33685  2332
View(Death_inHOSP)
time_check_df <- which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID)
time_check_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),]
which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T)
length(which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T))
length(which(is.na(time_check_df$DECEASED_DATE)== T)
)
length(which(time_check_df$DECEASED_DATE >= curr_hosp_start  & time_check_df$DECEASED_DATE  <= curr_hosp_end + hours(24)))
time_check_df$DECEASED_DATE
length(which(mdy(time_check_df$DECEASED_DATE)  <= ymd_hms(time_check_df$Updated_HOSP_DISCHARGE_DATE) + hours(24)))
length(which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T))
length(which(mdy(time_check_df$DECEASED_DATE)  <= ymd_hms(time_check_df$Updated_HOSP_DISCHARGE_DATE) + hours(24)))
2445+ 2499
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
check_df <-which(Death_inHOSP$STUDY_PATIENT_ID %in% analysis_ID)
check_df <- Death_inHOSP[which(Death_inHOSP$STUDY_PATIENT_ID %in% analysis_ID),]
table(check_df$Death_inHOSP) #33685  2332 #after udpate 31073 vs 4944
