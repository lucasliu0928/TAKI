geom_vline(aes(xintercept= 2.4), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 2.4), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 3), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 2.4), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2) +
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
n
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2) +
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[10,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
library(ggplot2)
get_sample_func <- function(sample_size){
sample_IDs  <- sample(data_pop[,"Student_ID"], replace=FALSE, size=sample_size)
data_sample <- data_pop[which(data_pop[,"Student_ID"] %in% sample_IDs),]
return(data_sample)
}
compute_average <- function(input_data,variable_col,cohort_name){
mean_val    <- mean(input_data[,variable_col])
#print(paste("Average", variable_col,"of", cohort_name, "is:",mean_val))
return(mean_val)
}
compute_proportion <- function(input_data,variable_col,cohort_name){
n_total          <- nrow(input_data)
n_qualified      <- length(which(input_data[,variable_col] == 1))
prop <-  n_qualified/ n_total
#print(paste(variable_col,"Proportion","of",cohort_name ,"is:",prop))
return(prop)
}
###Create population
set.seed(1)
n <- 5000
student_id <- paste0("ID", seq(1,n,1))
gpa        <- sample(c(0,0.5,1,1.5,2,2.5,3,3.5,4), replace = TRUE,size=n)      #Random generate 1000 student GPA
female     <- sample(c(0,1), replace=TRUE, size=n) #Random generate Gender student GPA
male       <- 1- female
###Population data
data_pop <- data.frame(Student_ID = student_id,GPA = gpa,FEMALE =  female, MALE = male)
##Population MEAN and proportion
meanGPA_pop <- compute_average(data_pop,"GPA","Population")
propFEMALE_pop <- compute_proportion(data_pop,"FEMALE","Population")
propMALE_pop   <- compute_proportion(data_pop,"MALE","Population")
##################################################
#Generate 10000 samples with sample size = 100
##################################################
n_samples <- 1000
sample_size <- 20
sample_data_list <- list(NA)
for (i in 1:n_samples){
set.seed(i)
sample_data_list[[i]] <- get_sample_func(sample_size)
}
example_sample_data <-  sample_data_list[[1]]
#############################################################
#Compute average GPA and female proportaion for each sample
#############################################################
sample_stats <- as.data.frame(matrix(NA, nrow = n_samples,ncol = 3))
colnames(sample_stats) <- c("Sample_NAME","GPA_Mean","Female_Proportion")
for (i in 1:n_samples){
curr_sample_data <- sample_data_list[[i]]
sample_stats[i,"Sample_NAME"]       <- paste0("Sample",i)
sample_stats[i,"GPA_Mean"]           <- compute_average(curr_sample_data,"GPA","Sample")
sample_stats[i,"Female_Proportion"] <- compute_proportion(curr_sample_data,"FEMALE","Sample")
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
library(openxlsx)
df <- read.xlsx("Final COVID Cohort with Under 300 PFR.xlsx",sheet = 1)
data_dir <- "/Users/lucasliu/Downloads/"
data_dir2 <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Extracted_data/BASE/"
data_dir1 <- "/Users/lucasliu/Downloads/"
data_dir2 <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Extracted_data/BASE/"
df <- read.xlsx(paste0(data_dir1, "Final COVID Cohort with Under 300 PFR.xlsx"),sheet = 1)
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"),sheet = 1)
View(master_df)
View(master_df)
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"),sheet = 1 , header = T)
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"),sheet = 1 ,  colNames = TRUE)
View(master_df)
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"),sheet = 1 ,  startRow = 2)
View(master_df)
View(master_df)
df <- read.xlsx(paste0(data_dir1, "Final COVID Cohort with Under 300 PFR.xlsx"))
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"))
View(master_df)
library(xlsx)
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"))
master_df <- read.xlsx(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"), sheetIndex = 1)
require(data.table)
data_dir1 <- "/Users/lucasliu/Downloads/"
data_dir2 <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Extracted_data/BASE/"
df <- fread(paste0(data_dir1, "Final COVID Cohort with Under 300 PFR.xlsx"))
master_df <- fread(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"), sheetIndex = 1)
master_df <- fread(paste0(data_dir2, "ALL_BASE_DuplicatesRemoved.xlsx"))
library(openxlsx)
data_dir1 <- "/Users/lucasliu/Downloads/"
data_dir2 <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Extracted_data/BASE/"
df <- read.xlsx(paste0(data_dir1, "Final COVID Cohort with Under 300 PFR.xlsx"))
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
source("TAKI_Ultility.R")
library(rms)
library(PredictABEL)
library(pROC) #can also use this one for delong's methods
library(Rmisc)
library(caret)
#this script do 10 folds CV on UK data
#1. for each fold , down sampling 10 time, each instance get 10 predicted results
#2. compute confidence interval for performance metrics for each fold with each sampling index
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                  ############
#feature file: SOFA.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_SOFA_TOTAL_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/SOFA/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
colnames(model_data)
#2.CV
upsample_flag <- 0
N_sampling <- 10
NFolds <- 10
model_name_list <- c("SVM","RF","LogReg","XGB")
m<-2
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds,svmkernel = 'svmLinear2')
model_name <- model_name_list[m]
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds,svmkernel = 'svmLinear2')
source("TAKI_Ultility.R")
library(rms)
library(PredictABEL)
library(pROC) #can also use this one for delong's methods
library(Rmisc)
library(caret)
#this script do 10 folds CV on UK data
#1. for each fold , down sampling 10 time, each instance get 10 predicted results
#2. compute confidence interval for performance metrics for each fold with each sampling index
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                  ############
#feature file: SOFA.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_SOFA_TOTAL_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/SOFA/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
colnames(model_data)
#2.CV
upsample_flag <- 0
N_sampling <- 10
NFolds <- 10
model_name_list <- c("SVM","RF","LogReg","XGB")
model_name <- model_name_list[m]
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds,svmkernel = 'svmLinear2')
source("TAKI_Ultility.R")
library(rms)
library(PredictABEL)
library(pROC) #can also use this one for delong's methods
library(Rmisc)
library(caret)
#this script do 10 folds CV on UK data
#1. for each fold , down sampling 10 time, each instance get 10 predicted results
#2. compute confidence interval for performance metrics for each fold with each sampling index
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                  ############
#feature file: SOFA.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_SOFA_TOTAL_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/SOFA/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                  ############
#feature file: SOFA.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_SOFA_TOTAL_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/SOFA/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
colnames(model_data)
#2.CV
upsample_flag <- 0
N_sampling <- 10
NFolds <- 10
model_name_list <- c("SVM","RF","LogReg","XGB")
m<-2
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds,svmkernel = 'svmLinear2')
final_pred <- cv_res[[1]]
#compute avg performance
final_importance_matrix <- cv_res[[2]]
feature_indexes<- which(colnames(model_data) != outcome_colname)
features <- colnames(model_data)[feature_indexes]
avg_importance_matrix <- compute_avg_importance(final_importance_matrix,features,model_name)
#Compute perforamnce for each fold with each sampling
eachfold_eachSample_perf_tb <- compute_performance_TrainCV_func(N_sampling,NFolds,final_pred)
#get CI and mean perforamnce
CI_perf_tb <- perf_Mean_CI_func(eachfold_eachSample_perf_tb[,3:14])
View(eachfold_eachSample_perf_tb)
#1.Selected features
feature_file <- c("All_Feature_imputed_normed.csv")
selected_features <- c("UrineOutput_D0toD3" , "Vasopressor_ICUD0toD3","FI02_D1_HIGH","Platelets_D1_LOW","AGE",
"BUN_D0toD3_HIGH","HR_D1_HIGH","LAST_KDIGO_ICU_D0toD3","PH_D1_LOW","Bilirubin_D1_HIGH",
"MAX_KDIGO_ICU_D0toD3","ECMO_ICUD0toD3","Hours_inICUD0toD3", "Temperature_D1_LOW", "Temperature_D1_HIGH")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/SelectedClinicalFeature15Vars/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
model_data <- model_data[,c(selected_features,outcome_colname)]
table(model_data$Death_inHOSP)
colnames(model_data)
#2.CV
upsample_flag <- 0
N_sampling <- 10
NFolds <- 10
model_name_list <- c("SVM","RF","LogReg","XGB")
m<-2
#CV
cv_res <- cv2_func(model_data,outcome_colname,model_name,upsample_flag,N_sampling,NFolds,svmkernel = "svmLinear2")
final_pred <- cv_res[[1]]
#compute avg performance
final_importance_matrix <- cv_res[[2]]
feature_indexes<- which(colnames(model_data) != outcome_colname)
features <- colnames(model_data)[feature_indexes]
avg_importance_matrix <- compute_avg_importance(final_importance_matrix,features,model_name)
#Compute perforamnce for each fold with each sampling
eachfold_eachSample_perf_tb <- compute_performance_TrainCV_func(N_sampling,NFolds,final_pred)
