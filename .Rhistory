p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24H`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
top_fs
i<-3
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 0, vjust = 1)
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 0, vjust = 2)
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 1)
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "red")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "darkblue")
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
ghpo_dat$children[1]
descendant_of_Pheno_abnorm <- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
get_descendants(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001873") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI
get_ancestors(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
get_ancestors(ghpo_dat, "HP:0001919")
r = 0.8 # correlation coefficient
sigma = matrix(c(1,r,r,1), ncol=2)
View(sigma)
s = chol(sigma)
View(s)
n = 10000
z = s%*%matrix(rnorm(n*2), nrow=2)
u = pnorm(z)
View(u)
age = qgamma(u[1,], 15, 0.5)
age_bracket = cut(age, breaks = seq(0,max(age), by=5))
success = u[2,]>0.4
round(prop.table(table(age_bracket, success)),2)
plot(density(age[!success]), main="Age by Success", xlab="age")
lines(density(age[success]), lty=2)
legend('topright', c("Failure", "Success"), lty=c(1,2))
library(ggplot2)
library(dplyr)
library(tidyr)
library(faux)
install.packages("faux")
library(faux)
dat <- rnorm_multi(varnames = "A") %>%
mutate(B = rnorm_pre(A, mu = 10, sd = 2, r = 0.5))
View(dat)
dat$C <- rnorm_pre(dat$A, mu = 10, sd = 2, r = 0.5, empirical = TRUE)
View(dat)
rnorm_multi
set.seed(123)
sample(c(0,1), replace=TRUE, size=n)
sample(c(0,1), replace=TRUE, size=100)
domain_labels <- sample(c(0,1),replace = TRUE, size= 100)
domain_labels <- sample(c(0,1),replace = TRUE, size= 100)
domain_labels
transf_a <- NA
rand(1)
runif(1)
runif(1,0,0.5)
transf_a <- NA
for (i in length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.5)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
transf_a
transf_a <- NA
for (i in 1: length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.5)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
transf_a
transf_a <- NA
for (i in 1: length(domain_labels)){
if (domain_labels[i] == 0){
transf_a[i] <- runif(1,0,0.499999)
}else{
transf_a[i] <- runif(1,0.5,1)
}
}
check_df <- rbind(domain_labels,transf_a)
View(check_df)
check_df <- cbind(domain_labels,transf_a)
View(check_df)
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
check_df <- data.frame(cbind(domain_labels,transf_a))
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
View(check_df)
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
cor(domain_labels,transf_a)
domain_labels
check_df$V1
check_df <- data.frame(cbind(as.factor(domain_labels)-1,transf_a))
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
cor(domain_labels,transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
transf_a
min(transf_a)
max(transf_a)
summary(glm(domain_labels~transf_a,data=check_df,family=binomial))
check_df
summary(glm(V1~transf_a,data=check_df,family=binomial))
domain_labels
as.factor(domain_labels)
check_df <- data.frame(cbind(as.factor(domain_labels),transf_a))
View(check_df)
check_df <- data.frame(Label = domain_labels)
check_df <- data.frame(Label = domain_labels, trans_f_a = transf_a )
cor(domain_labels,transf_a)
View(check_df)
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
colnames(check_df)
check_df <- data.frame(Label = as.factor(domain_labels), trans_f_a = transf_a )
check_df <- data.frame(Label = as.factor(domain_labels), trans_f_a = transf_a )
check_df$Label
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
check_df
check_df <- data.frame(Label = as.factor(domain_labels), var = transf_a )
cor(domain_labels,transf_a)
summary(glm(Label~trans_f_a,data=check_df,family=binomial))
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3) )
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3)*10 )
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
cor.test( domain_labels,transf_a)
cor(domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
View(check_df)
exp(407.6 )
exp(407.6)
summary(glm(Label~var,data=check_df,family=binomial))
check_df <- data.frame(Label = as.factor(domain_labels), var = round(transf_a,3)*10+30 )
cor.test( domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
exp(407.6)
check_df <- data.frame(Label = as.factor(domain_labels), var = transf_a)
cor.test( domain_labels,transf_a)
summary(glm(Label~var,data=check_df,family=binomial))
plot(check_df$var,check_df$Label)
exp(407.6)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
source("TAKI_Ultility.R")
get_allmethods_performance <- function(folder_name,file_names,feature_set_name){
file_dir <- paste0(folder_name,feature_set_name,"/",file_names)
perfs_list <- list(NA)
for (i in 1:length(file_dir)){
curr_file <- file_dir[i]
curr_method_name <- gsub(paste0(folder_name,feature_set_name,"/Performance_AVG_CI_|.csv"),"",curr_file)
curr_perf <- read.csv(curr_file ,stringsAsFactors = F)
colnames(curr_perf) <- c("Metrics",paste0(feature_set_name,"_",curr_method_name,"_Mean_95CI"))
perfs_list[[i]] <- curr_perf
}
perfs <- do.call(cbind,perfs_list)
perfs <- perfs[,-c(3,5,7)] #remove duplicated "metric" col
return(perfs)
}
#this function compute the AUC difference between
#baseline feature + LogReg and all other feature with other methods
compute_AUC_diff_func1 <- function(all_perfs_df, bl_feature, bl_method,pred_file_folder){
#Input:
#All_perfs_df: all performance dataframe
#bl_feature: baseline feature name
#bl_method: baseline method name
#pred_file_folder: prediction file folder
# all_perfs_df <- all_perfs
# bl_feature <- "SOFA"
# bl_method  <- "LogReg"
#Get Baseline AUC
bl_auc_colidxes <- which(grepl(paste0(bl_feature,"_",bl_method),colnames(all_perfs_df))== T)
bl_auc_rowidxes <- which(all_perfs_df$Metrics == "AUC")
bl_auc    <-  all_perfs_df[bl_auc_rowidxes,bl_auc_colidxes]
bl_auc    <- as.numeric(unlist(strsplit(bl_auc,split = "(",fixed = T))[1])
#Comput AUC diff for each other feature set and methods
AUC_diff <- as.data.frame(matrix(NA, nrow = 2, ncol = ncol(all_perfs_df)))
colnames(AUC_diff) <- colnames(all_perfs_df)
AUC_diff$Metrics[1] <-  paste0("AUC_Diff_",bl_feature,"_", bl_method)
AUC_diff$Metrics[2] <-  paste0("AUC_Diff_Pvalue_",bl_feature,"_", bl_method)
for (i in 2:ncol(AUC_diff)){ #for each feature set
#Get current column name and feature and method
curr_col <- colnames(AUC_diff)[i]
curr_feature <- unlist(strsplit(curr_col,split = "_"))[1]
curr_method  <- unlist(strsplit(curr_col,split = "_"))[2]
if (curr_feature != bl_feature){
cur_auc_colidxes <- which(grepl(paste0(curr_feature,"_",curr_method),colnames(all_perfs_df))== T)
cur_auc_rowidxes <- which(all_perfs_df$Metrics == "AUC")
cur_auc          <-  all_perfs_df[cur_auc_rowidxes,cur_auc_colidxes]
cur_auc          <- as.numeric(unlist(strsplit(cur_auc,split = "(",fixed = T))[[1]])
#Compute AUC diff
AUC_diff[1,i] <- round(cur_auc - bl_auc,2)
#Compute P value
bl_pred_file   <- paste0(bl_feature,"/Prediction_",bl_method,".csv")
curr_pred_file <- paste0(curr_feature,"/Prediction_",curr_method,".csv")
p_value <- Test_AUC_diff_func(pred_file_folder,bl_pred_file,curr_pred_file)
if (p_value < 0.001){
p_value <- "< 0.001"
}
AUC_diff[2,i] <- p_value
}else{
AUC_diff[1,i] <- "-"
AUC_diff[2,i] <- "-"
}
}
return(AUC_diff)
}
#this function compute the AUC difference between
#baseline feature and all other feature with corresponding methods
compute_AUC_diff_func2 <- function(all_perfs_df, bl_feature, pred_file_folder){
#Input:
#All_perfs_df: all performance dataframe
#bl_feature: baseline feature name
#pred_file_folder: prediction file folder
#Comput AUC diff for each other feature set and methods
AUC_diff <- as.data.frame(matrix(NA, nrow = 2, ncol = ncol(all_perfs_df)))
colnames(AUC_diff) <- colnames(all_perfs_df)
AUC_diff$Metrics[1] <-  paste0("AUC_Diff_",bl_feature,"_CorrespondMethod")
AUC_diff$Metrics[2] <-  paste0("AUC_Diff_Pvalue_",bl_feature,"_CorrespondMethod")
for (i in 2:ncol(AUC_diff)){ #for each feature set
#Get current column name and feature and method
curr_col <- colnames(AUC_diff)[i]
curr_feature <- unlist(strsplit(curr_col,split = "_"))[1]
curr_method  <- unlist(strsplit(curr_col,split = "_"))[2]
#Get Baseline AUC
bl_auc_colidxes <- which(grepl(paste0(bl_feature,"_",curr_method),colnames(all_perfs_df))== T)
bl_auc_rowidxes <- which(all_perfs_df$Metrics == "AUC")
bl_auc    <-  all_perfs_df[bl_auc_rowidxes,bl_auc_colidxes]
bl_auc    <- as.numeric(unlist(strsplit(bl_auc,split = "(",fixed = T))[1])
if (curr_feature != bl_feature){
cur_auc_colidxes <- which(grepl(paste0(curr_feature,"_",curr_method),colnames(all_perfs_df))== T)
cur_auc_rowidxes <- which(all_perfs_df$Metrics == "AUC")
cur_auc          <-  all_perfs_df[cur_auc_rowidxes,cur_auc_colidxes]
cur_auc          <- as.numeric(unlist(strsplit(cur_auc,split = "(",fixed = T))[[1]])
#Compute AUC diff
AUC_diff[1,i] <- round(cur_auc - bl_auc,2)
#Compute P value
bl_pred_file   <- paste0(bl_feature,"/Prediction_",curr_method,".csv")
curr_pred_file <- paste0(curr_feature,"/Prediction_",curr_method,".csv")
p_value <- Test_AUC_diff_func(pred_file_folder,bl_pred_file,curr_pred_file)
if (p_value < 0.001){
p_value <- "< 0.001"
}
AUC_diff[2,i] <- p_value
}else{
AUC_diff[1,i] <- "-"
AUC_diff[2,i] <- "-"
}
}
return(AUC_diff)
}
#######################################################################################
##### 1. Cross Validation Mortality performance
#######################################################################################
perf_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/"
folder_name <- paste0(perf_dir,"CV_performance/mortality/")
method_names <- c("LogReg","RF","SVM","XGB")
perf_file_names <- paste0("Performance_AVG_CI_",method_names,".csv")
prediction_file_names <- paste0("Prediction_",method_names,".csv")
#1. Performances using different feature
SOFA_perfs <- get_allmethods_performance(folder_name,perf_file_names,"SOFA")
APACHE_perfs <- get_allmethods_performance(folder_name,perf_file_names,"APACHE")
SelectedClinicalFeature_perfs <- get_allmethods_performance(folder_name,perf_file_names,"SelectedClinicalFeature15Vars")
AllClinicalFeature_perfs <- get_allmethods_performance(folder_name,perf_file_names,"AllClinicalFeature")
all_perfs <- cbind(SOFA_perfs,APACHE_perfs,SelectedClinicalFeature_perfs,AllClinicalFeature_perfs)
all_perfs <- all_perfs[-c(6,11,16)]
#reorder rows
reorder_names <- c("AUC" , "Accuracy" ,"Precision" ,"Sensitivity","Specificity",
"F1",  "PPV" ,"NPV" ,"Calibration_Intercept","Calibration_Slope" ,"Taylor_Calibration_Intercept",
"Taylor_Calibration_Slope")
all_perfs <- all_perfs[match(reorder_names,all_perfs$Metrics),]
#'@Modified 050122
#2.1 For each featuresets and each method, compare with baseline (SOFA + Logreg) AUC diff
AUC_diff_LR <- compute_AUC_diff_func1(all_perfs,"SOFA","LogReg",folder_name)
#2.2. For each featuresets, compare with baseline (SOFA + corresponding ML method) AUC diff
AUC_diff_Corr <- compute_AUC_diff_func2(all_perfs,"SOFA",folder_name)
AUC_diff <- rbind(AUC_diff_LR, AUC_diff_Corr) #Combine the two
#3.1.For each featuresets and each method, compare with APACHE + Logreg
AUC_diff_LR   <- compute_AUC_diff_func1(all_perfs,"APACHE","LogReg",folder_name)
#3.2. For each featuresets, compare with baseline (APACHE + corresponding ML method) AUC diff
AUC_diff_Corr <- compute_AUC_diff_func2(all_perfs,"APACHE",folder_name)
AUC_diff2 <- rbind(AUC_diff_LR, AUC_diff_Corr)  #Combine the two
Final_all_perfs <- rbind(all_perfs,AUC_diff,AUC_diff2)
write.csv(Final_all_perfs, paste0(folder_name,"Performance_AVG_CI_Altogether.csv"),row.names = F)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3.MEDICATIONS_INDX
raw_MEDICATIONS_df <- read.csv(paste0(raw_dir,"MEDICATIONS_INDX.csv"),stringsAsFactors = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3.MEDICATIONS_INDX
raw_MEDICATIONS_df <- read.csv(paste0(raw_dir,"MEDICATIONS_INDX.csv"),stringsAsFactors = F)
View(raw_MEDICATIONS_df)
