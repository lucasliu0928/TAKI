raw_SCR_df <- read.csv(paste0(raw_dir,"SCR_ALL_VALUES.csv"),stringsAsFactors = F)
raw_SCR_df <- raw_SCR_df[-which(is.na(raw_SCR_df$SCR_VALUE) == T),] #remove NA values
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve MDRD
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2.Demo df for analysis ID
Demo_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
no_demo_indexes <- which(is.na(Demo_df$GENDER)== T |is.na(Demo_df$RACE)== T | is.na(Demo_df$AGE)==T)
Demo_df <- Demo_df[-no_demo_indexes,]
#2.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"SCR_ALL_VALUES.csv"),stringsAsFactors = F)
raw_SCR_df <- raw_SCR_df[-which(is.na(raw_SCR_df$SCR_VALUE) == T),] #remove NA values
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve MDRD
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time and has all demo info
##########################################################################################
analysis_ID <- intersect(unique(All_time_df[,"STUDY_PATIENT_ID"]), unique(Demo_df[,"STUDY_PATIENT_ID"]))
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/1F_Get_ExclusionCriterion_BeforeESRD.R', echo=TRUE)
check <- Src_df[which(Src_df$STUDY_PATIENT_ID %in% Final_Anlaysis_ID),]
Src_df$STUDY_PATIENT_ID
Final_Anlaysis_ID
check <- Src_df[which(Src_df$STUDY_PATIENT_ID %in% Final_Anlaysis_ID$STUDY_PATIENT_ID),]
View(check)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/1F_Get_ExclusionCriterion_BeforeESRD.R', echo=TRUE)
#Dertmine if ESRD before or AT HOSPITAL
#1. Source 1: ESRD_USRDS.csv (Gold dataset, if not in USRD, use ESRD_STATUS.csv, then manual check
#2. Source 2: ESRD_STATUS.csv
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Analysis Id before exclusion of ESRD
##########################################################################################
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID_BeforeExclusionOfESRD.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. Load data
##########################################################################################
#1. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. source 1: USRDS_ESRD
USRDS_ESRD_df <-read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
USRDS_ESRD_df <- USRDS_ESRD_df[-which(USRDS_ESRD_df$ESRD_DATE==""),] #remove blanks
#reformat
USRDS_ESRD_df$ESRD_DATE <- gsub("00:00:00","",USRDS_ESRD_df$ESRD_DATE)
USRDS_ESRD_df$ESRD_DATE <- gsub("0:00","",USRDS_ESRD_df$ESRD_DATE)
dash_idxes <- which(grepl("-",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[dash_idxes] <- as.character(ymd(USRDS_ESRD_df$ESRD_DATE[dash_idxes]))
slash_idxes <- which(grepl("/",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[slash_idxes] <- as.character(mdy(USRDS_ESRD_df$ESRD_DATE[slash_idxes]))
#3. source 2
ESRD_STATUS_df <-read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
ESRD_STATUS_df[which(ESRD_STATUS_df == "",arr.ind = T)] <- 0
ESRD_STATUS_df[which(ESRD_STATUS_df == "Y",arr.ind = T)] <- 1
############################################################################################################
#3. Process USRDS_ESRD.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df1) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_USRDS","SOURCE")
ESRD_BEFORE_AT_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df1) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_USRDS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df1[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "in_USRD"
if (curr_esrd_date <= curr_hosp_start) {
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "notin_USRD"
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"]<- 0
}
}
table(ESRD_BEFORE_AT_Indicator_df1$BEFORE_AT_ADMISSION_USRDS)
############################################################################################################
#4. Process ESRD_STATUS.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df2) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_STATUS","SOURCE")
ESRD_BEFORE_AT_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df2) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_STATUS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df2[i,"STUDY_PATIENT_ID"] <- curr_id
#source 2: status table
curr_ESRD_STATUS_df <- ESRD_STATUS_df[which(ESRD_STATUS_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_ESRD_STATUS_df) != 0){ #if in ESRD_STATUS.csv
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "in_STATUS_TABLE"
if (curr_ESRD_STATUS_df[,"AT_ADMISSION_INDICATOR"] == 1 | curr_ESRD_STATUS_df[,"BEFORE_INDEXED_INDICATOR"] == 1) {
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "notin_STATUS_TABLE"
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"]<- 0
}
}
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
t
t
############################################################################################################
#5.Combine Two data source
############################################################################################################
ESRD_BEFORE_AT_Indicator_df_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT_USRDS","ESRD_BEFORE_AT_STATUS")
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),"BEFORE_AT_ADMISSION_USRDS]
#source 2: status table
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_STATUS"] <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),"BEFORE_AT_ADMISSION_INDICATOR"]
}
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
#source 1: USRDs
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),"BEFORE_AT_ADMISSION_USRDS"]
colnames(ESRD_BEFORE_AT_Indicator_df2)
ESRD_BEFORE_AT_Indicator_df_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT_USRDS","ESRD_BEFORE_AT_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),"BEFORE_AT_ADMISSION_USRDS"]
#source 2: status table
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_STATUS"] <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),"BEFORE_AT_ADMISSION_STATUS"]
}
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
############################################################################################################
#6. Manully check if  STATUS agrees USRDs
############################################################################################################
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
table(ESRD_BEFORE_AT_Indicator_df1$SOURCE)
7309  + 727
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
curr_USRDs_source
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_flag
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_tb
curr_status_source <- curr_status_tb[,"SOURCE"]
curr_status_source
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_source <- curr_status_tb[,"SOURCE"]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
table(ESRD_BEFORE_AT_Indicator_df1$SOURCE)
############################################################################################################
#5.Combine Two data source
############################################################################################################
ESRD_BEFORE_AT_Indicator_df_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT_USRDS","ESRD_BEFORE_AT_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_USRDS"] <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_STATUS"] <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_STATUS"] <- curr_status_tb[,"SOURCE"]
}
############################################################################################################
#6. Manully check if  STATUS agrees USRDs
############################################################################################################
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
View(ESRD_BEFORE_AT_Indicator_df_Comb)
############################################################################################################
#7. Final before/AT status
############################################################################################################
which(ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_USRDS" & ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_STATUS" )
############################################################################################################
#7. Final before/AT status
############################################################################################################
which(ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_USRDS" & ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_STATUS_TABLE" )
############################################################################################################
#7. Final before/AT status
############################################################################################################
which(ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_USRDS" &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_STATUS == "notin_STATUS_TABLE" )
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/1G_Get_ESRD_BeforeAT.R', echo=TRUE)
############################################################################################################
#7. Final before/AT status
############################################################################################################
which(ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_USRDS" &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_STATUS == "notin_STATUS_TABLE" )
table(USRD_BeforeAT,STATUS_BeforeAT)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/1G_Get_ESRD_BeforeAT.R', echo=TRUE)
############################################################################################################
#7. Final before/AT status
############################################################################################################
length(which(ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "notin_USRDS" &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_STATUS == "notin_STATUS_TABLE" ))
############################################################################################################
#7. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
#Dertmine if ESRD before or AT HOSPITAL
#1. Source 1: ESRD_USRDS.csv (Gold dataset, if not in USRD, use ESRD_STATUS.csv, then manual check
#2. Source 2: ESRD_STATUS.csv
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Analysis Id before exclusion of ESRD
##########################################################################################
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID_BeforeExclusionOfESRD.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. Load data
##########################################################################################
#1. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#2. source 1: USRDS_ESRD
USRDS_ESRD_df <-read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
USRDS_ESRD_df <- USRDS_ESRD_df[-which(USRDS_ESRD_df$ESRD_DATE==""),] #remove blanks
#reformat
USRDS_ESRD_df$ESRD_DATE <- gsub("00:00:00","",USRDS_ESRD_df$ESRD_DATE)
USRDS_ESRD_df$ESRD_DATE <- gsub("0:00","",USRDS_ESRD_df$ESRD_DATE)
dash_idxes <- which(grepl("-",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[dash_idxes] <- as.character(ymd(USRDS_ESRD_df$ESRD_DATE[dash_idxes]))
slash_idxes <- which(grepl("/",USRDS_ESRD_df$ESRD_DATE) == T)
USRDS_ESRD_df$ESRD_DATE[slash_idxes] <- as.character(mdy(USRDS_ESRD_df$ESRD_DATE[slash_idxes]))
#3. source 2
ESRD_STATUS_df <-read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
ESRD_STATUS_df[which(ESRD_STATUS_df == "",arr.ind = T)] <- 0
ESRD_STATUS_df[which(ESRD_STATUS_df == "Y",arr.ind = T)] <- 1
############################################################################################################
#3. Process USRDS_ESRD.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df1 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df1) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_USRDS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df1[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd(strsplit(curr_time_df[,"Updated_HOSP_ADMIT_DATE"],split = " ")[[1]][1]) #only get ymd cuz esrd dates has no hms
#Source 1 USRD info
curr_usrd_df <- USRDS_ESRD_df[which(USRDS_ESRD_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_esrd_date <- ymd(curr_usrd_df$ESRD_DATE)
if (nrow(curr_usrd_df) != 0){ #if in USRDs
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "in_USRD"
if (curr_esrd_date <= curr_hosp_start) {
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df1[i,"SOURCE"]<- "notin_USRDS"
ESRD_BEFORE_AT_Indicator_df1[i,"BEFORE_AT_ADMISSION_USRDS"]<- 0
}
}
table(ESRD_BEFORE_AT_Indicator_df1$BEFORE_AT_ADMISSION_USRDS)
############################################################################################################
#4. Process ESRD_STATUS.csv to get before or at
############################################################################################################
ESRD_BEFORE_AT_Indicator_df2 <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 3))
colnames(ESRD_BEFORE_AT_Indicator_df2) <- c("STUDY_PATIENT_ID","BEFORE_AT_ADMISSION_STATUS","SOURCE")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df2[i,"STUDY_PATIENT_ID"] <- curr_id
#source 2: status table
curr_ESRD_STATUS_df <- ESRD_STATUS_df[which(ESRD_STATUS_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_ESRD_STATUS_df) != 0){ #if in ESRD_STATUS.csv
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "in_STATUS_TABLE"
if (curr_ESRD_STATUS_df[,"AT_ADMISSION_INDICATOR"] == 1 | curr_ESRD_STATUS_df[,"BEFORE_INDEXED_INDICATOR"] == 1) {
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 1
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"] <- 0
}
}else{
ESRD_BEFORE_AT_Indicator_df2[i,"SOURCE"]<- "notin_STATUS_TABLE"
ESRD_BEFORE_AT_Indicator_df2[i,"BEFORE_AT_ADMISSION_STATUS"]<- 0
}
}
############################################################################################################
#5.Combine Two data source
############################################################################################################
ESRD_BEFORE_AT_Indicator_df_Comb <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 5))
colnames(ESRD_BEFORE_AT_Indicator_df_Comb) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT_USRDS","ESRD_BEFORE_AT_STATUS",
"SOURCE_USRDS","SOURCE_STATUS")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_USRDS"] <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_USRDS"] <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"ESRD_BEFORE_AT_STATUS"] <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
ESRD_BEFORE_AT_Indicator_df_Comb[i,"SOURCE_STATUS"] <- curr_status_tb[,"SOURCE"]
}
############################################################################################################
#6. Manully check if  STATUS agrees USRDs
############################################################################################################
USRD_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_USRDS"]
STATUS_BeforeAT <- ESRD_BEFORE_AT_Indicator_df_Comb[,"ESRD_BEFORE_AT_STATUS"]
table(USRD_BeforeAT,STATUS_BeforeAT)
############################################################################################################
#6. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
i <- 1
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
curr_USRDs_flag
curr_USRDs_source
table(ESRD_BEFORE_AT_Indicator_df2$SOURCE)
############################################################################################################
#6. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == "in_USRDS"){ #as long as it is in USRDS
final_flag <- curr_USRDs_flag
}else if(curr_USRDs_source == "notin_USRDS" & curr_status_source == "in_STATUS_TABLE"){ #if not in USRDS, but in status
final_flag <- curr_status_flag
}else if (curr_USRDs_source == "notin_USRDS" & curr_status_source == "notin_STATUS_TABLE"){#if not in both, both has the same flag
final_flag <- unique(c(curr_USRDs_flag,curr_status_flag))
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT)
7413+167
7920 +116
View(Final_ESRD_BEFORE_AT_df)
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT)
which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS== 1 & ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS==0)
which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRDS" )
which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRDs" )
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS
which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRD" )
length(which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRD" ))
length(which(ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_STATUS== 1 &
ESRD_BEFORE_AT_Indicator_df_Comb$ESRD_BEFORE_AT_USRDS==0 &
ESRD_BEFORE_AT_Indicator_df_Comb$SOURCE_USRDS == "in_USRD" ))
167-54
7413+54
167-54
113+91
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT)
table(ESRD_BEFORE_AT_Indicator_df1$BEFORE_AT_ADMISSION_USRDS)
############################################################################################################
#6. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == "in_USRDS"){ #as long as it is in USRDS
final_flag <- curr_USRDs_flag
}else if(curr_USRDs_source == "notin_USRDS" & curr_status_source == "in_STATUS_TABLE"){ #if not in USRDS, but in status
final_flag <- curr_status_flag
}else if (curr_USRDs_source == "notin_USRDS" & curr_status_source == "notin_STATUS_TABLE"){#if not in both, both has the same flag
final_flag <- unique(c(curr_USRDs_flag,curr_status_flag))
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT)
curr_USRDs[,"SOURCE"]
table(ESRD_BEFORE_AT_Indicator_df1$SOURCE)
############################################################################################################
#6. Final before/AT status
#USE USRDs first, then if patient not in USRDS, use status table
############################################################################################################
Final_ESRD_BEFORE_AT_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 2))
colnames(Final_ESRD_BEFORE_AT_df) <- c("STUDY_PATIENT_ID","ESRD_BEFORE_AT")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0) {print(i)}
curr_id <- analysis_ID[i]
Final_ESRD_BEFORE_AT_df[i,"STUDY_PATIENT_ID"] <- curr_id
#source 1: USRDs
curr_USRDs <- ESRD_BEFORE_AT_Indicator_df1[which(ESRD_BEFORE_AT_Indicator_df1[,"STUDY_PATIENT_ID"] == curr_id),]
curr_USRDs_flag <- curr_USRDs[,"BEFORE_AT_ADMISSION_USRDS"]
curr_USRDs_source <- curr_USRDs[,"SOURCE"]
#source 2: status table
curr_status_tb <- ESRD_BEFORE_AT_Indicator_df2[which(ESRD_BEFORE_AT_Indicator_df2[,"STUDY_PATIENT_ID"] == curr_id),]
curr_status_flag <- curr_status_tb[,"BEFORE_AT_ADMISSION_STATUS"]
curr_status_source<- curr_status_tb[,"SOURCE"]
if (curr_USRDs_source == "in_USRDS"){ #as long as it is in USRDS
final_flag <- curr_USRDs_flag
}else if(curr_USRDs_source == "notin_USRDS" & curr_status_source == "in_STATUS_TABLE"){ #if not in USRDS, but in status
final_flag <- curr_status_flag
}else if (curr_USRDs_source == "notin_USRDS" & curr_status_source == "notin_STATUS_TABLE"){#if not in both, both has the same flag
final_flag <- unique(c(curr_USRDs_flag,curr_status_flag))
}else{
final_flag <- NA
}
Final_ESRD_BEFORE_AT_df[i,"ESRD_BEFORE_AT"] <- final_flag
}
table(Final_ESRD_BEFORE_AT_df$ESRD_BEFORE_AT)
table(ESRD_BEFORE_AT_Indicator_df1$SOURCE)
