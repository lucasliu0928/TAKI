#Features : HOSP dates, ICU dates , CRRT date, HD dates, HD treatments
##########################################################################################
#For multiple ICUs in one HOSP admission, use min ICU time as ICU start, max ICU imte as ICU stop
TimeInfo_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 11))
colnames(TimeInfo_df) <- c("STUDY_PATIENT_ID",
"HOSP_ADMIT_DATE",
"HOSP_DISCHARGE_DATE",
"min_ICU_ADMIT_DATE",
"max_ICU_DISCHARGE_DATE",
"CRRT_START_DATE",
"CRRT_STOP_DATE",
"HD_START_DATE",
"HD_STOP_DATE",
"HD_TREATMENTS",
"DISCHARGE_DISPOSITION")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0){print(i)}
curr_id <- analysis_ID[i]
TimeInfo_df[i,"STUDY_PATIENT_ID"] <- curr_id
#curr admission indx df
curr_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),]
TimeInfo_df[i,"HOSP_ADMIT_DATE"] <- as.character(unique(curr_df[,"HOSP_ADMIT_DATE"]))
TimeInfo_df[i,"HOSP_DISCHARGE_DATE"] <- as.character(unique(curr_df[,"HOSP_DISCHARGE_DATE"]))
TimeInfo_df[i,"DISCHARGE_DISPOSITION"] <- unique(curr_df[,"DISCHARGE_DISPOSITION"])
if (length(TimeInfo_df[i,"HOSP_ADMIT_DATE"]) == 1){ #if one hosp admit
TimeInfo_df[i,"min_ICU_ADMIT_DATE"] <- as.character(min(curr_df[,"ICU_ADMIT_DATE"]))
TimeInfo_df[i,"max_ICU_DISCHARGE_DATE"] <- as.character(max(curr_df[,"ICU_DISCHARGE_DATE"]))
}
#curr RRT df
curr_rrt_df <- raw_RENAL_REPLACE_THERAPY_df[which(raw_RENAL_REPLACE_THERAPY_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_rrt_df) > 0){
TimeInfo_df[i,"CRRT_START_DATE"] <- as.character(min(curr_rrt_df[,"CRRT_START_DATE"]))
TimeInfo_df[i,"CRRT_STOP_DATE"]  <- as.character(max(curr_rrt_df[,"CRRT_STOP_DATE"]))
TimeInfo_df[i,"HD_START_DATE"]   <- as.character(min(curr_rrt_df[,"HD_START_DATE"]))
TimeInfo_df[i,"HD_STOP_DATE"]    <- as.character(max(curr_rrt_df[,"HD_STOP_DATE"]))
TimeInfo_df[i,"HD_TREATMENTS"]    <- as.character(max(curr_rrt_df[,"HD_TREATMENTS"]))
}
}
#Reforamt the omit of 00:00:00
reformat_cols <- c( "HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","min_ICU_ADMIT_DATE","max_ICU_DISCHARGE_DATE",
"CRRT_START_DATE","CRRT_STOP_DATE","HD_START_DATE","HD_STOP_DATE")
for (i in 1:length(reformat_cols)){
curr_col <- TimeInfo_df[,reformat_cols[i]]
curr_idxes_tochange <- which(nchar(curr_col) == 10)
udpated_col <-  paste(curr_col[curr_idxes_tochange],"00:00:00")
TimeInfo_df[curr_idxes_tochange,reformat_cols[i]] <- udpated_col
}
write.csv(TimeInfo_df,paste0(outdir,"All_Timeinfo_df.csv"))
##########################################################################################
#2. Load UK raw DEMOGRAPHICS_INDX
#Features to extract :  1. Gender
#                       2. Race
#Load UK raw DOB
#Features to extract :
#                       1.DOB
#                       2.Compute Age at admision
##########################################################################################
#compute Age
raw_DOB_df$AGE <- NA
for (i in 1:nrow(raw_DOB_df)){
if (i %% 1000 ==0){print(i)}
curr_id <- raw_DOB_df[i,"STUDY_PATIENT_ID"]
curr_DOB <- raw_DOB_df[i,"DOB"]
curr_idxes <- which(TimeInfo_df[,"STUDY_PATIENT_ID"] == curr_id)
if (length(curr_idxes) > 0){
curr_hosp_start <- TimeInfo_df[curr_idxes,"HOSP_ADMIT_DATE"]
raw_DOB_df[i,"AGE"] <-  as.numeric(difftime(ymd_hms(curr_hosp_start) , ymd_hms(curr_DOB),units = "days"))/365
}
}
#Get Features
GENDER <- get_raw_var_values_1option_func(raw_demo_df,analysis_ID,"GENDER","GENDER")
RACE <- get_raw_var_values_1option_func(raw_demo_df,analysis_ID,"RACE","RACE")
AGE <- get_raw_var_values_1option_func(raw_DOB_df,analysis_ID,"AGE","AGE")
All_RACE_GENDER_df <- cbind(GENDER,RACE,AGE)
All_RACE_GENDER_df <- All_RACE_GENDER_df[,-c(3,5)] #remove duplicated columns
write.csv(All_RACE_GENDER_df,paste0(outdir,"All_RACE_GENDER_AGE_df.csv"))
##########################################################################################
#3. Load UK raw SCR_ALL_VALUES
#Features to extract :
#1.Baseline Scr (The outpatient sCr value closest to 1 day before hospital admission up to 1 year.
#                If no outpatient sCr, use the inpatient sCr value closet to 7 days before index hospital admission up to 1 year.
#                If no both inpt and outpt baseline sCr,  resolved the eGFR by MDRD equation for 75 mL/min/1.73m2 to determine a baseline SCr value.)
#2.Admit SCr (First SCr after ICU admission)
#3.Peak SCr (Highest Value ICU D0-D3)
#4.Num Scr  (ICU D0-D3)
##########################################################################################
options(warn=2)
Final_SCR_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 8))
colnames(Final_SCR_df) <- c("STUDY_PATIENT_ID","Baseline_SCr","AdmitICU_SCr","AdmitICU_SCr_TIME",
"Peak_SCr_1st72hICU","NUM_SCr_1st72hICU","HoursBetween_Last_and_First_SCr_1st72hICU")
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Final_SCR_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- TimeInfo_df[which(TimeInfo_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"HOSP_ADMIT_DATE"])
curr_hosp_end <- ymd_hms(curr_time_df[,"HOSP_DISCHARGE_DATE"])
curr_icu_start <- ymd_hms(curr_time_df[,"min_ICU_ADMIT_DATE"])
curr_icu_end <- ymd_hms(curr_time_df[,"max_ICU_DISCHARGE_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#baseline Scr
curr_bl_scr <- get_baseline_scr_func(curr_hosp_start,curr_scr_df)
Final_SCR_df[i,"Baseline_SCr"] <- curr_bl_scr
#admit Scr
#ALL Scr in ICU
curr_scr_inICU_df <- get_value_df_inWindow_func(curr_scr_df,curr_icu_start,curr_icu_end,"SCR_ENTERED")
if (nrow(curr_scr_inICU_df) > 0 ){ #if any value in ICU
curr_1st_scr_afterICU_idx <- which(curr_scr_inICU_df[,"SCR_ENTERED"] == min(curr_scr_inICU_df[,"SCR_ENTERED"]))
curr_admit_scr <- curr_scr_inICU_df[curr_1st_scr_afterICU_idx,"SCR_VALUE"]
curr_admit_scr_time <- curr_scr_inICU_df[curr_1st_scr_afterICU_idx,"SCR_ENTERED"]
Final_SCR_df[i,"AdmitICU_SCr"] <- curr_admit_scr
Final_SCR_df[i,"AdmitICU_SCr_TIME"] <- curr_admit_scr_time
#peak Scr in ICU first 72 hours
hr72_after_icu <- curr_icu_start + hours(72)
curr_scr_inICU_1st72hrs <- get_value_df_inWindow_func(curr_scr_inICU_df,curr_icu_start,hr72_after_icu,"SCR_ENTERED")
if (nrow(curr_scr_inICU_1st72hrs) > 0 ){ #if any value in the first 72 hours in ICU
curr_peak_scr_1st72h <- max(curr_scr_inICU_1st72hrs[,"SCR_VALUE"])
curr_num_scr_1st72h <- nrow(curr_scr_inICU_1st72hrs)
Final_SCR_df[i,"HoursBetween_Last_and_First_SCr_1st72hICU"] <-  as.numeric(difftime(max(curr_scr_inICU_1st72hrs[,"SCR_ENTERED"]),min(curr_scr_inICU_1st72hrs[,"SCR_ENTERED"]),units = "hours"))
Final_SCR_df[i,"Peak_SCr_1st72hICU"] <- curr_peak_scr_1st72h
Final_SCR_df[i,"NUM_SCr_1st72hICU"] <- curr_num_scr_1st72h
}else{
Final_SCR_df[i,"NUM_SCr_1st72hICU"] <- 0
}
}else{
Final_SCR_df[i,"NUM_SCr_1st72hICU"] <- 0
}
}
#resolve baseline Scr by MDRD
ct <- 1
no_bl_scr_IDs <- NA
for (i in 1:nrow(Final_SCR_df)){
curr_id <- Final_SCR_df[i,"STUDY_PATIENT_ID"]
curr_scr <- Final_SCR_df[i,"Baseline_SCr"]
if (is.na(curr_scr) == T){
no_bl_scr_IDs[ct] <-  curr_id
ct <- ct+ 1
curr_demo_df <- All_RACE_GENDER_df[which(All_RACE_GENDER_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_age <- curr_demo_df[,"AGE"]
curr_gender <- curr_demo_df[,"GENDER"]
curr_race <- curr_demo_df[,"RACE"]
if (is.na(curr_age) == F & is.na(curr_gender) == F & is.na(curr_race) == F){
curr_bl_val <- SolveScr_reverse_MDRD_equation(curr_age,curr_gender,curr_race)
Final_SCR_df[i,"Baseline_SCr"] <- curr_bl_val
}
}
}
length(no_bl_scr_IDs) #25480
#Indxes of No Baseline Scr after MDRD due to age, gender and race missing
no_bl_scr_idxes <- which(is.na(Final_SCR_df[,"Baseline_SCr"])==T) #21
write.csv(Final_SCR_df,paste0(outdir,"All_SCR_df.csv"))
##########################################################################################
#KDIGO
#1.Admit KDIGO
#2.Maximum KDIGO 	(Maximum KDIGO score in ICU up to 3 days)
#3.Last    KDIGO  (Last KDIGO score    in ICU up to 3 days)
##########################################################################################
KDIGO_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 4))
colnames(KDIGO_df) <- c("STUDY_PATIENT_ID","Admit_KDIGO_ICU","MAX_KDIGO_1st72hICU","LAST_KDIGO_1st72hICU")
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
KDIGO_df[i,"STUDY_PATIENT_ID"] <- curr_id
#baseline Scr
curr_baseline_scr <- Final_SCR_df[which(Final_SCR_df[,"STUDY_PATIENT_ID"] ==curr_id),"Baseline_SCr"]
#admit SCR
curr_admit_scr <- Final_SCR_df[which(Final_SCR_df[,"STUDY_PATIENT_ID"] ==curr_id),"AdmitICU_SCr"]
#admit Scr time
curr_admit_scr_time <- Final_SCR_df[which(Final_SCR_df[,"STUDY_PATIENT_ID"] ==curr_id),"AdmitICU_SCr_TIME"]
#Time info
curr_time_df <- TimeInfo_df[which(TimeInfo_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_icu_start <- ymd_hms(curr_time_df[,"min_ICU_ADMIT_DATE"])
curr_icu_end <- ymd_hms(curr_time_df[,"max_ICU_DISCHARGE_DATE"])
curr_crrt_start <- ymd_hms(curr_time_df[,"CRRT_START_DATE"])
curr_crrt_end <- ymd_hms(curr_time_df[,"CRRT_STOP_DATE"])
curr_hd_start <- ymd_hms(curr_time_df[,"HD_START_DATE"])
curr_hd_end <- ymd_hms(curr_time_df[,"HD_STOP_DATE"])
#All SCr df
curr_scr_df <- raw_SCR_df[which(raw_SCR_df[,"STUDY_PATIENT_ID"] == curr_id),]
#Scr in ICU
curr_scr_inICU_df <- get_value_df_inWindow_func(curr_scr_df,curr_icu_start,curr_icu_end,"SCR_ENTERED")
#Scr in the first 72 h of ICU
hr72_after_icu <- curr_icu_start + hours(72)
curr_scr_inICU_1st72hrs_df <- get_value_df_inWindow_func(curr_scr_inICU_df,curr_icu_start,hr72_after_icu,"SCR_ENTERED")
if (nrow(curr_scr_inICU_1st72hrs_df) > 0 & is.na(curr_baseline_scr) == F){
last_time_point  <- max(curr_scr_inICU_1st72hrs_df[,"SCR_ENTERED"])
curr_KDIGO_df    <- get_KDIGO_Score_forScrdf_func(curr_baseline_scr,curr_scr_inICU_1st72hrs_df)
#update if each time step is in RRT duration, if so, update the KDIGO score to 4
if (is.na(curr_crrt_start) == F | is.na(curr_hd_start) == F){
curr_updated_KDIGO_df <- update_KDIGO_df_forRRT_func(curr_KDIGO_df,curr_crrt_start,curr_crrt_end,curr_hd_start,curr_hd_end)
}else{
curr_updated_KDIGO_df <-  curr_KDIGO_df #no updates
}
KDIGO_df[i,"MAX_KDIGO_1st72hICU"]   <- max(curr_updated_KDIGO_df[,"KDIGO"])
KDIGO_df[i,"LAST_KDIGO_1st72hICU"]  <- curr_updated_KDIGO_df[which(curr_updated_KDIGO_df[,"Scr_Time"] == last_time_point),"KDIGO"]
KDIGO_df[i,"Admit_KDIGO_ICU"] <- curr_updated_KDIGO_df[which(curr_updated_KDIGO_df[,"Scr_Time"] == curr_admit_scr_time),"KDIGO"]
}
}
write.csv(KDIGO_df,paste0(outdir,"All_KDIGO_df.csv"))
#Get features
MAP_d1_Low <- get_raw_var_values_2options_func(raw_Vitals_df,analysis_ID,"MAP_D1_LOW",
"ART_MEAN_D1_LOW_VALUE","CUFF_MEAN_D1_LOW_VALUE")
MAP_d1_High <- get_raw_var_values_2options_func(raw_Vitals_df,analysis_ID,"MAP_D1_HIGH",
"ART_MEAN_D1_HIGH_VALUE","CUFF_MEAN_D1_HIGH_VALUE")
Temp_d1_Low <- get_raw_var_values_1option_func(raw_Vitals_df,analysis_ID,"Temperature_D1_LOW","TEMPERATURE_D1_LOW_VALUE")
Temp_d1_High <- get_raw_var_values_1option_func(raw_Vitals_df,analysis_ID,"Temperature_D1_HIGH","TEMPERATURE_D1_HIGH_VALUE")
#Convert to celsius
Temp_d1_Low[,"Temperature_D1_LOW"] <- (Temp_d1_Low[,"Temperature_D1_LOW"] -32)*(5/9)
Temp_d1_High[,"Temperature_D1_HIGH"] <- (Temp_d1_High[,"Temperature_D1_HIGH"] -32)*(5/9)
HR_d1_Low <- get_raw_var_values_1option_func(raw_Vitals_df,analysis_ID,"HR_D1_LOW","HEART_RATE_D1_LOW_VALUE")
HR_d1_High <- get_raw_var_values_1option_func(raw_Vitals_df,analysis_ID,"HR_D1_HIGH","HEART_RATE_D1_HIGH_VALUE")
All_Vital_df <- cbind(MAP_d1_Low,MAP_d1_High,Temp_d1_Low,Temp_d1_High,HR_d1_Low,HR_d1_High)
All_Vital_df <- All_Vital_df[,-c(3,5,7,9,11)] #remove duplicated columns
write.csv(All_Vital_df,paste0(outdir,"All_Vital_df.csv"))
check <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features/uky/clinical_model_make.csv",stringsAsFactors = F)
check$MAP_low
quantile(check$MAP_low)
quantile(check$MAP_low,c(0.05))
check2 <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features/uky/base_model_ALL_FEATURES.csv",stringsAsFactors = F)
check2 <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features_candidates/uky/base_model_ALL_FEATURES.csv",stringsAsFactors = F)
quantile(check2$MAP_low,c(0.05))
quantile(check2$MAP_low,c(0.05),na.rm = T)
which(check2$STUDY_PATIENT_ID %in% check$STUDY_PATIENT_ID)
check2 <- check2[which(check2$STUDY_PATIENT_ID %in% check$STUDY_PATIENT_ID),]
quantile(check2$MAP_low,c(0.05),na.rm = T)
quantile(check2$MAP_low,c(0,0.05),na.rm = T)
check_utsw <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features_candidates/utsw/base_model_ALL_FEATURES.csv",stringsAsFactors = F)
quantile(check_utsw$MAP_low,c(0,0.05),na.rm = T)
quantile(check2$MAP_low,c(0,0.05))
quantile(check2$MAP_low,c(0,0.05),na.rm = T)
quantile(check$MAP_low,c(0,0.05),na.rm = T)
View(check)
check <- read.csv("/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features/uky/clinical_model_make_nonorm.csv",stringsAsFactors = F)
quantile(check$MAP_low,c(0,0.05),na.rm = T)
quantile(check$Bicarbonate_Low,c(0,0.05),na.rm = T)
quantile(check$BUN,c(0,0.05),na.rm = T)
quantile(check$FiO2_High,c(0,0.05),na.rm = T)
quantile(check$HeartRate_High,c(0,0.05),na.rm = T)
quantile(check$pCO2_high,c(0,0.05),na.rm = T)
quantile(check2$Potassium_low,c(0,0.05),na.rm = T)
quantile(check2$Potassium_low,c(0,0.995),na.rm = T)
quantile(check$Potassium_low,c(0,0.995),na.rm = T)
quantile(check2$Potassium_low,c(0,0.995),na.rm = T)
quantile(check2$Respiration_low,c(0,0.995),na.rm = T)
quantile(check2$Respiration_high,c(0,0.995),na.rm = T)
quantile(check$Respiration_high,c(0,0.995),na.rm = T)
quantile(check$Temperature_low,c(0,0.995),na.rm = T)
quantile(check2$WBC_low,c(0,0.995),na.rm = T)
quantile(check2$Weight,c(0,0.995),na.rm = T)
quantile(check2$MAP_low,c(0,0.995),na.rm = T)
quantile(check2$MAP_low,c(0,0.05),na.rm = T)
which(check2$MAP_low<=40)
check2[which(check2$MAP_low < 40)]
check2$MAP_low[which(check2$MAP_low < 40)]
check2$MAP_low[which(check2$MAP_low < 40)] <- NA
quantile(check2$MAP_low,c(0,0.05),na.rm = T)
mean(check2$MAP_low,c(0,0.05),na.rm = T)
mean(check2$MAP_low,na.rm = T)
#                       4. Potassium D1 High/Low
#                       5. Hematocrit D1 High/Low
#                       6. Hemoglobin D1 High/Low
#                       7. WBC D1 High/Low
#                       8. BUN D0-D3 High (Take the max of d0 to d3 high)
#                       9. Bicarbonate D1 High/Low
#Load UK raw LABS_SET2
#Features to extract :  1. Albumin (NOT SURE is high or low and on which day)
#                       2. Lactate (NOT SURE is high or low and on which day)
##########################################################################################
raw_LAB1_df$BUN_D0TOD3_HIGH_VALUE <- NA
raw_LAB1_df$BUN_D0TOD3_HIGH_VALUE <- NA
for (i in 1:nrow(raw_LAB1_df)){
curr_df <-  raw_LAB1_df[i,c("BUN_D0_HIGH_VALUE","BUN_D1_HIGH_VALUE","BUN_D2_HIGH_VALUE","BUN_D3_HIGH_VALUE")]
if (all(is.na(curr_df)==F)){  #if at least one not NA
curr_max <- max(curr_df, na.rm = T)
}else{ #if all NA
curr_max <- NA
}
raw_LAB1_df$BUN_D0TOD3_HIGH_VALUE[i] <- curr_max
}
#Get features
Bilirubin_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bilirubin_D1_HIGH","BILIRUBIN_D1_HIGH_VALUE")
PLATELETS_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Platelets_D1_LOW","PLATELETS_D1_LOW_VALUE")
SODIUM_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Sodium_D1_LOW","SODIUM_D1_LOW_VALUE")
SODIUM_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Sodium_D1_HIGH","SODIUM_D1_HIGH_VALUE")
Potassium_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Potassium_D1_LOW","POTASSIUM_D1_LOW_VALUE")
Potassium_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Potassium_D1_HIGH","POTASSIUM_D1_HIGH_VALUE")
Hematocrit_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hematocrit_D1_LOW","HEMATOCRIT_D1_LOW_VALUE")
Hematocrit_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hematocrit_D1_HIGH","HEMATOCRIT_D1_HIGH_VALUE")
Hemoglobin_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hemoglobin_D1_LOW","HEMOGLOBIN_D1_LOW_VALUE")
Hemoglobin_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Hemoglobin_D1_HIGH","HEMOGLOBIN_D1_HIGH_VALUE")
WBC_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"WBC_D1_LOW","WBC_D1_LOW_VALUE")
WBC_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"WBC_D1_HIGH","WBC_D1_HIGH_VALUE")
BUN_d0tod3_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"BUN_D0TOD3_HIGH","BUN_D0TOD3_HIGH_VALUE")
CO2_d1_Low <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bicarbonate_D1_LOW","CO2_D1_LOW_VALUE")
CO2_d1_High <- get_raw_var_values_1option_func(raw_LAB1_df,analysis_ID,"Bicarbonate_D1_HIGH","CO2_D1_HIGH_VALUE")
Albumin <- get_raw_var_values_1option_func(raw_LAB2_df,analysis_ID,"Albumin","ALBUMIN_VALUE")
Lactate <- get_raw_var_values_1option_func(raw_LAB2_df,analysis_ID,"Lactate","LACTATE_SYRINGE_ION_VALUE")
All_LAB_df <- cbind(Bilirubin_d1_High,PLATELETS_d1_Low,SODIUM_d1_Low,SODIUM_d1_High,
Potassium_d1_Low,Potassium_d1_High,Hematocrit_d1_Low,Hematocrit_d1_High,
Hemoglobin_d1_Low,Hemoglobin_d1_High,WBC_d1_Low,WBC_d1_High,BUN_d0tod3_High,
CO2_d1_Low,CO2_d1_High,Albumin,Lactate)
All_LAB_df <- All_LAB_df[,-seq(3,33,2)] #remove duplicated columns
write.csv(All_LAB_df,paste0(outdir,"All_LAB_df.csv"))
#get features
po2_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PO2_D1_LOW","PO2_D1_LOW_VALUE")
po2_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PO2_D1_HIGH","PO2_D1_HIGH_VALUE")
pco2_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PCO2_D1_LOW","PCO2_D1_LOW_VALUE")
pco2_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PCO2_D1_HIGH","PCO2_D1_HIGH_VALUE")
ph_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PH_D1_LOW","PH_D1_LOW_VALUE")
ph_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PH_D1_HIGH","PH_D1_HIGH_VALUE")
All_BloodGAS_df <- cbind(po2_d1_Low,po2_d1_High,pco2_d1_Low,pco2_d1_High,ph_d1_Low,ph_d1_High)
All_BloodGAS_df <- All_BloodGAS_df[,-seq(3,11,2)] #remove duplicated columns
write.csv(All_BloodGAS_df,paste0(outdir,"All_BloodGAS_df.csv"))
View(All_BloodGAS_df)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
taylor_UK_data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/features_candidates/uky/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/TAKI_Feature/rawData_processed/uky/"
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load ADMISSION_INDX
raw_ADMISSION_INDX_df <- read.csv(paste0(raw_dir,"ADMISSION_INDX.csv"),stringsAsFactors = F)
#Time Format
raw_ADMISSION_INDX_df$ICU_ADMIT_DATE <-  mdy_hm(raw_ADMISSION_INDX_df$ICU_ADMIT_DATE)
raw_ADMISSION_INDX_df$ICU_DISCHARGE_DATE <-  mdy_hm(raw_ADMISSION_INDX_df$ICU_DISCHARGE_DATE)
raw_ADMISSION_INDX_df$HOSP_ADMIT_DATE <-  mdy_hm(raw_ADMISSION_INDX_df$HOSP_ADMIT_DATE)
raw_ADMISSION_INDX_df$HOSP_DISCHARGE_DATE <-  mdy_hm(raw_ADMISSION_INDX_df$HOSP_DISCHARGE_DATE)
#'@NOTE: there are ICU admit time before hosp admit time (761)
check <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df$ICU_ADMIT_DATE < raw_ADMISSION_INDX_df$HOSP_ADMIT_DATE),]
#2.Load RENAL_REPLACE_THERAPY.csv
raw_RENAL_REPLACE_THERAPY_df <- read.csv(paste0(raw_dir,"RENAL_REPLACE_THERAPY.csv"),stringsAsFactors = F)
#3.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"DEMOGRAPHICS_INDX.csv"),stringsAsFactors = F)
raw_demo_df <- raw_demo_df[!duplicated(raw_demo_df[,c("STUDY_PATIENT_ID","GENDER","RACE")]),] ##remove duplicate rows
#4. Load raw DOB data
raw_DOB_df <- read.csv(paste0(raw_dir,"DOB.csv"),stringsAsFactors = F)
raw_DOB_df <- raw_DOB_df[!duplicated(raw_DOB_df[,c("STUDY_PATIENT_ID","DOB")]),] ##remove duplicate rows
#5.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"SCR_ALL_VALUES.csv"),stringsAsFactors = F)
raw_SCR_df <- raw_SCR_df[-which(is.na(raw_SCR_df$SCR_VALUE) == T),] #remove NA values
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#6.Load CLINICAL_VITALS
raw_Vitals_df <- read.csv(paste0(raw_dir,"CLINICAL_VITALS.csv"),stringsAsFactors = F)
#7.Load raw data
raw_LAB1_df <- read.csv(paste0(raw_dir,"LABS_SET1.csv"),stringsAsFactors = F)
raw_LAB2_df <- read.csv(paste0(raw_dir,"LABS_SET2.csv"),stringsAsFactors = F)
#8.Load raw data
raw_BLOOD_GAS_df <- read.csv(paste0(raw_dir,"BLOOD_GAS.csv"),stringsAsFactors = F)
#9.Load raw data
raw_CLINICAL_OTHERS_df <- read.csv(paste0(raw_dir,"CLINICAL_OTHERS.csv"),stringsAsFactors = F)
#10. Load raw Charlson data
raw_charlson_df <- read.csv(paste0(raw_dir,"CHARLSON_SCORE.csv"),stringsAsFactors = F)
#11. Load raw ELIXHAUSER_SCORE data
raw_ELIXHAUSER_df <- read.csv(paste0(raw_dir,"ELIXHAUSER_SCORE.csv"),stringsAsFactors = F)
#12. Load raw DIAGNOSIS data
raw_DIAGNOSIS_df <- read.csv(paste0(raw_dir,"DIAGNOSIS.csv"),stringsAsFactors = F)
#13.ORGANSUPP_VENT
raw_ORGANSUPP_VENT_df <- read.csv(paste0(raw_dir,"ORGANSUPP_VENT.csv"),stringsAsFactors = F)
#14.ORGANSUPP_ECMO
raw_ORGANSUPP_ECMO_df <- read.csv(paste0(raw_dir,"ORGANSUPP_ECMO.csv"),stringsAsFactors = F)
#15.ORGANSUPP_IABP
raw_ORGANSUPP_IABP_df <- read.csv(paste0(raw_dir,"ORGANSUPP_IABP.csv"),stringsAsFactors = F)
#16.ORGANSUPP_VAD
raw_ORGANSUPP_VAD_df <- read.csv(paste0(raw_dir,"ORGANSUPP_VAD.csv"),stringsAsFactors = F)
#17.MEDICATIONS_INDX
raw_MEDICATIONS_df <- read.csv(paste0(raw_dir,"MEDICATIONS_INDX.csv"),stringsAsFactors = F)
#18.IO
raw_IO_df <- read.csv(paste0(raw_dir,"IO_TOTALS.csv"),stringsAsFactors = F)
#19. URINE_OUTPUT
raw_URINE_OUTPUT_df <- read.csv(paste0(raw_dir,"URINE_OUTPUT.csv"),stringsAsFactors = F)
#20. SURGERY_INDX
raw_SURGERY_INDX_df <- read.csv(paste0(raw_dir,"SURGERY_INDX.csv"),stringsAsFactors = F)
#21. ESRD_STATUS
raw_ESRD_STATUS_Manually_df <- read.csv(paste0(raw_dir,"ESRD_MANUAL_REVISION.csv"),stringsAsFactors = F)
colnames(raw_ESRD_STATUS_Manually_df)[2:4] <- paste0("Manual_",colnames(raw_ESRD_STATUS_Manually_df)[2:4])
raw_USRDS_ESRD_DATE_df <- read.csv(paste0(raw_dir,"USRDS_ESRD.csv"),stringsAsFactors = F)
colnames(raw_USRDS_ESRD_DATE_df)[2] <- paste0("USRDS_",colnames(raw_USRDS_ESRD_DATE_df)[2])
raw_ESRD_STATUS_df <- read.csv(paste0(raw_dir,"ESRD_STATUS.csv"),stringsAsFactors = F)
colnames(raw_ESRD_STATUS_df)[2:5] <- paste0("SCM_",colnames(raw_ESRD_STATUS_df)[2:5])
colnames(raw_ESRD_STATUS_df)[2:5]
#22. OUTCOMES_COMBINED (DOD)
raw_OUTCOMES_COMBINED <-read.csv(paste0(raw_dir,"OUTCOMES_COMBINED.csv"),stringsAsFactors = F)
##########################################################################################
#anlaysis Id for pts has hosp admition time
##########################################################################################
analysis_ID <- unique(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#1. Get time info  and DISCHARGE_DISPOSITION
#Features : HOSP dates, ICU dates , CRRT date, HD dates, HD treatments
##########################################################################################
#For multiple ICUs in one HOSP admission, use min ICU time as ICU start, max ICU imte as ICU stop
TimeInfo_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID), ncol = 11))
colnames(TimeInfo_df) <- c("STUDY_PATIENT_ID",
"HOSP_ADMIT_DATE",
"HOSP_DISCHARGE_DATE",
"min_ICU_ADMIT_DATE",
"max_ICU_DISCHARGE_DATE",
"CRRT_START_DATE",
"CRRT_STOP_DATE",
"HD_START_DATE",
"HD_STOP_DATE",
"HD_TREATMENTS",
"DISCHARGE_DISPOSITION")
for (i in 1:length(analysis_ID)){
if (i %% 1000 == 0){print(i)}
curr_id <- analysis_ID[i]
TimeInfo_df[i,"STUDY_PATIENT_ID"] <- curr_id
#curr admission indx df
curr_df <- raw_ADMISSION_INDX_df[which(raw_ADMISSION_INDX_df[,"STUDY_PATIENT_ID"] == curr_id),]
TimeInfo_df[i,"HOSP_ADMIT_DATE"] <- as.character(unique(curr_df[,"HOSP_ADMIT_DATE"]))
TimeInfo_df[i,"HOSP_DISCHARGE_DATE"] <- as.character(unique(curr_df[,"HOSP_DISCHARGE_DATE"]))
TimeInfo_df[i,"DISCHARGE_DISPOSITION"] <- unique(curr_df[,"DISCHARGE_DISPOSITION"])
if (length(TimeInfo_df[i,"HOSP_ADMIT_DATE"]) == 1){ #if one hosp admit
TimeInfo_df[i,"min_ICU_ADMIT_DATE"] <- as.character(min(curr_df[,"ICU_ADMIT_DATE"]))
TimeInfo_df[i,"max_ICU_DISCHARGE_DATE"] <- as.character(max(curr_df[,"ICU_DISCHARGE_DATE"]))
}
#curr RRT df
curr_rrt_df <- raw_RENAL_REPLACE_THERAPY_df[which(raw_RENAL_REPLACE_THERAPY_df[,"STUDY_PATIENT_ID"] == curr_id),]
if (nrow(curr_rrt_df) > 0){
TimeInfo_df[i,"CRRT_START_DATE"] <- as.character(min(curr_rrt_df[,"CRRT_START_DATE"]))
TimeInfo_df[i,"CRRT_STOP_DATE"]  <- as.character(max(curr_rrt_df[,"CRRT_STOP_DATE"]))
TimeInfo_df[i,"HD_START_DATE"]   <- as.character(min(curr_rrt_df[,"HD_START_DATE"]))
TimeInfo_df[i,"HD_STOP_DATE"]    <- as.character(max(curr_rrt_df[,"HD_STOP_DATE"]))
TimeInfo_df[i,"HD_TREATMENTS"]    <- as.character(max(curr_rrt_df[,"HD_TREATMENTS"]))
}
}
#Reforamt the omit of 00:00:00
reformat_cols <- c( "HOSP_ADMIT_DATE","HOSP_DISCHARGE_DATE","min_ICU_ADMIT_DATE","max_ICU_DISCHARGE_DATE",
"CRRT_START_DATE","CRRT_STOP_DATE","HD_START_DATE","HD_STOP_DATE")
for (i in 1:length(reformat_cols)){
curr_col <- TimeInfo_df[,reformat_cols[i]]
curr_idxes_tochange <- which(nchar(curr_col) == 10)
udpated_col <-  paste(curr_col[curr_idxes_tochange],"00:00:00")
TimeInfo_df[curr_idxes_tochange,reformat_cols[i]] <- udpated_col
}
write.csv(TimeInfo_df,paste0(outdir,"All_Timeinfo_df.csv"))
##########################################################################################
#2. Load UK raw DEMOGRAPHICS_INDX
#Features to extract :  1. Gender
#                       2. Race
#Load UK raw DOB
#Features to extract :
#                       1.DOB
#                       2.Compute Age at admision
##########################################################################################
#compute Age
raw_DOB_df$AGE <- NA
for (i in 1:nrow(raw_DOB_df)){
if (i %% 1000 ==0){print(i)}
curr_id <- raw_DOB_df[i,"STUDY_PATIENT_ID"]
curr_DOB <- raw_DOB_df[i,"DOB"]
curr_idxes <- which(TimeInfo_df[,"STUDY_PATIENT_ID"] == curr_id)
if (length(curr_idxes) > 0){
curr_hosp_start <- TimeInfo_df[curr_idxes,"HOSP_ADMIT_DATE"]
raw_DOB_df[i,"AGE"] <-  as.numeric(difftime(ymd_hms(curr_hosp_start) , ymd_hms(curr_DOB),units = "days"))/365
}
}
#Get Features
GENDER <- get_raw_var_values_1option_func(raw_demo_df,analysis_ID,"GENDER","GENDER")
RACE <- get_raw_var_values_1option_func(raw_demo_df,analysis_ID,"RACE","RACE")
AGE <- get_raw_var_values_1option_func(raw_DOB_df,analysis_ID,"AGE","AGE")
All_RACE_GENDER_df <- cbind(GENDER,RACE,AGE)
All_RACE_GENDER_df <- All_RACE_GENDER_df[,-c(3,5)] #remove duplicated columns
write.csv(All_RACE_GENDER_df,paste0(outdir,"All_RACE_GENDER_AGE_df.csv"))
#get features
po2_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PO2_D1_LOW","PO2_D1_LOW_VALUE")
po2_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PO2_D1_HIGH","PO2_D1_HIGH_VALUE")
pco2_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PCO2_D1_LOW","PCO2_D1_LOW_VALUE")
pco2_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PCO2_D1_HIGH","PCO2_D1_HIGH_VALUE")
ph_d1_Low <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PH_D1_LOW","PH_D1_LOW_VALUE")
ph_d1_High <- get_raw_var_values_1option_func(raw_BLOOD_GAS_df,analysis_ID,"PH_D1_HIGH","PH_D1_HIGH_VALUE")
All_BloodGAS_df <- cbind(po2_d1_Low,po2_d1_High,pco2_d1_Low,pco2_d1_High,ph_d1_Low,ph_d1_High)
All_BloodGAS_df <- All_BloodGAS_df[,-seq(3,11,2)] #remove duplicated columns
write.csv(All_BloodGAS_df,paste0(outdir,"All_BloodGAS_df.csv"))
##########################################################################################
#Load UK raw CLINICAL_OTHERS
#Features to extract :  1. Height
#                       2. Weight
#                       3. Respiration D1 Low/High
#                       4. GCS D1 LOW
#                       5. FIO2 D1 Low/High
##########################################################################################
#Get Features
height <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"HEIGHT_CM","HEIGHT_CM_VALUE")
weight <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"INITIAL_WEIGHT_KG","INITIAL_WEIGHT_KG")
resp_d1_Low <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"RESP_RATE_D1_LOW","RESP_RATE_D1_LOW_VALUE")
resp_d1_High <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"RESP_RATE_D1_HIGH","RESP_RATE_D1_HIGH_VALUE")
gcs_d1_low <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"GCS_D1_LOW","GLASGOW_SCORE_D1_LOW_VALUE")
fio2_d1_Low <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"FI02_D1_LOW","FI02_D1_LOW_VALUE")
fio2_d1_High <- get_raw_var_values_1option_func(raw_CLINICAL_OTHERS_df,analysis_ID,"FI02_D1_HIGH","FI02_D1_HIGH_VALUE")
All_ClinicalOthers_df <- cbind(height,weight,resp_d1_Low,resp_d1_High,gcs_d1_low,fio2_d1_Low,fio2_d1_High)
All_ClinicalOthers_df <- All_ClinicalOthers_df[,-seq(3,13,2)] #remove duplicated columns
write.csv(All_ClinicalOthers_df,paste0(outdir,"All_ClinicalOthers_df.csv"))
##########################################################################################
#Load UK raw CHARLSON_SCORE
#Features to extract :  1. Charlson
##########################################################################################
#Get Features
CHARLSON_INDEX_df <- get_raw_var_values_1option_func(raw_charlson_df,analysis_ID,"CHARLSON_INDEX","CHARLSON_INDEX")
write.csv(CHARLSON_INDEX_df,paste0(outdir,"All_CHARLSON_INDEX_df.csv"))
##########################################################################################
#Load UK raw ELIXHAUSER_SCORE
#Features to extract :  1. ELIXHAUSER_SCORE
##########################################################################################
colnames(raw_ELIXHAUSER_df)[2:32] <- gsub("ELX","Elixhauser",colnames(raw_ELIXHAUSER_df)[2:32])
ELIXHAUSER_df <- raw_ELIXHAUSER_df[which(raw_ELIXHAUSER_df[,"STUDY_PATIENT_ID"] %in% analysis_ID),]
write.csv(ELIXHAUSER_df,paste0(outdir,"All_ELIXHAUSER_df.csv"))
