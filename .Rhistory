labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 2.4), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 3), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= 2.4), linetype="solid", color="yellow", size=2) +
geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2) +
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
n
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2) +
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 1.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.25), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.7), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
#geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
plot_samples_hist(sample_stats,"Female_Proportion",propFEMALE_pop,0)
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[1,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[10,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
library(ggplot2)
get_sample_func <- function(sample_size){
sample_IDs  <- sample(data_pop[,"Student_ID"], replace=FALSE, size=sample_size)
data_sample <- data_pop[which(data_pop[,"Student_ID"] %in% sample_IDs),]
return(data_sample)
}
compute_average <- function(input_data,variable_col,cohort_name){
mean_val    <- mean(input_data[,variable_col])
#print(paste("Average", variable_col,"of", cohort_name, "is:",mean_val))
return(mean_val)
}
compute_proportion <- function(input_data,variable_col,cohort_name){
n_total          <- nrow(input_data)
n_qualified      <- length(which(input_data[,variable_col] == 1))
prop <-  n_qualified/ n_total
#print(paste(variable_col,"Proportion","of",cohort_name ,"is:",prop))
return(prop)
}
###Create population
set.seed(1)
n <- 5000
student_id <- paste0("ID", seq(1,n,1))
gpa        <- sample(c(0,0.5,1,1.5,2,2.5,3,3.5,4), replace = TRUE,size=n)      #Random generate 1000 student GPA
female     <- sample(c(0,1), replace=TRUE, size=n) #Random generate Gender student GPA
male       <- 1- female
###Population data
data_pop <- data.frame(Student_ID = student_id,GPA = gpa,FEMALE =  female, MALE = male)
##Population MEAN and proportion
meanGPA_pop <- compute_average(data_pop,"GPA","Population")
propFEMALE_pop <- compute_proportion(data_pop,"FEMALE","Population")
propMALE_pop   <- compute_proportion(data_pop,"MALE","Population")
##################################################
#Generate 10000 samples with sample size = 100
##################################################
n_samples <- 1000
sample_size <- 20
sample_data_list <- list(NA)
for (i in 1:n_samples){
set.seed(i)
sample_data_list[[i]] <- get_sample_func(sample_size)
}
example_sample_data <-  sample_data_list[[1]]
#############################################################
#Compute average GPA and female proportaion for each sample
#############################################################
sample_stats <- as.data.frame(matrix(NA, nrow = n_samples,ncol = 3))
colnames(sample_stats) <- c("Sample_NAME","GPA_Mean","Female_Proportion")
for (i in 1:n_samples){
curr_sample_data <- sample_data_list[[i]]
sample_stats[i,"Sample_NAME"]       <- paste0("Sample",i)
sample_stats[i,"GPA_Mean"]           <- compute_average(curr_sample_data,"GPA","Sample")
sample_stats[i,"Female_Proportion"] <- compute_proportion(curr_sample_data,"FEMALE","Sample")
}
plot_samples_hist <- function(sample_stats_data,variable_col,population_value,sp_value){
if(variable_col == "GPA_Mean"){
bw <- 0.01
}else{
bw <- 0.01
}
avg_of_sample_value <- mean(sample_stats_data[,variable_col])
ggplot(sample_stats_data, aes_string(x=variable_col)) +
geom_histogram(color="black", fill="white",binwidth = bw) +
geom_vline(aes(xintercept=avg_of_sample_value,color="sample"), linetype="solid", size=2) +
geom_vline(aes(xintercept=population_value, color="popuplation"), linetype="dashed", size=2) +
scale_color_manual(name = "",
values = c(sample = "orangered3", popuplation = "seagreen2"),
labels = c(paste("Mean of","Sample",variable_col),paste("Population",variable_col))) +
labs(x = paste("Sample's",variable_col)) +
geom_vline(aes(xintercept= sp_value), linetype="solid", color="yellow", size=2)
#geom_vline(aes(xintercept= 0.4), linetype="solid",  color="yellow", size=2)  +
#geom_vline(aes(xintercept= 0.6), linetype="solid",  color="yellow", size=2)
}
sp_value <- sample_stats[5241,"GPA_Mean"]
plot_samples_hist(sample_stats,"GPA_Mean",meanGPA_pop,sp_value)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
source('~/Desktop/Explain_CI.R', echo=TRUE)
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
###Mortatlity
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "/mortality/AllClinicalFeature/")
list.files(perf_dir,pattern = "Importance_*")
importance_files <- list.files(perf_dir,pattern = "Importance_*")
lapply(importance_files, read.csv)
importance_files <- list.files(perf_dir,pattern = "Importance_*",full.names = T)
lapply(importance_files, read.csv)
all_importance_df <- do.call(cbind, lapply(importance_files, read.csv))
View(all_importance_df)
importance_files
method_names <- c("LogReg","RF","SVM","XGB")
i <- 1
curr_file <- paste0(perf_dir,"Importance_",method_names[i],".csv")
curr_file
imporatnce_list <- read.csv(curr_file,stringsAsFactors = F)
perf_dir <- paste0(proj_dir, "/mortality/AllClinicalFeature")
i <- 1
curr_file <- paste0(perf_dir,"Importance_",method_names[i],".csv")
imporatnce_list <- read.csv(curr_file,stringsAsFactors = F)
perf_dir <- paste0(proj_dir, "/mortality/AllClinicalFeature/")
curr_file <- paste0(perf_dir,"Importance_",method_names[i],".csv")
imporatnce_list <- read.csv(curr_file,stringsAsFactors = F)
perf_dir <- paste0(proj_dir, "mortality/AllClinicalFeature/")
curr_file <- paste0(perf_dir,"Importance_",method_names[i],".csv")
imporatnce_list <- read.csv(curr_file,stringsAsFactors = F)
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
imporatnce_list <- read.csv(curr_file,stringsAsFactors = F)
imporatnce_list[[1]] <- read.csv(curr_file,stringsAsFactors = F)
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
imporatnce_list[[i]] <- read.csv(curr_file,stringsAsFactors = F)
}
all_importance_df <- do.call(cbind, )
all_importance_df <- do.call(cbind,imporatnce_list)
View(all_importance_df)
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb
change_feature_name_intable(curr_tb,"UrineOutput_D0toD3","Urine Output")
source("TAKI_Ultility.R")
###Mortatlity
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "mortality/AllClinicalFeature/")
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
change_feature_name_intable(curr_tb,"UrineOutput_D0toD3","Urine Output")
imporatnce_list[[i]] <- curr_tb
}
change_feature_name_intable(curr_tb,"UrineOutput_D0toD3","Urine Output")
change_listoffeature_name_intable(curr_tb)
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb <- change_listoffeature_name_intable(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
View(all_importance_df)
change_listoffeature_name_intable2 <- function(input_tb){
input_tb <- change_feature_name_intable(input_tb,"UrineOutput_D0toD3","Urine Output")
input_tb <- change_feature_name_intable(input_tb,"Vasopressor_ICUD0toD3","Vasopressor Exposure")
input_tb <- change_feature_name_intable(input_tb,"FI02_D1_HIGH","FiO2 (High)")
input_tb <- change_feature_name_intable(input_tb,"Platelets_D1_LOW","Platelets (Low)")
input_tb <- change_feature_name_intable(input_tb,"AGE","Age")
input_tb <- change_feature_name_intable(input_tb,"BUN_D0toD3_HIGH","BUN (High)")
input_tb <- change_feature_name_intable(input_tb,"HR_D1_HIGH","Heart Rate (High")
input_tb <- change_feature_name_intable(input_tb,"LAST_KDIGO_ICU_D0toD3","Last KDIGO")
input_tb <- change_feature_name_intable(input_tb,"PH_D1_LOW","pH (Low)")
input_tb <- change_feature_name_intable(input_tb,"Bilirubin_D1_HIGH","Bilirubin (High)")
input_tb <- change_feature_name_intable(input_tb,"MAX_KDIGO_ICU_D0toD3","Maximum KDIGO")
input_tb <- change_feature_name_intable(input_tb, "ECMO_ICUD0toD3","ECMO")
input_tb <- change_feature_name_intable(input_tb, "Hours_inICUD0toD3","Hours in ICU")
input_tb <- change_feature_name_intable(input_tb, "Temperature_D1_LOW","Temperature (Low)")
input_tb <- change_feature_name_intable(input_tb, "Temperature_D1_HIGH","Temperature (High)")
input_tb <- change_feature_name_intable(input_tb, "Hemoglobin_D1_LOW","Hemoglobin (Low)")
input_tb <- change_feature_name_intable(input_tb, "Admit_sCr","ICU admission sCr")
input_tb <- change_feature_name_intable(input_tb, "Sodium_D1_LOW","Sodium (Low)")
input_tb <- change_feature_name_intable(input_tb, "Peak_SCr_inICU_D0_D3","Peak SCr")
input_tb <- change_feature_name_intable(input_tb, "Sodium_D1_HIGH","Sodium (HIGH)")
return(input_tb)
}
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb <- change_listoffeature_name_intable(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
change_listoffeature_name_intable2 <- function(input_tb){
input_tb <- change_feature_name_intable(input_tb,"UrineOutput_D0toD3","Urine Output")
input_tb <- change_feature_name_intable(input_tb,"Vasopressor_ICUD0toD3","Vasopressor Exposure")
input_tb <- change_feature_name_intable(input_tb,"FI02_D1_HIGH","FiO2 (High)")
input_tb <- change_feature_name_intable(input_tb,"Platelets_D1_LOW","Platelets (Low)")
input_tb <- change_feature_name_intable(input_tb,"AGE","Age")
input_tb <- change_feature_name_intable(input_tb,"BUN_D0toD3_HIGH","BUN (High)")
input_tb <- change_feature_name_intable(input_tb,"HR_D1_HIGH","Heart Rate (High")
input_tb <- change_feature_name_intable(input_tb,"LAST_KDIGO_ICU_D0toD3","Last KDIGO")
input_tb <- change_feature_name_intable(input_tb,"PH_D1_LOW","pH (Low)")
input_tb <- change_feature_name_intable(input_tb,"Bilirubin_D1_HIGH","Bilirubin (High)")
input_tb <- change_feature_name_intable(input_tb,"MAX_KDIGO_ICU_D0toD3","Maximum KDIGO")
input_tb <- change_feature_name_intable(input_tb, "ECMO_ICUD0toD3","ECMO")
input_tb <- change_feature_name_intable(input_tb, "Hours_inICUD0toD3","Hours in ICU")
input_tb <- change_feature_name_intable(input_tb, "Temperature_D1_LOW","Temperature (Low)")
input_tb <- change_feature_name_intable(input_tb, "Temperature_D1_HIGH","Temperature (High)")
input_tb <- change_feature_name_intable(input_tb, "Hemoglobin_D1_LOW","Hemoglobin (Low)")
input_tb <- change_feature_name_intable(input_tb, "Admit_sCr","ICU admission sCr")
input_tb <- change_feature_name_intable(input_tb, "Sodium_D1_LOW","Sodium (Low)")
input_tb <- change_feature_name_intable(input_tb, "Peak_SCr_inICU_D0_D3","Peak SCr")
input_tb <- change_feature_name_intable(input_tb, "Sodium_D1_HIGH","Sodium (High)")
input_tb <- change_feature_name_intable(input_tb, "IABP_ICUD0toD3","IABP")
input_tb <- change_feature_name_intable(input_tb, "VAD_ICUD0toD3","VAD")
input_tb <- change_feature_name_intable(input_tb, "Mechanical_Hemodynamic_Support","Mechanical Hemodynamic Support")
return(input_tb)
}
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
source("TAKI_Ultility.R")
###Mortatlity
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "mortality/AllClinicalFeature/")
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
top15_importance_df <- all_importance_df[1:15,]
View(top15_importance_df)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/5_ReportImportanceFeature_inOneTable.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/5_ReportImportanceFeature_inOneTable.R', echo=TRUE)
outdir   <- paste0(proj_dir,"mortality/")
source("TAKI_Ultility.R")
###Mortatlity
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "mortality/AllClinicalFeature/")
outdir   <- paste0(proj_dir,"mortality/")
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb[,2] <- round(curr_tb[,2],2)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
top15_importance_df <- all_importance_df[1:15,]
write.csv(top15_importance_df,paste0(outdir,"Top15FeatureRanking_4Methods.csv"),row.names = F)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/5_ReportImportanceFeature_inOneTable.R', echo=TRUE)
###MAKE
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "make/AllClinicalFeature/")
outdir   <- paste0(proj_dir,"make/")
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb[,2] <- round(curr_tb[,2],2)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb[,2] <- round(curr_tb[,2],2)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
###MAKE
proj_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/CV_performance/"
perf_dir <- paste0(proj_dir, "make120_drop50/AllClinicalFeature/")
outdir   <- paste0(proj_dir,"make120_drop50/")
method_names <- c("LogReg","RF","SVM","XGB")
imporatnce_list <- list()
for (i in 1:length(method_names)){
curr_file <- paste0(perf_dir,"Importance_AVG_",method_names[i],".csv")
curr_tb <- read.csv(curr_file,stringsAsFactors = F)
curr_tb[,2] <- round(curr_tb[,2],2)
curr_tb <- change_listoffeature_name_intable2(curr_tb)
imporatnce_list[[i]] <- curr_tb
}
all_importance_df <- do.call(cbind,imporatnce_list)
top15_importance_df <- all_importance_df[1:15,]
write.csv(top15_importance_df,paste0(outdir,"Top15FeatureRanking_4Methods.csv"),row.names = F)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R', echo=TRUE)
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/3F_Compute_Reclass_Stats.R', echo=TRUE)
source("TAKI_Ultility.R")
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/"
###############################################################
#1. For mortality, compare models with IDI, NRI
###############################################################
#1. For UK
perf_dir <- paste0(proj_dir,"CV_performance/mortality/")
baseline_model_file  <- "/SOFA/Prediction_RF.csv"
comprison_model_file1 <- "/APACHE/Prediction_RF.csv"
comprison_model_file2 <- "/SelectedClinicalFeature15Vars/Prediction_RF.csv"
reclass_res1 <- compute_IDI_NRI_func(perf_dir,baseline_model_file,comprison_model_file1,cutoff = c(0,0.5,1))
source('~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/5_ReportImportanceFeature_inOneTable.R', echo=TRUE)
