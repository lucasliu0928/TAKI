View(comb_df_withLabel)
i <- 1
top7_feature_names <- rownames(top7_features_contribution_df)
top7_feature_contributions<- top7_features_contribution_df[,"Dim.1"]
top7_feature_names
top7_feature_contributions
comb_df_withLabel[i,top7_feature_names]
curr_pt_vals <- comb_df_withLabel[i,top7_feature_names]
curr_pt_vals
curr_pt_vals*top7_feature_contributions
0.53*9.09
1.324286*8.649826258
102.6731*6.402082199
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
return(x)
}
norm_minmax
#'@TODO
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                 <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#First get normalized top 7 feature value for each sample
normalise_model_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
View(normalise_model_data)
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(comb_df_withLabel)
library(Rtsne)
library("FactoMineR")
library("factoextra")
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
return(x)
}
################################################################################
#Data dir
################################################################################
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/AKID_Project2/Intermediate_Data/practice_data_092721/onRRT_analysis/sample_level_data/"
#data dir
data_dir1  <- paste0(proj_dir, "AVG_MAX_MIN_Feature/")
data_dir2  <- paste0(proj_dir, "static_features/")
outdir <- paste0(proj_dir,"/Z_PCA_data/")
########################################################################################################
#Load labels
########################################################################################################
label_df <- read.csv(paste0(proj_dir,"FinalIDs_spOutcome.csv"),stringsAsFactors = F)
########################################################################################################
#1. Load all stationary feature data
########################################################################################################
avg_max_min_df <- read.csv(paste0(data_dir1,"All_AVGMAXMIN_onRRT_Imputed.csv"),stringsAsFactors = F)
static_df      <- read.csv(paste0(data_dir2,"samples_static_features_onRRT.csv"),stringsAsFactors = F)
#Inpute static with median
for (j in 3:ncol(static_df)){
curr_col <- static_df[,j]
na_indxes <- which(is.na(curr_col)==T)
if (length(na_indxes) > 0){
static_df[na_indxes,j] <- median(static_df[,j],na.rm = T)
}
}
#MAtch ID order
match_order <- match(avg_max_min_df[,"SAMPLE_ID"],static_df[,"SAMPLE_ID"])
comb_df <- cbind(static_df[match_order,-1],avg_max_min_df[,-1])
rownames(comb_df) <- comb_df$SAMPLE_ID
comb_df <- comb_df[,-1]
match_order2 <- match(label_df[,"SAMPLE_ID"],rownames(comb_df))
comb_df_withLabel <- cbind(comb_df,label_df[,c("sample_death_in24h")])
colnames(comb_df_withLabel)[ncol(comb_df_withLabel)] <- "sample_death_in24h"
#########################################################
#Input df, remove duplicated rows
#########################################################
#remove duplicated rows for tSNE and PCA
comb_df_withLabel <- comb_df_withLabel[!duplicated(comb_df_withLabel[,-ncol(comb_df_withLabel)]),]
input_df <- comb_df_withLabel[,-ncol(comb_df_withLabel)]
#Run PCA
res.pca <- PCA(input_df, graph = FALSE)
eig.val <- get_eigenvalue(res.pca)
write.csv(eig.val,paste0(outdir,"PCA_Eigenvalues.csv"))
#Perc of explained Variation
p <- fviz_eig(res.pca, ncp = 10, addlabels = TRUE, ylim = c(0, max(eig.val[,2] + eig.val[,2]/5)))
png(paste0(outdir,"PCA_Explained_Var.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#Get varaible contribution
var <- get_pca_var(res.pca)
var_contribution <- as.data.frame(var$contrib)
write.csv(var_contribution,paste0(outdir,"PCA_Variable_Contribution.csv"))
#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
#'@TODO
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                  <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data)
colnames(normed_data) <- paste0("Normed",colnames(normed_data))
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data)
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
colnames(normed_data)
comb_df_withLabel[,colnames(normed_data)] <- normed_data
normed_data
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
normed_data
View(normed_data)
comb_df_withLabel[,top7_features]
norm_minmax
norm_minmax <- function(x){
(x- min(x,na.rm = T)) /(max(x,na.rm = T)-min(x,na.rm = T))
}
#First get normalized top 7 feature value for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
comb_df_withLabel[,colnames(normed_data)] <- normed_data
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
i <- 1
curr_pt_vals <- comb_df_withLabel[i,top7_feature_names]
curr_pt_vals <- comb_df_withLabel[i,top7_features]
curr_pt_vals
top7_feature_contributions
curr_pt_vals*top7_features_contributions
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
0.53curr_pt_vals
curr_pt_vals
curr_pt_vals*top7_features_contributions
0.1092553  *8.64
0.30674*6.987387185
0.3087526*6.40208
sum(curr_pt_vals*top7_features_contributions)
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
curr_wss
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
for (i in 1:nrow(comb_df_withLabel)){
if (i %% 1000 == 0){print(i)}
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
comb_df_withLabel[i,"WeightedSumScore_Dim1Top7Fs"] <- curr_wss
}
colnames(comb_df_withLabel)
wss_df <- comb_df_withLabel[,c(paste0("Normed_",top7_features),"WeightedSumScore_Dim1Top7Fs","sample_death_in24h")]
write.csv(wss_df,paste0(outdir,"WSS_Scores.csv"))
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
top_fs <- c(feature_col1,feature_col2,feature_col3)
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
wss_df <- comb_df_withLabel[,top7_features,
c(paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
View(wss_df)
wss_df <- comb_df_withLabel[,top7_features,
c(paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
wss_df <- comb_df_withLabel[, c(top7_features,
paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
View(wss_df)
write.csv(wss_df,paste0(outdir,"WSS_Scores.csv"))
#'@TODO:
#######################################################################################################
#5. Violin Plot
#######################################################################################################
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=12),
axis.title=element_text(size=14,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Violin_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#6. histogram Plot
#######################################################################################################
for (i in 1:length(top_fs)){
if (i %% 10 == 0){print(i)}
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 800)
print(p)
dev.off()
}
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
top_fs <- c(feature_col1,feature_col2,feature_col3)
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
#geom_violin() +
geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Box_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#5. Violin Plot
#######################################################################################################
for (i in 1:length(top_fs)){
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=outcome_col, y=feature_col, color=outcome_col)) +
geom_violin() +
#geom_boxplot() +
stat_summary(fun=mean, geom="point", shape=23, size=2) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Violin_Plot/",feature_col,".png"),res = 150,width = 500,height = 500)
print(p)
dev.off()
}
#######################################################################################################
#6. histogram Plot
#######################################################################################################
for (i in 1:length(top_fs)){
if (i %% 10 == 0){print(i)}
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color=outcome_col)) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=10),
axis.title=element_text(size=10,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 800)
print(p)
dev.off()
}
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 30),]  #when min_scr > 3,  NEG:4263,POS:186
table(wss_obv_neg_df$sample_death_in24h)
View(wss_obv_neg_df)
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 22),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 25),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 20),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
#'@TODO
####################################################################################################
##Get sample IDs of obvious negtives samples on WeightedSumScore_Dim1Top7Fs
####################################################################################################
wss_obv_neg_df <- comb_df_withLabel[which(comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] > 20),]
table(wss_obv_neg_df$sample_death_in24h) #925   7
4411/152
write.csv(wss_obv_neg_df,paste0(outdir,"OBV_NEG_SAMPLE_IDs_AndData.csv"))
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/UH3 cancer recurrence/ReCAPSE-dev/src/R_model_output/xgboost/"
source("Recapse_Ultility.R")
compute_sp_label_ratio <- function(in_data){
label_tb <- table(in_data[,"Label"])
ct_total <- nrow(in_data)
ct_pre   <- label_tb["Pre"]
ct_post  <- label_tb["Post"]
neg_post_ratio <- round(ct_pre/ct_post,10)
ct_tb <- data.frame("Total" = ct_total,"Pre"=ct_pre,"Post"=ct_post,"Ratio"=neg_post_ratio)
rownames(ct_tb) <- NULL
return(ct_tb)
}
################################################################################
#Set up parallel computing envir
################################################################################
numCores <- detectCores() # get the number of cores available
print(numCores)
registerDoParallel(numCores)  # use multicore, set to the number of our cores
################################################################################
#Data dir
################################################################################
#onHPC
proj_dir  <- "/recapse/intermediate_data/"
#local
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/ReCAPSE_Project/ReCAPSE_Intermediate_Data/0610_21/"
#data dir
data_dir  <- paste0(proj_dir, "12B_TopPCAFeature_ModelReady_TrainData/WithPossibleMonthsHasNoCodes/")
outdir   <- paste0(proj_dir, "12D_ExclusionSamples/WithPossibleMonthsHasNoCodes/")
########################################################################################################
#1. Load all pts model data with four top features
########################################################################################################
#1A. Load data
load(file = paste0(data_dir, "4F_ModelReady_TrainData.rda"))
#2B. Orginal NEG POS ratio
compute_sp_label_ratio(model_data_4f)
########################################################################################################
#2.Find samples < threshold OR > threshold by Most contributed feature by examing boxplot
#  Compute neg:pos ratio for each feature
########################################################################################################
#2A. cumul_ratio_CCS_PROC_202
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_202"] < 0)
sample1_data  <- model_data_4f[sample1_idxes,]
compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
compute_sp_label_ratio(afterRemoval_data)
#2B. cumul_ratio_CCS_PROC_227
threshold_list <- seq(2,7.5,0.5)
table_list <- list()
for (i in 1:length(threshold_list)){
curr_th <- threshold_list[i]
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_227"] > curr_th)
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res <- compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(afterRemoval_data)
final_res <- rbind(sp_res,after_res)
rownames(final_res) <-c(paste0("Sample"," > Threshold ",curr_th),"After Removal")
table_list[[i]] <- final_res
}
all_table <- do.call(rbind,table_list)
#2C. months_since_dx
threshold_list <- seq(24,60,1)
table_list <- list()
for (i in 1:length(threshold_list)){
curr_th <- threshold_list[i]
sample1_idxes <- which(model_data_4f[,"months_since_dx"] < curr_th)
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res <- compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(afterRemoval_data)
final_res <- rbind(sp_res,after_res)
rownames(final_res) <-c(paste0("Sample"," < Threshold ",curr_th),"After Removal")
table_list[[i]] <- final_res
}
all_table <- do.call(rbind,table_list)
#2C. Enrolled_year
threshold_list <- seq(2004,2020,1)
table_list <- list()
for (i in 1:length(threshold_list)){
curr_th <- threshold_list[i]
sample1_idxes <- which(model_data_4f[,"Enrolled_year"] > curr_th)
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res <- compute_sp_label_ratio(sample1_data)
afterRemoval_data <- model_data_4f[-sample1_idxes,]
after_res <- compute_sp_label_ratio(afterRemoval_data)
final_res <- rbind(sp_res,after_res)
rownames(final_res) <-c(paste0("Sample"," > Threshold ",curr_th),"After Removal")
table_list[[i]] <- final_res
}
all_table <- do.call(rbind,table_list)
View(all_table)
########################################################################################################
#4.Find best combination of threhosld for featrues
#  Best: good precision of selected negtive samples, neg:pos ratio of after exclusion is OK (Not too many neg or pos)
########################################################################################################
thres1_list <- seq(5,7.5,0.5)
thres2_list <- seq(24,48,1) #24 to 60
n_thres1 <- length(thres1_list)
n_thres2 <- length(thres2_list)
n_comb   <- n_thres1*n_thres2
print(n_comb)
prec_ratio_tb <- as.data.frame(matrix(NA, nrow = n_comb,ncol = 6))
colnames(prec_ratio_tb) <- c("Threshold_PROC202","Threshold_PROC227","Threshold_months_since_dx",
"NEG_Percentage_SelectedSamples", #this is also the precision of negtives
"NEGtoPOS_Ratio_SelectedSamples",
"NEGtoPOS_Ratio_AfterExclusion")
ct <- 1
i <- 1
if(i %% 2 == 0){print(i)}
thres1 <- thres1_list[i]
j <- 1
thres2 <- thres2_list[j]
prec_ratio_tb[ct,"Threshold_PROC202"] <- -1
prec_ratio_tb[ct,"Threshold_PROC227"] <- thres1
prec_ratio_tb[ct,"Threshold_months_since_dx"] <- thres2
#Data to be treated as negatives
sample1_idxes <- which(model_data_4f[,"cumul_ratio_CCS_PROC_202"] == -1 |
model_data_4f[,"cumul_ratio_CCS_PROC_227"] > thres1 |
model_data_4f[,"months_since_dx"] < thres2 )
sample1_data  <- model_data_4f[sample1_idxes,]
sp_res        <- compute_sp_label_ratio(sample1_data)
sp_res
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#3.Load SCR
raw_SCR_df <- read.csv(paste0(raw_dir,"SCR_ALL_VALUES.csv"),stringsAsFactors = F)
raw_SCR_df <- raw_SCR_df[-which(is.na(raw_SCR_df$SCR_VALUE) == T),] #remove NA values
raw_SCR_df <- raw_SCR_df[!duplicated(raw_SCR_df[,c("STUDY_PATIENT_ID","SCR_ENTERED")]),] #remove duplicated entry
#3. Load demo for resolve EPI
All_RACE_GENDER_df <-read.csv(paste0(outdir,"All_RACE_GENDER_AGE_df.csv"),stringsAsFactors = F)
#Recode Race and Gender
All_RACE_GENDER_df$Gender_Male <- NA
male_idxes <- which(All_RACE_GENDER_df[,"GENDER"] == "M")
All_RACE_GENDER_df$Gender_Male[male_idxes] <- 1
All_RACE_GENDER_df$Gender_Male[-male_idxes] <- 0
All_RACE_GENDER_df$Race_Black <- NA
black_idxes <- which(All_RACE_GENDER_df[,"RACE"] == "BLACK/AFR AMERI")
All_RACE_GENDER_df$Race_Black[black_idxes] <- 1
All_RACE_GENDER_df$Race_Black[-black_idxes] <- 0
##########################################################################################
#anlaysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
KDIGO_df_new <- read.csv(paste0(outdir,"KDIGO_MAX_ICU_D0D7_df.csv"),stringsAsFactors = F)
KDIGO_df <- read.csv(paste0(outdir,"KDIGO_MAX_ICU_D0D7_df.csv"),stringsAsFactors = F)
#onset AKI numbers
#8482
AKI_onset_d0d1 <- length(which(KDIGO_df$MAX_KDIGO_ICU_D0toD1 %in% c(1,2,3,4)))
#1319
AKI_onset_d2d3 <- length(which((is.na(KDIGO_df$MAX_KDIGO_ICU_D0toD1)==T |
KDIGO_df$MAX_KDIGO_ICU_D0toD1 == 0) &
KDIGO_df$MAX_KDIGO_ICU_D2toD3 %in% c(1,2,3,4)))
#645
AKI_onset_d4d7 <- length(which((is.na(KDIGO_df$MAX_KDIGO_ICU_D0toD1)==T | KDIGO_df$MAX_KDIGO_ICU_D0toD1 == 0) &
(is.na(KDIGO_df$MAX_KDIGO_ICU_D2toD3)==T | KDIGO_df$MAX_KDIGO_ICU_D2toD3 == 0) &
KDIGO_df$MAX_KDIGO_ICU_D4toD7 %in% c(1,2,3,4)))
library(lubridate)
library(data.table)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/utsw/"
KDIGO_df <- read.csv(paste0(outdir,"KDIGO_MAX_ICU_D0D7_df.csv"),stringsAsFactors = F)
#onset AKI numbers
#2322
AKI_onset_d0d1 <- length(which(KDIGO_df$MAX_KDIGO_ICU_D0toD1 %in% c(1,2,3,4)))
#435
AKI_onset_d2d3 <- length(which((is.na(KDIGO_df$MAX_KDIGO_ICU_D0toD1)==T |
KDIGO_df$MAX_KDIGO_ICU_D0toD1 == 0) &
KDIGO_df$MAX_KDIGO_ICU_D2toD3 %in% c(1,2,3,4)))
#215
AKI_onset_d4d7 <- length(which((is.na(KDIGO_df$MAX_KDIGO_ICU_D0toD1)==T | KDIGO_df$MAX_KDIGO_ICU_D0toD1 == 0) &
(is.na(KDIGO_df$MAX_KDIGO_ICU_D2toD3)==T | KDIGO_df$MAX_KDIGO_ICU_D2toD3 == 0) &
KDIGO_df$MAX_KDIGO_ICU_D4toD7 %in% c(1,2,3,4)))
##########################################################################################
#'@Added010722             #CKD Version 2 using ICD codes
#'ICD9:   585.X
#'ICD10 : N18.X
#'##########################################################################################
icd9_ckd <- paste0("585.",seq(1,9))
icd10_ckd <- paste0("N18.",seq(1,9))
icd9_ckd
