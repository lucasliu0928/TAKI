#plot
p <- fviz_pca_ind(res.pca,
geom.ind = "point", # show points only (nbut not "text")
col.ind = as.factor(comb_df_withLabel$sample_death_in24h), # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE, # Concentration ellipses
legend.title = "Groups")
png(paste0(outdir,"PCA_2DPlot.png"),res = 150,width = 1800,height = 1200)
print(p)
dev.off()
####################################################################################################
# Run tsne
####################################################################################################
# set.seed(42)
# tsne_out <- Rtsne(input_df,pca=TRUE,perplexity=30) # Run TSNE
#
# tsne_out_df <- data.frame(Y = tsne_out$Y,
#                           Class_label = comb_df_withLabel$sample_death_in24h,
#                           ID = rownames(input_df))
#
# p <- ggplot(tsne_out_df, aes(x=Y.1, y=Y.2,color = Class_label)) +
#   geom_point(size = 5) +
#   theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
#                      panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
#   theme(legend.position="none",legend.title = element_blank(),legend.text=element_text(size=20)) +
#   theme(axis.text = element_text(size = 20),axis.title=element_text(size=20,face="bold")) +
#   guides(color = guide_legend(nrow = 3, byrow = TRUE)) +
#   scale_x_continuous(name ="Tsne Dim1",limits = c(min(tsne_out_df$Y.1),max(tsne_out_df$Y.1))) +
#   scale_y_continuous(name ="Tsne Dim2",limits = c(min(tsne_out_df$Y.2),max(tsne_out_df$Y.2)))
#
# png(paste0(outdir,"tSNE_2DPlot.png"),res = 150,width = 1800,height = 1200)
# print(p)
# dev.off()
####################################################################################################
#Add weighted sum scores for each sample, based on the contribution of top 7 features on Dim 1
####################################################################################################
top7_features_contribution_df  <- var_contribution[order(var_contribution[,"Dim.1"],decreasing = T)[1:7],]
top7_features                  <- rownames(top7_features_contribution_df)
top7_features_contributions    <- top7_features_contribution_df[,"Dim.1"]
#Normalized feature values for each sample
normed_data <- as.data.frame(lapply(comb_df_withLabel[,top7_features], norm_minmax))
colnames(normed_data) <- paste0("Normed_",colnames(normed_data))
comb_df_withLabel[,colnames(normed_data)] <- normed_data
#Compute weightes sum
comb_df_withLabel[,"WeightedSumScore_Dim1Top7Fs"] <- NA
for (i in 1:nrow(comb_df_withLabel)){
if (i %% 1000 == 0){print(i)}
curr_pt_vals <- comb_df_withLabel[i,paste0("Normed_",top7_features)]
curr_wss     <- sum(curr_pt_vals*top7_features_contributions) #weighted sum
comb_df_withLabel[i,"WeightedSumScore_Dim1Top7Fs"] <- curr_wss
}
wss_df <- comb_df_withLabel[, c(top7_features,
paste0("Normed_",top7_features),
"WeightedSumScore_Dim1Top7Fs",
"sample_death_in24h")]
#write.csv(wss_df,paste0(outdir,"WSS_Scores.csv"))
####################################################################################################
#Boxplot most contributed feature
####################################################################################################
outcome_col <- "sample_death_in24h"
feature_col1 <- "MIN_Scr"
feature_col2 <- "AVG_Bicarbonate"
feature_col3 <- "WeightedSumScore_Dim1Top7Fs"
comb_df_withLabel[,outcome_col] <- as.factor(comb_df_withLabel[,outcome_col])
#######################################################################################################
#6. histogram Plot
#######################################################################################################
colnames(comb_df_withLabel)[which(colnames(comb_df_withLabel)=="sample_death_in24h")] <- "Death in Next 24h"
outcome_col <- "Death in Next 24h"
top_fs
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24H`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
top_fs
i<-3
feature_col <- top_fs[i]
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
geom_text(aes(x=20, label="Exclusion Threshold\n", y= 800), colour="darkred", angle=90)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 0, vjust = 1)
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 0, vjust = 2)
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = 1)
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1)
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "red")
p
p<-ggplot(comb_df_withLabel, aes_string(x=feature_col, color="`Death in Next 24h`")) +
geom_histogram(fill="white",bins = 50) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold"))+
scale_color_manual(values=c("darkgreen", "darkred"))+
theme_bw() + theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(legend.position="top")+
xlab("Weighted Sum of Top 7 Contributed Features") +
ylab("Count") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14)) +
geom_vline(xintercept = 20, linetype="dashed",
color = "darkblue", size=1.5) +
annotate(geom = 'text', label = 'Exclusion', x = 20, y = 800, hjust = -0.1,color = "darkblue")
p
png(paste0(outdir,"Histogram/",feature_col,".png"),res = 150,width = 800,height = 500)
print(p)
dev.off()
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
library(ontologyIndex)
ghpo_dat<- get_ontology("/Users/lucasliu/Desktop/hp2.obo.txt",extract_tags = "everything")
ghpo_dat$children[1]
descendant_of_Pheno_abnorm <- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
get_descendants(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001873") #AKI
length(descendant_of_AKI) # 15560
descendant_of_AKI
descendant_of_AKI<- get_descendants(ghpo_dat,"HP:0001919") #AKI
descendant_of_AKI
get_ancestors(ghpo_dat, "HP:0001919", exclude_roots = FALSE)
get_ancestors(ghpo_dat, "HP:0001919")
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
source("TAKI_Ultility.R")
compute_avg_pred_risk_and_risk_category2 <- function(cohort_name,outcome_name,perf_dir,method_name,featureset_folder,risk_category_list,risk_category_names){
# perf_dir <- UK_mortality_dir
# cohort_name <- "UK"
# outcome_name <- "Mortality"
# method_name <- "RF"
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
#2.Compute avg pred risk
avg_risk <- get_avg_pred_func(pred_df)
risk_count <- count_risk_category(avg_risk,risk_category_list)
risk_count$Risk_cateogry_upperbound     <-   c(risk_category_list,1.0)
#Extract raio of actual postives
risk_count$Proportion_ACUTAL_LABEL1     <-   as.numeric(lapply(strsplit(gsub("\\(|\\)","",risk_count$N_andPerc_AcutalLabel1),split = " "),'[[',2))/100
#order the levels
risk_count$Risk_Category <- factor(risk_count$Risk_Category, levels = risk_category_names )
return(risk_count)
}
plot_calibration_manually <- function(riskCategory,model_name,risk_category_names){
p <- ggplot(riskCategory, aes(x=Risk_cateogry_upperbound, y=Proportion_ACUTAL_LABEL1)) +
geom_point(color="blue",size = 8)+
#geom_line(color="blue")+
#geom_smooth(method=glm, se=FALSE, linetype="dashed", color="darkred") +
geom_smooth(method=glm, method.args = list(family = "binomial"),
se=FALSE, linetype="dashed", color="darkred",size = 5) +
ylim(0,1) +
labs(title= model_name,x ="Predicted Probability", y = "Ratio of Positives") +
scale_x_continuous(breaks=riskCategory$Risk_cateogry_upperbound,
labels=risk_category_names) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(plot.title = element_text(color="black", size=30,face = "bold"),
axis.title = element_text(color="black", size=30,face = "bold"),
axis.text.x  = element_text(color="black", size=25),
axis.text.y  = element_text(color="black", size=25))
return(p)
}
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/"
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/Calibration_Explanation010522/"
##################################################################################################
######                         Mortality                                            ##############
##################################################################################################
outcome_name <- "Mortality"
method_name <- "RF"
UK_mortality_dir <- paste0(proj_dir,"CV_performance/mortality/")
UTSW_mortality_dir <- paste0(proj_dir,"ExternalV_performance/mortality/")
model1 <- "SelectedClinicalFeature15Vars"
model2 <- "SOFA"
model3 <- "APACHE"
risk_category_list <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
# risk_category_names <- c("<=10%","(10%, 20%]", "(20%, 30%]", "(30%, 40%]",
#                         "(40%, 50%]", "(50%, 60%]", "(60%, 70%]", "(70%, 80%]",
#                         "(80%, 90%]",">90%")
risk_category_names <- c("<=10%","10%-20%", "20%-30%", "30%-40%",
"40%-50%", "50%-60%", "60%-70%", "70%-80%",
"80%-90%",">90%")
#1. UK
UK_riskCategory1     <- compute_avg_pred_risk_and_risk_category2("UK",outcome_name,UK_mortality_dir,method_name,model1,risk_category_list,risk_category_names)
UK_riskCategory2     <- compute_avg_pred_risk_and_risk_category2("UK",outcome_name,UK_mortality_dir,method_name,model2,risk_category_list,risk_category_names)
UK_riskCategory3     <- compute_avg_pred_risk_and_risk_category2("UK",outcome_name,UK_mortality_dir,method_name,model3,risk_category_list,risk_category_names)
#2.UTSW
UTSW_riskCategory1     <-  compute_avg_pred_risk_and_risk_category2("UTSW",outcome_name,UTSW_mortality_dir,method_name,model1,risk_category_list,risk_category_names)
UTSW_riskCategory2     <-  compute_avg_pred_risk_and_risk_category2("UTSW",outcome_name,UTSW_mortality_dir,method_name,model2,risk_category_list,risk_category_names)
UTSW_riskCategory3     <-  compute_avg_pred_risk_and_risk_category2("UTSW",outcome_name,UTSW_mortality_dir,method_name,model3,risk_category_list,risk_category_names)
View(UK_riskCategory1)
p1 <- plot_calibration_manually(UK_riskCategory1,"Clinical Model",risk_category_names)
p1
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
perf_dir <- UK_mortality_dir
cohort_name <- "UK"
outcome_name <- "Mortality"
method_name <- "RF"
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
featureset_folder
method_name
model1
# perf_dir <- UK_mortality_dir
# cohort_name <- "UK"
# outcome_name <- "Mortality"
# method_name <- "RF"
featureset_folder <- "model1"
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
# perf_dir <- UK_mortality_dir
# cohort_name <- "UK"
# outcome_name <- "Mortality"
# method_name <- "RF"
featureset_folder <- model1
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
#2.Compute avg pred risk
avg_risk <- get_avg_pred_func(pred_df)
View(pred_df)
check_df <- pred_df[pred_df$ID == 6]
check_df <- pred_df[pred_df$ID == 6,]
View(check_df)
table(pred_df$TestFold)
7360*5 +7340+7350*4
7354
View(avg_risk)
risk_count <- count_risk_category(avg_risk,risk_category_list)
risk_count$Risk_cateogry_upperbound     <-   c(risk_category_list,1.0)
#Extract raio of actual postives
risk_count$Proportion_ACUTAL_LABEL1     <-   as.numeric(lapply(strsplit(gsub("\\(|\\)","",risk_count$N_andPerc_AcutalLabel1),split = " "),'[[',2))/100
#order the levels
risk_count$Risk_Category <- factor(risk_count$Risk_Category, levels = risk_category_names )
View(risk_count)
risk_count$Risk_Category
risk_category_names
source("TAKI_Ultility.R")
compute_avg_pred_risk_and_risk_category2 <- function(cohort_name,outcome_name,perf_dir,method_name,featureset_folder,risk_category_list,risk_category_names){
# perf_dir <- UK_mortality_dir
# cohort_name <- "UK"
# outcome_name <- "Mortality"
# method_name <- "RF"
# featureset_folder <- model1
#1. Load pred table
pred_df <- read.csv(paste0(perf_dir, featureset_folder, "/Prediction_",method_name,".csv"),stringsAsFactors = F)
#2.Compute avg pred risk
avg_risk <- get_avg_pred_func(pred_df)
risk_count <- count_risk_category(avg_risk,risk_category_list)
risk_count$Risk_cateogry_upperbound     <-   c(risk_category_list,1.0)
#Extract raio of actual postives
risk_count$Proportion_ACUTAL_LABEL1     <-   as.numeric(lapply(strsplit(gsub("\\(|\\)","",risk_count$N_andPerc_AcutalLabel1),split = " "),'[[',2))/100
#order the levels
#risk_count$Risk_Category <- factor(risk_count$Risk_Category, levels = risk_category_names )
return(risk_count)
}
plot_calibration_manually <- function(riskCategory,model_name,risk_category_names){
p <- ggplot(riskCategory, aes(x=Risk_cateogry_upperbound, y=Proportion_ACUTAL_LABEL1)) +
geom_point(color="blue",size = 8)+
#geom_line(color="blue")+
#geom_smooth(method=glm, se=FALSE, linetype="dashed", color="darkred") +
geom_smooth(method=glm, method.args = list(family = "binomial"),
se=FALSE, linetype="dashed", color="darkred",size = 5) +
ylim(0,1) +
labs(title= model_name,x ="Predicted Probability", y = "Ratio of Positives") +
scale_x_continuous(breaks=riskCategory$Risk_cateogry_upperbound,
labels=risk_category_names) +
theme_bw() +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
theme(plot.title = element_text(color="black", size=30,face = "bold"),
axis.title = element_text(color="black", size=30,face = "bold"),
axis.text.x  = element_text(color="black", size=25),
axis.text.y  = element_text(color="black", size=25))
return(p)
}
proj_dir  <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/"
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/Calibration_Explanation010522/"
##################################################################################################
######                         Mortality                                            ##############
##################################################################################################
outcome_name <- "Mortality"
method_name <- "RF"
UK_mortality_dir <- paste0(proj_dir,"CV_performance/mortality/")
UTSW_mortality_dir <- paste0(proj_dir,"ExternalV_performance/mortality/")
model1 <- "SelectedClinicalFeature15Vars"
model2 <- "SOFA"
model3 <- "APACHE"
risk_category_list <- c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9)
# risk_category_names <- c("<=10%","(10%, 20%]", "(20%, 30%]", "(30%, 40%]",
#                         "(40%, 50%]", "(50%, 60%]", "(60%, 70%]", "(70%, 80%]",
#                         "(80%, 90%]",">90%")
risk_category_names <- c("<=10%","10%-20%", "20%-30%", "30%-40%",
"40%-50%", "50%-60%", "60%-70%", "70%-80%",
"80%-90%",">90%")
#1. UK
UK_riskCategory1     <- compute_avg_pred_risk_and_risk_category2("UK",outcome_name,UK_mortality_dir,method_name,model1,risk_category_list,risk_category_names)
View(UK_riskCategory1)
UK_riskCategory2     <- compute_avg_pred_risk_and_risk_category2("UK",outcome_name,UK_mortality_dir,method_name,model2,risk_category_list,risk_category_names)
View(UK_riskCategory1)
source("TAKI_Ultility.R")
library(lubridate)
#Data dir
UK_data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/uky/"
UTSW_data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data/TAKI_Data_Extracted/utsw/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0806/Discrip_Stats/"
####################################################################################
#### 1. Load data
#'@IMPORTANT_NOTE_For_sCr:
#'In "All_Feature_NOTimputed.csv, "Baseline_sCr" contains values measured values with reolved by EPI(Resolve EGFR = 75)
#'But in  add_listofvar_func, for data of discrptiive stats
#'"Baseline_sCr":                measured scr, missings are coded as NA
#'"Baseline_sCr_Resolving75EPI": measured scr, missing are filled with revolsing EPi with 75
#'"Baseline_sCr_RegImputation":  measured scr, and missings are filled with regression model (Refer to function for details)
####################################################################################
feature_file <- "Model_Feature_Outcome/All_Feature_NOTimputed.csv"
outcome_file <- "Model_Feature_Outcome/All_outcome.csv"
outcome_colname_list <- c("Death_inHOSP","MAKE_HOSP120_Drop50")
#For UK
UK_data <- Combine_featureAndoutcomes_func(UK_data_dir,feature_file,outcome_file,outcome_colname_list)
#For UTSW
UTSW_data <- Combine_featureAndoutcomes_func(UTSW_data_dir,feature_file,outcome_file,outcome_colname_list)
####################################################################################
###3.Add some variables
####################################################################################
#For UK
UK_data <- add_listofvar_func(UK_data,UK_data_dir,"UK")
#For UTSW
UTSW_data <- add_listofvar_func(UTSW_data,UTSW_data_dir,"UTSW")
####################################################################################
##4. Recode last and max KDIGO 3 and 4
####################################################################################
UK_data <-  recode_KDIGO_func(UK_data,"LAST_KDIGO_ICU_D0toD3")
UK_data <-  recode_KDIGO_func(UK_data,"MAX_KDIGO_ICU_D0toD3")
UTSW_data <-  recode_KDIGO_func(UTSW_data,"LAST_KDIGO_ICU_D0toD3")
UTSW_data <-  recode_KDIGO_func(UTSW_data,"MAX_KDIGO_ICU_D0toD3")
summary(UK_data)
summary(UK_data["AGE"])
summary(UK_data["HR_D1_HIGH"])
summary(UK_data["Temperature_D1_HIGH"])
summary(UK_data["Temperature_D1_LOW"])
summary(UK_data["Bilirubin_D1_HIGH"])
summary(UK_data["BUN_D0toD3_HIGH"])
summary(UK_data["FI02_D1_HIGH"])
summary(UK_data["PH_D1_LOW"])
summary(UK_data["Platelets_D1_LOW"])
summary(UK_data["MAX_KDIGO_ICU_D0toD3"])
UK_data["MAX_KDIGO_ICU_D0toD3"]
summary(UK_data["UrineOutput_D0toD3"])
summary(UK_data["BUN_D0toD3_HIGH"])
summary(UK_data["FI02_D1_HIGH"])
summary(UK_data["PH_D1_LOW"])
summary(UK_data["Platelets_D1_LOW"])
summary(UK_data["Hemoglobin_D1_LOW"])
summary(UK_data["Sodium_D1_LOW"])
summary(UK_data["Admit_sCr"])
summary(UK_data["UrineOutput_D0toD3"])
View(UK_data)
