outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
disposition_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] %in% analysis_ID),c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
expired_orhospice_indexes <- which(grepl("Expired|Hospice",disposition_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- disposition_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
expired_orhospice_indexes <- which(grepl("Expired",disposition_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- disposition_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
##########################################################################################
#3. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
##########################################################################################
#2. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(expired_orhospice_df)
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
View(check_df)
getwd()
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(48))
check_df <- expired_orhospice_df[check_idxes,]
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv")
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#'@TODO
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
#'@TODO:
#'#1. Add hosp_end+ 24h
#'#1.if has disease date, use it to determine if patient died in hospital or not,
#'#2.if no date, check if expried/hopice, if so, treat it as died in hosp
##########################################################################################
#3. Death or alive in Hospital
#hosp_start  <=  decease_date <= hosp_end
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
library(lubridate)
source("TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UKY/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Load inclusion ID
Inclusion_df <-read.csv(paste0(outdir,"Inclusion_IDs.csv"),stringsAsFactors = F)
#2. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
#'@TODO
##########################################################################################
#2. Check if mistach between DECEASED_DATE and disposition (Expired|Hospice)
#   If expired or hospice, should have a  deceased date <= HOSP_DISCHARGE_DATE + 24h
##########################################################################################
expired_orhospice_indexes <- which(grepl("Expired|Hospice",All_time_df[,"DISCHARGE_DISPOSITION"],ignore.case = T)==T)
expired_orhospice_df <- All_time_df[expired_orhospice_indexes,c("STUDY_PATIENT_ID","DISCHARGE_DISPOSITION","Updated_HOSP_DISCHARGE_DATE","DECEASED_DATE")]
#Get pt whoes deceased date > HOSP_DISCHARGE_DATE + 24h
check_idxes <- which(mdy(expired_orhospice_df[,"DECEASED_DATE"]) >  ymd_hms(expired_orhospice_df[,"Updated_HOSP_DISCHARGE_DATE"]) + hours(24))
check_df <- expired_orhospice_df[check_idxes,]
colnames(check_df)[3] <- "HOSP_DISCHARGE_DATE"
write.csv(check_df,"/Users/lucasliu/Desktop/DISCHARGE_DISPOSITION_And_DECEASED_DATE_Check.csv",row.names = F)
##########################################################################################
#3. Analysis Id for pts has corrected HOSP ADMISSION time
##########################################################################################
analysis_ID <- unique(Inclusion_df[,"STUDY_PATIENT_ID"])
##########################################################################################
#3. Death or alive in the first 3 days of ICU D0,D1,D3, even if patient died outside ICU (e.g, D3 not in ICU)
##########################################################################################
Death_ICU_D0toD3_df <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_ICU_D0toD3_df) <- c("STUDY_PATIENT_ID","Death_ICU_D0toD3")
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_ICU_D0toD3_df[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_icu_start <- ymd_hms(curr_time_df[,"Updated_ICU_ADMIT_DATE"])
curr_icu_end <- ymd_hms(curr_time_df[,"Updated_ICU_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
#Get ICU day 3 end time no matter it is in ICU or not
curr_d3_end_time <- ymd_hms(curr_time_df[,"D3_End"])
if (is.na(curr_decease_date) == T){ #no death date
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 0
}else {
if (curr_decease_date >= curr_icu_start  & curr_decease_date <= curr_d3_end_time ){
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 1
}else{
Death_ICU_D0toD3_df[i,"Death_ICU_D0toD3"] <- 0
}
}
}
table(Death_ICU_D0toD3_df$Death_ICU_D0toD3) #34973  1044
#'@TODO:
#'#1. Add hosp_end+ 24h
#'#1.if has disease date, use it to determine if patient died in hospital or not,
#'#2.if no date, check if expried/hopice, if so, treat it as died in hosp
##########################################################################################
#3. Death or alive in Hospital
#hosp_start  <=  decease_date <= hosp_end
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
#'@TODO:
##########################################################################################
#3. Death or alive in Hospital
#1.if has disease date, hosp_start  <=  decease_date <= hosp_end + 24 hours
#2.if NO disease date,  if disposition contains expried/hopice,treat it as died in hosp
##########################################################################################
Death_inHOSP <- as.data.frame(matrix(NA, nrow = length(analysis_ID),ncol = 2))
colnames(Death_inHOSP) <- c("STUDY_PATIENT_ID","Death_inHOSP")
i <- 1
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_inHOSP[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
curr_disposition <- curr_time_df[,"DISCHARGE_DISPOSITION"]
curr_disposition
is.na(curr_decease_date) == T
#check if disposition contains hospice or expired
grepl("Expired|Hospice",curr_disposition,ignore.case = T)
for (i in 1:length(analysis_ID)){
if (i %% 1000 ==0){print(i)}
curr_id <- analysis_ID[i]
Death_inHOSP[i,"STUDY_PATIENT_ID"] <- curr_id
#Time info
curr_time_df <- All_time_df[which(All_time_df[,"STUDY_PATIENT_ID"] == curr_id),]
curr_hosp_start <- ymd_hms(curr_time_df[,"Updated_HOSP_ADMIT_DATE"])
curr_hosp_end   <- ymd_hms(curr_time_df[,"Updated_HOSP_DISCHARGE_DATE"])
curr_decease_date <- mdy(curr_time_df[,"DECEASED_DATE"])
curr_disposition <- curr_time_df[,"DISCHARGE_DISPOSITION"]
if (is.na(curr_decease_date) == T){ #no death date
#check if disposition contains hospice or expired
if (grepl("Expired|Hospice",curr_disposition,ignore.case = T)==T){
Death_inHOSP[i,"Death_inHOSP"] <- 1
}else{
Death_inHOSP[i,"Death_inHOSP"] <- 0
}
}else {
if (curr_decease_date >= curr_hosp_start  & curr_decease_date <= curr_hosp_end + hours(24)){
Death_inHOSP[i,"Death_inHOSP"] <- 1
}else{
Death_inHOSP[i,"Death_inHOSP"] <- 0
}
}
}
table(Death_inHOSP$Death_inHOSP) #33685  2332
View(Death_inHOSP)
time_check_df <- which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID)
time_check_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),]
which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T)
length(which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T))
length(which(is.na(time_check_df$DECEASED_DATE)== T)
)
length(which(time_check_df$DECEASED_DATE >= curr_hosp_start  & time_check_df$DECEASED_DATE  <= curr_hosp_end + hours(24)))
time_check_df$DECEASED_DATE
length(which(mdy(time_check_df$DECEASED_DATE)  <= ymd_hms(time_check_df$Updated_HOSP_DISCHARGE_DATE) + hours(24)))
length(which(is.na(time_check_df$DECEASED_DATE)== T & grepl("Expired|Hospice",time_check_df$DISCHARGE_DISPOSITION,ignore.case = T)==T))
length(which(mdy(time_check_df$DECEASED_DATE)  <= ymd_hms(time_check_df$Updated_HOSP_DISCHARGE_DATE) + hours(24)))
2445+ 2499
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
check_df <-which(Death_inHOSP$STUDY_PATIENT_ID %in% analysis_ID)
check_df <- Death_inHOSP[which(Death_inHOSP$STUDY_PATIENT_ID %in% analysis_ID),]
table(check_df$Death_inHOSP) #33685  2332 #after udpate 31073 vs 4944
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code")
library(lubridate)
source("TAKI_Ultility.R")
get_feature_forPt <- function(pt_id, input_df,feature_name){
feature_value <- input_df[which(input_df[,"STUDY_PATIENT_ID"] == pt_id),feature_name]
return(feature_value)
}
#data dir
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/"
##########################################################################################
#1. Load data
##########################################################################################
#1. Analysis Id after exclusion
analysis_ID_df <-read.csv(paste0(outdir,"Final_Analysis_ID.csv"),stringsAsFactors = F)
analysis_ID <- unique(analysis_ID_df[,"STUDY_PATIENT_ID"]) #7354
#2. Corrected Time df
All_time_df <-read.csv(paste0(outdir,"All_Corrected_Timeinfo.csv"),stringsAsFactors = F)
All_time_df <- All_time_df[which(All_time_df$STUDY_PATIENT_ID %in% analysis_ID),] #filter for anlaysis Id only
#3. SOFA APACHE
All_SOFA_APACHE_df <- read.csv(paste0(outdir,"All_SOFA_APACHE_With_NotImputedFeature.csv"),stringsAsFactors = F)
View(All_SOFA_APACHE_df)
source("TAKI_Ultility.R")
library(rms)
library(PredictABEL)
library(pROC) #can also use this one for delong's methods
library(Rmisc)
library(caret)
#this script do 10 folds CV on UK data
#1. for each fold , down sampling 10 time, each instance get 10 predicted results
#2. compute confidence interval for performance metrics for each fold with each sampling index
#Data dir
data_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/uky/Model_Feature_Outcome/"
#out dir
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/Intermediate_Results/Prediction_results0708/CV_performance/"
#feature file and outcome file names
outcome_file <- "All_outcome.csv"
#######################################################################################
######                           Mortality Prediction   1                   ############
#feature file: 1. All_Feature_imputed_normed.csv,
#Outcome file: All_outcome.csv
#######################################################################################
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
colnames(model_data)
table(model_data$Death_inHOSP)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop50/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop50"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop50)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_MAX_KDIGO_ICUD0toD3_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop50/KDIGO/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop50"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop50)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop30/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop30"
table(model_data$MAKE_HOSP120_Drop30)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop30/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop30"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop30)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_MAX_KDIGO_ICUD0toD3_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop30/KDIGO/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop30"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop30)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop30/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop30"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop30)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_MAX_KDIGO_ICUD0toD3_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop50/KDIGO/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop50"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop50)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop50/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop50"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop50)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_APACHE_TOTAL_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"mortality/APACHE/")
#Outcome column name
outcome_colname <- "Death_inHOSP"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$Death_inHOSP)
table(model_data$Death_inHOSP)
#1.All_Feature_imputed_normed.csv
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop50/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop50"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop50)
feature_file <- c("All_Feature_imputed_normed.csv")
#Outdir for mortality
outdir1 <- paste0(out_dir,"make120_drop30/AllClinicalFeature/")
#Outcome column name
outcome_colname <- "MAKE_HOSP120_Drop30"
#1.Get model data
model_data <- construct_model_data_func(data_dir,feature_file,outcome_file,outcome_colname)
table(model_data$MAKE_HOSP120_Drop30)
source("/.TAKI_Code/TAKI_Ultility.R")
source("/.TAKI_Code/TAKI_Ultility.R")
setwd("~/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/Process_UTSW")
source("/TAKI_Code/TAKI_Ultility.R")
source("./TAKI_Code/TAKI_Ultility.R")
library(lubridate)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Other_Project/TAKI_Project/TAKI_Code/TAKI_Ultility.R")
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/UTSW_Data/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"req1242_demo_2016_2019.csv"),stringsAsFactors = F)
View(raw_demo_df)
colnames(raw_demo_df)
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"req1242_demo_2016_2019.csv"),stringsAsFactors = F)
raw_demo_df <- raw_demo_df[!duplicated(raw_demo_df[,c("PATIENT_NUM","GENDER","RACE")]),] ##remove duplicate rows
View(raw_demo_df)
##########################################################################################
#Load Raw Data
##########################################################################################
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"req1242_demo_2016_2019.csv"),stringsAsFactors = F)
raw_demo_df <- raw_demo_df[!duplicated(raw_demo_df[,c("PATIENT_NUM","GENDER","RACE")]),] ##remove duplicate rows
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(outdir,"req1242_utaki_all_ICU_HOSP_TIME.csv"),stringsAsFactors = F)
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(raw_dir,"req1242_utaki_all_ICU_HOSP_TIME.csv"),stringsAsFactors = F)
View(All_time_df)
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(raw_dir,"req1242_HOSP_ICU_time.csv"),stringsAsFactors = F)
View(All_time_df)
which(All_time_df$ICU_DISCH_TIME > All_time_df$HOSP_DISCH_TIME)
All_time_df$ICU_DISCH_TIME
check_idxes <- which(dmy_hms(All_time_df$ICU_DISCH_TIME) > dmy_hms(All_time_df$HOSP_DISCH_TIME))
check_df <- All_time_df[check_idxes,]
View(check_df)
RRT_time_df <- read.csv(paste0(raw_dir,"req1242_utaki_dialysis.csv"),stringsAsFactors = F)
View(RRT_time_df)
which(RRT_time_df$PATIENT_NUM==21)
library(openxlsx)
##########################################################################################
#Load Raw Data
##########################################################################################
#1. Load xilong file
xilong_exlcusion_df <- read.xlsx(paste0(raw_dir,"/Users/lucasliu/Downloads/Patient list of deleting 07062021.xlsx"),sheet = 1)
##########################################################################################
#Load Raw Data
##########################################################################################
#1. Load xilong file
xilong_exlcusion_df <- read.xlsx(paste0("/Users/lucasliu/Downloads/Patient list of deleting 07062021.xlsx"),sheet = 1)
check_df <- All_time_df[which(All_time_df$PATIENT_NUM %in% xilong_exlcusion_df$PATIENT_NUM),]
xilong_exlcusion_df$PATIENT_NUM
View(xilong_exlcusion_df)
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(raw_dir,"req1242_HOSP_ICU_time.csv"),stringsAsFactors = F)
All_time_df$PATIENT_NUM
intersect(All_time_df$PATIENT_NUM,xilong_exlcusion_df$PATIENT_NUM)
length(intersect(All_time_df$PATIENT_NUM,xilong_exlcusion_df$PATIENT_NUM))
View(xilong_exlcusion_df)
check_df <- All_time_df[!which(All_time_df$PATIENT_NUM %in% xilong_exlcusion_df$PATIENT_NUM),]
check_df <- All_time_df[-which(All_time_df$PATIENT_NUM %in% xilong_exlcusion_df$PATIENT_NUM),]
View(check_df)
#Raw data dir
raw_dir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/Taylors_Data/UTSW/raw_csv_files/"
outdir <- "/Volumes/LJL_ExtPro/Data/AKI_Data/TAKI_Data_Extracted/utsw/"
##########################################################################################
#Load Raw Data
##########################################################################################
#1. Load xilong file
xilong_exlcusion_df <- read.xlsx(paste0("/Users/lucasliu/Downloads/Patient list of deleting 07062021.xlsx"),sheet = 1)
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"tPatients.csv"),stringsAsFactors = F)
colnames(raw_demo_df)
raw_demo_df$SEX
raw_demo_df$SEX_ID
colnames(raw_demo_df)
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"tPatients.csv"),stringsAsFactors = F)
raw_demo_df <- raw_demo_df[!duplicated(raw_demo_df[,c("PATIENT_NUM","SEX_ID","RACE_BLACK")]),] ##remove duplicate rows
#1.Load raw demo data
raw_demo_df <- read.csv(paste0(raw_dir,"tPatients.csv"),stringsAsFactors = F)
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(raw_dir,"tIndexedIcuAdmission.csv"),stringsAsFactors = F)
#3. Corrected Time df for analysis ID
All_time_df <-read.csv(paste0(raw_dir,"tIndexedIcuAdmission.csv"),stringsAsFactors = F)
check_df <- All_time_df[which(All_time_df$PATIENT_NUM %in% xilong_exlcusion_df$PATIENT_NUM),]
check_idxes <- which(dmy_hms(All_time_df$ICU_DISCH_TIME) > dmy_hms(All_time_df$HSP_ADMSN_TIME))
All_time_df$ICU_DISCH_TIME
check_idxes <- which(ymd_hms(All_time_df$ICU_DISCH_TIME) > ymd_hms(All_time_df$HSP_ADMSN_TIME))
check_df <- All_time_df[check_idxes,]
View(check_df)
check_df <- All_time_df[check_idxes,c("ICU_DISCH_TIME","HSP_ADMSN_TIME")]
View(check_df)
check_idxes <- which(ymd_hms(All_time_df$ICU_DISCH_TIME) > ymd_hms(All_time_df$HSP_DISCH_TIME))
check_df <- All_time_df[check_idxes,c("ICU_DISCH_TIME","HSP_DISCH_TIME")]
View(check_df)
check_df <- All_time_df[check_idxes,c("PATIENT_NUM","ICU_DISCH_TIME","HSP_DISCH_TIME")]
check_idxes <- which(ymd_hms(All_time_df$ICU_DISCH_TIME) > ymd_hms(All_time_df$HSP_DISCH_TIME) +hours(24))
check_df <- All_time_df[check_idxes,c("PATIENT_NUM","ICU_DISCH_TIME","HSP_DISCH_TIME")]
All_time_df[duplicated(All_time_df$PATIENT_NUM),]
check_df <- All_time_df[duplicated(All_time_df$PATIENT_NUM),]
View(check_df)
All_time_df <- All_time_df[!duplicated(All_time_df[,c("PATIENT_NUM","ICU_DISCH_TIME","HSP_DISCH_TIME")]),] ##remove duplicate rows
#4.RRT time
RRT_df <-read.csv(paste0(raw_dir,"tDialysis.csv"),stringsAsFactors = F)
View(RRT_df)
View(xilong_exlcusion_df)
#5.Scr
All_Scr_df <-read.csv(paste0(raw_dir,"all_scr_data"),stringsAsFactors = F)
#5.Scr
All_Scr_df <-read.csv(paste0(raw_dir,"all_scr_data.csv"),stringsAsFactors = F)
View(All_Scr_df)
